lineage:
- ref_type: ref
  source: analytics_project_my_first_dbt_model
  target: analytics_project_my_second_dbt_model
- ref_type: ref
  source: ecommerce_project_my_first_dbt_model
  target: ecommerce_project_my_second_dbt_model
- ref_type: ref
  source: my_test_project_my_first_dbt_model
  target: my_test_project_my_second_dbt_model
- ref_type: direct_reference
  source: my_test_project_raw_campaigns
  target: my_test_project_stg_campaigns
- ref_type: direct_reference
  source: my_test_project_raw_orders
  target: my_test_project_stg_orders
- ref_type: cross_project_source
  source: ecommerce_project_stg_orders
  target: analytics_project_analytics_orders
- ref_type: cross_project_source
  source: my_test_project_my_first_dbt_model
  target: analytics_project_analytics_orders
models:
- columns:
  - ai_description: The `order_id` column in the `analytics_orders` table stores a
      unique integer identifier for each order, sourced from both ecommerce and test
      project datasets. This column serves as the primary key for identifying individual
      orders and is used to link order information across different data sources,
      enabling comprehensive order analysis.
    description: The `order_id` column in the `analytics_orders` table stores a unique
      integer identifier for each order, sourced from both ecommerce and test project
      datasets. This column serves as the primary key for identifying individual orders
      and is used to link order information across different data sources, enabling
      comprehensive order analysis.
    name: order_id
    type: integer
    user_edited: false
  - ai_description: The `customer_id` column in the `analytics_orders` table stores
      the unique identifier for a customer associated with an order. This integer
      value links orders from both ecommerce and test project datasets, enabling analysis
      of customer behavior across different platforms. This allows for the aggregation
      of customer-level metrics.
    description: The `customer_id` column in the `analytics_orders` table stores the
      unique identifier for a customer associated with an order. This integer value
      links orders from both ecommerce and test project datasets, enabling analysis
      of customer behavior across different platforms. This allows for the aggregation
      of customer-level metrics.
    name: customer_id
    type: integer
    user_edited: false
  - ai_description: This column, `test_project_id`, stores the integer identifier
      associated with a test project for each order. It links orders to specific test
      projects, enabling analysis of order behavior within those projects. This allows
      for the aggregation of ecommerce and test project datasets.
    description: This column, `test_project_id`, stores the integer identifier associated
      with a test project for each order. It links orders to specific test projects,
      enabling analysis of order behavior within those projects. This allows for the
      aggregation of ecommerce and test project datasets.
    name: test_project_id
    type: integer
    user_edited: false
  - ai_description: '`some_metric` represents a numeric value, likely an amount, associated
      with either an ecommerce order or a test project.  In the `analytics_orders`
      table, this column aggregates order amounts from ecommerce and test project
      datasets, allowing for combined analysis.  The value is derived from the `amount`
      column in the `test_project_data` table.'
    description: '`some_metric` represents a numeric value, likely an amount, associated
      with either an ecommerce order or a test project.  In the `analytics_orders`
      table, this column aggregates order amounts from ecommerce and test project
      datasets, allowing for combined analysis.  The value is derived from the `amount`
      column in the `test_project_data` table.'
    name: some_metric
    type: numeric
    user_edited: false
  description: Aggregated order data combining ecommerce and test project datasets.
  file_path: models\example\analytics_orders.sql
  id: analytics_project_analytics_orders
  materialized: view
  name: analytics_orders
  project: analytics_project
  schema: analytics_schema_analytics_schema
  sql: "{{ config(\r\n    materialized='view',\r\n    schema='analytics_schema'\r\n\
    ) }}\r\n\r\nWITH ecommerce_orders AS (\r\n    -- Use source() to reference ecommerce\
    \ models\r\n    SELECT * FROM {{ source('ecommerce_models', 'stg_orders') }}\r\
    \n),\r\ntest_project_data AS (\r\n    -- Use source() to reference test project\
    \ models\r\n    SELECT * FROM {{ source('test_project_models', 'my_first_dbt_model')\
    \ }}\r\n)\r\n\r\nSELECT\r\n    eo.order_id,\r\n    eo.customer_id,\r\n    td.id\
    \ as test_project_id,\r\n    td.amount as some_metric\r\nFROM ecommerce_orders\
    \ eo\r\nLEFT JOIN test_project_data td\r\nON eo.customer_id = td.order_id"
- ai_description: 'This dbt model, `my_first_dbt_model`, creates a table named after
    the model. It generates a simple dataset containing a single integer column, `id`,
    with two rows: one containing the value 1 and another containing a null value.
    The model''s primary function is to demonstrate basic dbt functionality, including
    model configuration and SQL syntax. It serves as a foundational element within
    the `analytics_project`, providing a starting point for more complex data transformations.'
  columns:
  - ai_description: The `id` column stores integer values, specifically the number
      1 and a null value. This column serves as a simple identifier within the `my_first_dbt_model`
      table, demonstrating basic dbt functionality and providing a foundational dataset
      for the project. There is no business meaning or calculation logic associated
      with this column.
    description: The `id` column stores integer values, specifically the number 1
      and a null value. This column serves as a simple identifier within the `my_first_dbt_model`
      table, demonstrating basic dbt functionality and providing a foundational dataset
      for the project. There is no business meaning or calculation logic associated
      with this column.
    name: id
    type: integer
    user_edited: false
  description: 'This dbt model, `my_first_dbt_model`, creates a table named after
    the model. It generates a simple dataset containing a single integer column, `id`,
    with two rows: one containing the value 1 and another containing a null value.
    The model''s primary function is to demonstrate basic dbt functionality, including
    model configuration and SQL syntax. It serves as a foundational element within
    the `analytics_project`, providing a starting point for more complex data transformations.'
  file_path: models\example\my_first_dbt_model.sql
  id: analytics_project_my_first_dbt_model
  materialized: table
  name: my_first_dbt_model
  project: analytics_project
  schema: analytics_schema
  sql: "/*\n    Welcome to your first dbt model!\n    Did you know that you can also\
    \ configure models directly within SQL files?\n    This will override configurations\
    \ stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n\
    */\n\n{{ config(materialized='table') }}\n\nwith source_data as (\n\n    select\
    \ 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\
    \n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\
    \n-- where id is not null"
  user_edited: false
- ai_description: This dbt model, `my_second_dbt_model`, within the `analytics_project`,
    filters data from the `my_first_dbt_model`. It selects all columns from the upstream
    model but specifically targets rows where the `id` column equals 1. This model
    produces a subset of the data from `my_first_dbt_model`, focusing on a specific
    record. Its role in the pipeline is to provide a filtered view of the initial
    data, potentially for analysis or use in downstream models. The primary transformation
    is a simple filtering operation based on the `id` column.
  columns:
  - ai_description: This column, `id`, stores integer values representing the unique
      identifier for each record. Within this model, it serves as the primary key
      and is used to filter the data, selecting only the record where the `id` is
      equal to 1. This filtering isolates a specific record from the upstream model
      for focused analysis.
    description: This column, `id`, stores integer values representing the unique
      identifier for each record. Within this model, it serves as the primary key
      and is used to filter the data, selecting only the record where the `id` is
      equal to 1. This filtering isolates a specific record from the upstream model
      for focused analysis.
    name: id
    type: integer
    user_edited: false
  description: This dbt model, `my_second_dbt_model`, within the `analytics_project`,
    filters data from the `my_first_dbt_model`. It selects all columns from the upstream
    model but specifically targets rows where the `id` column equals 1. This model
    produces a subset of the data from `my_first_dbt_model`, focusing on a specific
    record. Its role in the pipeline is to provide a filtered view of the initial
    data, potentially for analysis or use in downstream models. The primary transformation
    is a simple filtering operation based on the `id` column.
  file_path: models\example\my_second_dbt_model.sql
  id: analytics_project_my_second_dbt_model
  materialized: view
  name: my_second_dbt_model
  project: analytics_project
  schema: analytics_schema
  sql: '-- Use the `ref` function to select from other models


    select *

    from {{ ref(''my_first_dbt_model'') }}

    where id = 1'
  user_edited: false
- columns:
  - ai_description: The `id` column stores integer identifiers for records within
      the `my_first_dbt_model` table.  This column serves as a unique identifier,
      likely for distinguishing individual entries in the model.  The provided SQL
      context suggests this column is used to test the model's functionality and may
      contain a null value for testing purposes.
    description: The `id` column stores integer identifiers for records within the
      `my_first_dbt_model` table.  This column serves as a unique identifier, likely
      for distinguishing individual entries in the model.  The provided SQL context
      suggests this column is used to test the model's functionality and may contain
      a null value for testing purposes.
    name: id
    type: integer
    user_edited: false
  description: A starter dbt model
  file_path: models\example\my_first_dbt_model.sql
  id: ecommerce_project_my_first_dbt_model
  materialized: table
  name: my_first_dbt_model
  project: ecommerce_project
  schema: ecommerce
  sql: "/*\n    Welcome to your first dbt model!\n    Did you know that you can also\
    \ configure models directly within SQL files?\n    This will override configurations\
    \ stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n\
    */\n\n{{ config(materialized='table') }}\n\nwith source_data as (\n\n    select\
    \ 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\
    \n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\
    \n-- where id is not null"
- columns:
  - description: ''
    name: id
    type: integer
  description: A starter dbt model
  file_path: models\example\my_second_dbt_model.sql
  id: ecommerce_project_my_second_dbt_model
  materialized: view
  name: my_second_dbt_model
  project: ecommerce_project
  schema: ecommerce
  sql: '-- Use the `ref` function to select from other models


    select *

    from {{ ref(''my_first_dbt_model'') }}

    where id = 1'
- columns:
  - description: ''
    name: order_id
    type: integer
  - ai_description: This column, `customer_id`, stores the unique identifier for the
      customer associated with each order.  In the `stg_orders` staging model, this
      integer value links each order to a specific customer within the e-commerce
      system. This allows for analysis of customer purchasing behavior and order history.
    description: This column, `customer_id`, stores the unique identifier for the
      customer associated with each order.  In the `stg_orders` staging model, this
      integer value links each order to a specific customer within the e-commerce
      system. This allows for analysis of customer purchasing behavior and order history.
    name: customer_id
    type: integer
    user_edited: false
  - ai_description: The `order_date` column in the `stg_orders` staging model stores
      the date when an order was placed. This column is crucial for understanding
      the timing of orders and is used for time-series analysis, trend identification,
      and calculating order-related metrics over specific periods. It directly reflects
      the date the order was initiated in the e-commerce system.
    description: The `order_date` column in the `stg_orders` staging model stores
      the date when an order was placed. This column is crucial for understanding
      the timing of orders and is used for time-series analysis, trend identification,
      and calculating order-related metrics over specific periods. It directly reflects
      the date the order was initiated in the e-commerce system.
    name: order_date
    type: date
    user_edited: false
  - ai_description: The `status` column in the `stg_orders` table stores the current
      order status, such as "pending," "shipped," or "delivered." This column is crucial
      for tracking the lifecycle of an order within the staging model, allowing analysts
      to understand the progression of orders from creation to fulfillment.  The values
      in this column are directly sourced from the raw orders data.
    description: The `status` column in the `stg_orders` table stores the current
      order status, such as "pending," "shipped," or "delivered." This column is crucial
      for tracking the lifecycle of an order within the staging model, allowing analysts
      to understand the progression of orders from creation to fulfillment.  The values
      in this column are directly sourced from the raw orders data.
    name: status
    type: character varying(20)
    user_edited: false
  description: Staging model for raw orders data in the e-commerce domain.
  file_path: models\example\stg_orders.sql
  id: ecommerce_project_stg_orders
  materialized: view
  name: stg_orders
  project: ecommerce_project
  schema: ecommerce_ecommerce_schema
  sql: "{{ config(\r\n    materialized='view',\r\n    schema='ecommerce_schema',\r\
    \n    alias='stg_orders'\r\n) }}\r\n\r\nSELECT\r\n    order_id,\r\n    customer_id,\r\
    \n    order_date,\r\n    status\r\nFROM {{ source('ecommerce_source', 'raw_orders')\
    \ }}"
- columns:
  - ai_description: This column, `id`, stores the unique identifier for each transaction,
      derived from the `transaction_id` in the source data.  It serves as the primary
      key for this model, enabling the identification and tracking of individual transactions.  This
      integer value is crucial for joining this model with other tables and analyzing
      transaction-level details.
    description: This column, `id`, stores the unique identifier for each transaction,
      derived from the `transaction_id` in the source data.  It serves as the primary
      key for this model, enabling the identification and tracking of individual transactions.  This
      integer value is crucial for joining this model with other tables and analyzing
      transaction-level details.
    name: id
    type: integer
    user_edited: false
  - ai_description: This column, `order_id`, stores the unique identifier for each
      order associated with a transaction. It's used to link individual transactions
      to their respective orders within the `my_first_dbt_model` table. This integer
      value allows for grouping and analysis of transactions at the order level.
    description: This column, `order_id`, stores the unique identifier for each order
      associated with a transaction. It's used to link individual transactions to
      their respective orders within the `my_first_dbt_model` table. This integer
      value allows for grouping and analysis of transactions at the order level.
    name: order_id
    type: integer
    user_edited: false
  - ai_description: The `amount` column stores the monetary value of each transaction.
      This numeric field represents the financial value associated with the transaction,
      likely used for calculating total order values and analyzing revenue trends
      within the `my_first_dbt_model`.
    description: The `amount` column stores the monetary value of each transaction.
      This numeric field represents the financial value associated with the transaction,
      likely used for calculating total order values and analyzing revenue trends
      within the `my_first_dbt_model`.
    name: amount
    type: numeric
    user_edited: false
  - ai_description: This column, `transaction_date`, stores the date when a transaction
      occurred. It's used to track the timing of each transaction, allowing for analysis
      of trends and performance over time. This date is extracted from the raw transaction
      data.
    description: This column, `transaction_date`, stores the date when a transaction
      occurred. It's used to track the timing of each transaction, allowing for analysis
      of trends and performance over time. This date is extracted from the raw transaction
      data.
    name: transaction_date
    type: date
    user_edited: false
  description: A starter dbt model
  file_path: models\example\my_first_dbt_model.sql
  id: my_test_project_my_first_dbt_model
  materialized: table
  name: my_first_dbt_model
  project: my_test_project
  schema: my_test_my_test
  sql: "{{ config(\n    materialized='table',\n    schema='my_test',\n    alias='my_first_dbt_model'\n\
    ) }}\n\nSELECT\n    transaction_id as id,\n    order_id,\n    amount,\n    transaction_date\n\
    FROM {{ source('my_test_project', 'raw_transactions') }}\nWHERE transaction_id\
    \ IS NOT NULL"
- columns:
  - ai_description: The `id` column stores integer values representing unique identifiers
      for records within the `my_second_dbt_model` table. This column is used to join
      with the `my_first_dbt_model` table and filter results, likely serving as a
      primary key or foreign key for relating data between the two models.  The value
      `1` is used in the `WHERE` clause to filter the results.
    description: The `id` column stores integer values representing unique identifiers
      for records within the `my_second_dbt_model` table. This column is used to join
      with the `my_first_dbt_model` table and filter results, likely serving as a
      primary key or foreign key for relating data between the two models.  The value
      `1` is used in the `WHERE` clause to filter the results.
    name: id
    type: integer
    user_edited: false
  - ai_description: The `order_id` column stores a unique integer identifier for each
      order within the `my_second_dbt_model`. This column serves as a primary key,
      enabling the linking of order-specific information from other models, as demonstrated
      by the `ref` function used to join with `my_first_dbt_model`.  It's crucial
      for tracking and analyzing individual orders.
    description: The `order_id` column stores a unique integer identifier for each
      order within the `my_second_dbt_model`. This column serves as a primary key,
      enabling the linking of order-specific information from other models, as demonstrated
      by the `ref` function used to join with `my_first_dbt_model`.  It's crucial
      for tracking and analyzing individual orders.
    name: order_id
    type: integer
    user_edited: false
  - ai_description: The `amount` column in the `my_second_dbt_model` table stores
      a numeric value, likely representing a monetary or quantitative measure.  This
      column's purpose is to provide a specific value associated with a record, potentially
      used for calculations or aggregations within the model.  Given the context,
      it likely reflects an amount related to the `my_first_dbt_model` data, possibly
      filtered by ID.
    description: The `amount` column in the `my_second_dbt_model` table stores a numeric
      value, likely representing a monetary or quantitative measure.  This column's
      purpose is to provide a specific value associated with a record, potentially
      used for calculations or aggregations within the model.  Given the context,
      it likely reflects an amount related to the `my_first_dbt_model` data, possibly
      filtered by ID.
    name: amount
    type: numeric
    user_edited: false
  - ai_description: This column, `transaction_date`, stores the date associated with
      each transaction. It's crucial for filtering and analyzing transactions over
      time within this starter dbt model. This date allows for time-series analysis
      and reporting on transaction trends.
    description: This column, `transaction_date`, stores the date associated with
      each transaction. It's crucial for filtering and analyzing transactions over
      time within this starter dbt model. This date allows for time-series analysis
      and reporting on transaction trends.
    name: transaction_date
    type: date
    user_edited: false
  description: A starter dbt model
  file_path: models\example\my_second_dbt_model.sql
  id: my_test_project_my_second_dbt_model
  materialized: view
  name: my_second_dbt_model
  project: my_test_project
  schema: my_test
  sql: '-- Use the `ref` function to select from other models


    select *

    from {{ ref(''my_first_dbt_model'') }}

    where id = 1'
- ai_description: The `stg_campaigns` dbt model in the `my_test_project` project serves
    as a staging layer for campaign data. It selects and transforms data from the
    `public.raw_campaigns` table, renaming and casting columns as needed. This model
    produces a clean, standardized view of campaign information, including `campaign_id`,
    `campaign_name`, `start_date`, `end_date`, and `budget`. As a staging model, it
    prepares the raw data for further transformations and analysis in subsequent dbt
    models within the data pipeline. There is no business logic or transformations
    applied in this model.
  columns:
  - ai_description: This column stores the unique integer identifier for each marketing
      campaign.  In the `stg_campaigns` staging model, `campaign_id` is directly sourced
      from the raw campaign data, providing a consistent and readily available key
      for identifying individual campaigns within the data pipeline. No business logic
      is applied to this column in this model.
    description: This column stores the unique integer identifier for each marketing
      campaign.  In the `stg_campaigns` staging model, `campaign_id` is directly sourced
      from the raw campaign data, providing a consistent and readily available key
      for identifying individual campaigns within the data pipeline. No business logic
      is applied to this column in this model.
    name: campaign_id
    type: integer
    user_edited: false
  - ai_description: This column stores the name of the marketing campaign.  Within
      the `stg_campaigns` staging model, `campaign_name` provides a human-readable
      identifier for each campaign, sourced directly from the raw data.  No transformations
      or calculations are applied to this field in this model.
    description: This column stores the name of the marketing campaign.  Within the
      `stg_campaigns` staging model, `campaign_name` provides a human-readable identifier
      for each campaign, sourced directly from the raw data.  No transformations or
      calculations are applied to this field in this model.
    name: campaign_name
    type: character varying(100)
    user_edited: false
  - ai_description: The `start_date` column in the `stg_campaigns` table stores the
      date when a marketing campaign is scheduled to begin. This column, of data type
      `date`, is directly sourced from the `public.raw_campaigns` table and provides
      the campaign's launch date within the staging layer. No transformations or calculations
      are applied to this date in this model.
    description: The `start_date` column in the `stg_campaigns` table stores the date
      when a marketing campaign is scheduled to begin. This column, of data type `date`,
      is directly sourced from the `public.raw_campaigns` table and provides the campaign's
      launch date within the staging layer. No transformations or calculations are
      applied to this date in this model.
    name: start_date
    type: date
    user_edited: false
  - ai_description: The `end_date` column stores the date the campaign concluded.
      In the `stg_campaigns` staging model, this column represents the campaign's
      end date as extracted directly from the raw campaign data.  No calculations
      or transformations are applied to this date within this model.
    description: The `end_date` column stores the date the campaign concluded. In
      the `stg_campaigns` staging model, this column represents the campaign's end
      date as extracted directly from the raw campaign data.  No calculations or transformations
      are applied to this date within this model.
    name: end_date
    type: date
    user_edited: false
  - ai_description: The `budget` column stores the numeric value representing the
      allocated budget for each marketing campaign.  In the `stg_campaigns` model,
      this column is directly sourced from the `public.raw_campaigns` table and serves
      as a standardized, readily available budget figure for downstream analysis.
      No transformations or calculations are applied to the budget value within this
      staging model.
    description: The `budget` column stores the numeric value representing the allocated
      budget for each marketing campaign.  In the `stg_campaigns` model, this column
      is directly sourced from the `public.raw_campaigns` table and serves as a standardized,
      readily available budget figure for downstream analysis. No transformations
      or calculations are applied to the budget value within this staging model.
    name: budget
    type: numeric
    user_edited: false
  description: The `stg_campaigns` dbt model in the `my_test_project` project serves
    as a staging layer for campaign data. It selects and transforms data from the
    `public.raw_campaigns` table, renaming and casting columns as needed. This model
    produces a clean, standardized view of campaign information, including `campaign_id`,
    `campaign_name`, `start_date`, `end_date`, and `budget`. As a staging model, it
    prepares the raw data for further transformations and analysis in subsequent dbt
    models within the data pipeline. There is no business logic or transformations
    applied in this model.
  file_path: models\example\stg_campaigns.sql
  id: my_test_project_stg_campaigns
  materialized: view
  name: stg_campaigns
  project: my_test_project
  schema: my_test
  sql: "-- models/example/stg_campaigns.sql\r\nSELECT\r\n    campaign_id,\r\n    campaign_name,\r\
    \n    start_date,\r\n    end_date,\r\n    budget\r\nFROM public.raw_campaigns"
  user_edited: false
- columns:
  - ai_description: This column, `order_id`, stores the unique identifier for each
      order, sourced from the raw orders data.  In the `stg_orders` staging model,
      this integer value serves as the primary key, enabling the identification and
      tracking of individual orders as they are processed.  It's a fundamental element
      for joining this staging table with other related tables.
    description: This column, `order_id`, stores the unique identifier for each order,
      sourced from the raw orders data.  In the `stg_orders` staging model, this integer
      value serves as the primary key, enabling the identification and tracking of
      individual orders as they are processed.  It's a fundamental element for joining
      this staging table with other related tables.
    name: order_id
    type: integer
    user_edited: false
  - ai_description: This column stores the unique identifier for the customer associated
      with each order. In the `stg_orders` staging model, `customer_id` is used to
      link orders to specific customers, enabling analysis of customer purchasing
      behavior. This integer value directly reflects the customer's identification
      number from the raw orders data.
    description: This column stores the unique identifier for the customer associated
      with each order. In the `stg_orders` staging model, `customer_id` is used to
      link orders to specific customers, enabling analysis of customer purchasing
      behavior. This integer value directly reflects the customer's identification
      number from the raw orders data.
    name: customer_id
    type: integer
    user_edited: false
  - ai_description: This column, `order_date`, stores the date when an order was placed.
      Within the `stg_orders` staging model, this date is extracted directly from
      the raw orders data, providing a foundational element for analyzing order timelines
      and trends. This date is crucial for any time-based analysis of order activity.
    description: This column, `order_date`, stores the date when an order was placed.
      Within the `stg_orders` staging model, this date is extracted directly from
      the raw orders data, providing a foundational element for analyzing order timelines
      and trends. This date is crucial for any time-based analysis of order activity.
    name: order_date
    type: date
    user_edited: false
  - ai_description: The `status` column in the `stg_orders` staging model stores the
      order status, such as "shipped" or "pending", extracted from the raw orders
      data. This column is crucial for understanding the current state of each order
      within the staging layer. It provides a key attribute for filtering and analyzing
      order lifecycle stages.
    description: The `status` column in the `stg_orders` staging model stores the
      order status, such as "shipped" or "pending", extracted from the raw orders
      data. This column is crucial for understanding the current state of each order
      within the staging layer. It provides a key attribute for filtering and analyzing
      order lifecycle stages.
    name: status
    type: character varying(20)
    user_edited: false
  description: Staging model for raw orders data
  file_path: models\example\stg_orders.sql
  id: my_test_project_stg_orders
  materialized: view
  name: stg_orders
  project: my_test_project
  schema: my_test
  sql: "-- models/stg_orders.sql\r\nSELECT\r\n    order_id,\r\n    customer_id,\r\n\
    \    order_date,\r\n    status\r\nFROM public.raw_orders"
- description: Direct reference table raw_orders in schema public
  id: my_test_project_raw_orders
  is_source: true
  materialized: source
  name: raw_orders
  project: my_test_project
  schema: public
- description: Direct reference table raw_campaigns in schema public
  id: my_test_project_raw_campaigns
  is_source: true
  materialized: source
  name: raw_campaigns
  project: my_test_project
  schema: public
projects:
- description: analytics_project dbt project
  id: analytics_project
  name: analytics_project
  path: C:/Users/Lenovo/OneDrive/Desktop/postgre_dbt/dbt/pk\analytics_project
- description: ecommerce_project dbt project
  id: ecommerce_project
  name: ecommerce_project
  path: C:/Users/Lenovo/OneDrive/Desktop/postgre_dbt/dbt/pk\ecommerce_project
- description: my_test_project dbt project
  id: my_test_project
  name: my_test_project
  path: C:/Users/Lenovo/OneDrive/Desktop/postgre_dbt/dbt/pk\my_test_project
