{
  "projects": [
    {
      "id": "claims_processing",
      "name": "claims_processing",
      "description": "claims_processing dbt project"
    },
    {
      "id": "customer_risk",
      "name": "customer_risk",
      "description": "customer_risk dbt project"
    },
    {
      "id": "policy_management",
      "name": "policy_management",
      "description": "policy_management dbt project"
    }
  ],
  "models": [
    {
      "id": "c1",
      "name": "stg_claims",
      "project": "claims_processing",
      "description": "Here's a concise description of the `stg_claims` dbt model:\n\nThis dbt model, `stg_claims`, in the `claims_processing` project, serves as a staging layer for claim data. It processes raw claim information, likely from a source system, and prepares it for further transformation. The model produces a cleaned and standardized dataset of claims, potentially including data type conversions and basic data quality checks. This model plays a crucial role in the data pipeline by providing a consistent and reliable foundation for downstream analyses and reporting, ensuring data integrity and facilitating more complex transformations.",
      "columns": [],
      "sql": "",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_claims.sql",
      "database": "insurance_data",
      "ai_description": "Here's a concise description of the `stg_claims` dbt model:\n\nThis dbt model, `stg_claims`, in the `claims_processing` project, serves as a staging layer for claim data. It processes raw claim information, likely from a source system, and prepares it for further transformation. The model produces a cleaned and standardized dataset of claims, potentially including data type conversions and basic data quality checks. This model plays a crucial role in the data pipeline by providing a consistent and reliable foundation for downstream analyses and reporting, ensuring data integrity and facilitating more complex transformations.",
      "tags": []
    },
    {
      "id": "c2",
      "name": "stg_adjusters",
      "project": "claims_processing",
      "description": "The `stg_adjusters` dbt model within the `claims_processing` project serves to stage and standardize adjuster data. It transforms raw adjuster information, likely from a source system, into a consistent format suitable for downstream analysis. This model selects and renames relevant columns, potentially handling data type conversions and basic cleaning operations. As a staging model, it acts as an intermediary, preparing the adjuster data for more complex transformations and integration with other claims-related entities within the data pipeline.",
      "columns": [],
      "sql": "",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_adjusters.sql",
      "database": "insurance_data",
      "ai_description": "The `stg_adjusters` dbt model within the `claims_processing` project serves to stage and standardize adjuster data. It transforms raw adjuster information, likely from a source system, into a consistent format suitable for downstream analysis. This model selects and renames relevant columns, potentially handling data type conversions and basic cleaning operations. As a staging model, it acts as an intermediary, preparing the adjuster data for more complex transformations and integration with other claims-related entities within the data pipeline.",
      "tags": []
    },
    {
      "id": "c3",
      "name": "int_claims_enriched",
      "project": "claims_processing",
      "description": "Here's a description of the `int_claims_enriched` dbt model:\n\nThis dbt model, `int_claims_enriched`, within the `claims_processing` project, serves to enrich raw claims data with additional context. It processes data from the `stg_claims` model, incorporating information like provider details and policy information. The model produces a consolidated and enhanced claims dataset, making it ready for downstream analysis and reporting. Key transformations include joining claims data with relevant dimensions and potentially applying business rules to derive new attributes, such as claim status or risk scores.",
      "columns": [],
      "sql": "",
      "materialized": "view",
      "schema": "intermediate",
      "file_path": "models/intermediate/int_claims_enriched.sql",
      "database": "insurance_data",
      "ai_description": "Here's a description of the `int_claims_enriched` dbt model:\n\nThis dbt model, `int_claims_enriched`, within the `claims_processing` project, serves to enrich raw claims data with additional context. It processes data from the `stg_claims` model, incorporating information like provider details and policy information. The model produces a consolidated and enhanced claims dataset, making it ready for downstream analysis and reporting. Key transformations include joining claims data with relevant dimensions and potentially applying business rules to derive new attributes, such as claim status or risk scores.",
      "tags": []
    },
    {
      "id": "c4",
      "name": "mart_claims_analysis",
      "project": "claims_processing",
      "description": "The `mart_claims_analysis` dbt model within the `claims_processing` project serves to provide a consolidated analysis of claims data. It aggregates and transforms raw claims data, likely from various source tables, to create a user-friendly dataset for business intelligence. This model produces a mart containing key claim metrics such as claim amounts, statuses, and processing times, potentially enriched with customer and policy information. Key transformations likely include calculating claim durations, summarizing claim counts by status, and joining data from different source tables to facilitate comprehensive claims analysis. This model plays a crucial role in the data pipeline by providing a curated and optimized dataset for reporting and analytics related to claims performance.",
      "columns": [],
      "sql": "",
      "materialized": "table",
      "schema": "mart",
      "file_path": "models/mart/mart_claims_analysis.sql",
      "database": "insurance_data",
      "ai_description": "The `mart_claims_analysis` dbt model within the `claims_processing` project serves to provide a consolidated analysis of claims data. It aggregates and transforms raw claims data, likely from various source tables, to create a user-friendly dataset for business intelligence. This model produces a mart containing key claim metrics such as claim amounts, statuses, and processing times, potentially enriched with customer and policy information. Key transformations likely include calculating claim durations, summarizing claim counts by status, and joining data from different source tables to facilitate comprehensive claims analysis. This model plays a crucial role in the data pipeline by providing a curated and optimized dataset for reporting and analytics related to claims performance.",
      "tags": []
    },
    {
      "id": "c5",
      "name": "stg_customers",
      "project": "claims_processing",
      "description": "The `stg_customers` dbt model in the `claims_processing` project serves as a staging layer for customer data. It selects all columns from the `customers` source model, which is likely a raw data source. This model transforms the raw customer data by casting date fields to the DATE data type, creating derived fields like `customer_name`, `age`, and `months_as_customer`, and adding metadata fields such as `dbt_updated_at` and `_dbt_source_project`. This model prepares the customer data for further transformations and analysis downstream in the data pipeline.",
      "columns": [
        {
          "name": "*",
          "type": "unknown",
          "description": "Here are descriptions for each of the columns in the `stg_customers` model, based on the provided information:\n\n*   **customer_id:** Contains the unique identifier for each customer, directly sourced from the `customers` table. This column serves as the primary key for identifying individual customers within the staging model.\n*   **first_name:** Stores the customer's first name, directly sourced from the `customers` table. This column is used to identify and categorize customers.\n*   **last_name:** Stores the customer's last name, directly sourced from the `customers` table. This column is used to identify and categorize customers.\n*   **email:** Stores the customer's email address, directly sourced from the `customers` table. This column is used for customer communication and identification.\n*   **phone:** Stores the customer's phone number, directly sourced from the `customers` table. This column is used for customer communication.\n*   **address:** Stores the customer's street address, directly sourced from the `customers` table. This column is used for customer location and identification.\n*   **city:** Stores the customer's city, directly sourced from the `customers` table. This column is used for customer location and identification.\n*   **state:** Stores the customer's state, directly sourced from the `customers` table. This column is used for customer location and identification.\n*   **",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "Here are descriptions for each of the columns in the `stg_customers` model, based on the provided information:\n\n*   **customer_id:** Contains the unique identifier for each customer, directly sourced from the `customers` table. This column serves as the primary key for identifying individual customers within the staging model.\n*   **first_name:** Stores the customer's first name, directly sourced from the `customers` table. This column is used to identify and categorize customers.\n*   **last_name:** Stores the customer's last name, directly sourced from the `customers` table. This column is used to identify and categorize customers.\n*   **email:** Stores the customer's email address, directly sourced from the `customers` table. This column is used for customer communication and identification.\n*   **phone:** Stores the customer's phone number, directly sourced from the `customers` table. This column is used for customer communication.\n*   **address:** Stores the customer's street address, directly sourced from the `customers` table. This column is used for customer location and identification.\n*   **city:** Stores the customer's city, directly sourced from the `customers` table. This column is used for customer location and identification.\n*   **state:** Stores the customer's state, directly sourced from the `customers` table. This column is used for customer location and identification.\n*   **"
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'customers', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('customers') }}\n)\n\nSELECT\n    customer_id,\n    first_name,\n    last_name,\n    email,\n    phone,\n    address,\n    city,\n    state,\n    zip_code,\n    CAST(date_of_birth AS DATE) AS date_of_birth,\n    gender,\n    CAST(joining_date AS DATE) AS joining_date,\n    -- Derived fields\n    CONCAT(first_name, ' ', last_name) AS customer_name,\n    DATEDIFF('year', date_of_birth, CURRENT_DATE()) AS age,\n    DATEDIFF('month', joining_date, CURRENT_DATE()) AS months_as_customer,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'customer_risk' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_customers.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "customers",
        "daily"
      ],
      "ai_description": "The `stg_customers` dbt model in the `claims_processing` project serves as a staging layer for customer data. It selects all columns from the `customers` source model, which is likely a raw data source. This model transforms the raw customer data by casting date fields to the DATE data type, creating derived fields like `customer_name`, `age`, and `months_as_customer`, and adding metadata fields such as `dbt_updated_at` and `_dbt_source_project`. This model prepares the customer data for further transformations and analysis downstream in the data pipeline."
    },
    {
      "id": "c6",
      "name": "stg_risk_factors",
      "project": "claims_processing",
      "description": "The `stg_risk_factors` dbt model in the `claims_processing` project stages risk factor data. It selects all columns from the `risk_factors` source model, casts the `assessment_date` and `last_assessment` columns to the DATE data type. This model calculates `days_since_last_assessment` and derives a `credit_rating` based on the `credit_score`. Finally, it adds metadata fields like `dbt_updated_at` and `_dbt_source_project`. This staging model prepares the risk factor data for downstream analysis and reporting, providing a standardized and enriched view of customer risk profiles.",
      "columns": [
        {
          "name": "*",
          "type": "unknown",
          "description": "Here are a few options for the column description, depending on which column is being described:\n\n**Example 1: Describing `risk_id`**\n\nThis column contains a unique identifier for each risk factor record.  It serves as the primary key for the risk factor data within this staging model. This ID is likely inherited from the source data and is crucial for joining and tracking risk information.\n\n**Example 2: Describing `assessment_date`**\n\nThis column stores the date when the risk assessment was performed, cast as a DATE data type.  It's used to understand the timing of risk evaluations and is essential for calculating time-based metrics like `days_since_last_assessment`. This date is critical for analyzing risk trends over time.\n\n**Example 3: Describing `credit_score`**\n\nThis column holds the customer's credit score, a numerical representation of their creditworthiness. It is used to derive the `credit_rating` and provides a key input for understanding the customer's financial risk profile.  Higher scores indicate lower risk.\n\n**Example 4: Describing `days_since_last_assessment`**\n\nThis column calculates the number of days since the last risk assessment was performed. It is derived by subtracting `last_assessment` from `assessment_date`. This metric helps to understand how recently the customer's risk profile has been evaluated.\n\n**Example 5: Describing `credit",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "Here are a few options for the column description, depending on which column is being described:\n\n**Example 1: Describing `risk_id`**\n\nThis column contains a unique identifier for each risk factor record.  It serves as the primary key for the risk factor data within this staging model. This ID is likely inherited from the source data and is crucial for joining and tracking risk information.\n\n**Example 2: Describing `assessment_date`**\n\nThis column stores the date when the risk assessment was performed, cast as a DATE data type.  It's used to understand the timing of risk evaluations and is essential for calculating time-based metrics like `days_since_last_assessment`. This date is critical for analyzing risk trends over time.\n\n**Example 3: Describing `credit_score`**\n\nThis column holds the customer's credit score, a numerical representation of their creditworthiness. It is used to derive the `credit_rating` and provides a key input for understanding the customer's financial risk profile.  Higher scores indicate lower risk.\n\n**Example 4: Describing `days_since_last_assessment`**\n\nThis column calculates the number of days since the last risk assessment was performed. It is derived by subtracting `last_assessment` from `assessment_date`. This metric helps to understand how recently the customer's risk profile has been evaluated.\n\n**Example 5: Describing `credit"
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'risk', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('risk_factors') }}\n)\n\nSELECT\n    risk_id,\n    customer_id,\n    CAST(assessment_date AS DATE) AS assessment_date,\n    credit_score,\n    claim_frequency,\n    risk_score,\n    previous_claims_count,\n    risk_category,\n    CAST(last_assessment AS DATE) AS last_assessment,\n    assessment_source,\n    -- Derived fields\n    DATEDIFF('day', last_assessment, assessment_date) AS days_since_last_assessment,\n    CASE\n        WHEN credit_score >= 750 THEN 'EXCELLENT'\n        WHEN credit_score >= 700 THEN 'GOOD'\n        WHEN credit_score >= 650 THEN 'FAIR'\n        WHEN credit_score >= 600 THEN 'POOR'\n        ELSE 'VERY_POOR'\n    END AS credit_rating,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'customer_risk' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_risk_factors.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "risk",
        "daily"
      ],
      "ai_description": "The `stg_risk_factors` dbt model in the `claims_processing` project stages risk factor data. It selects all columns from the `risk_factors` source model, casts the `assessment_date` and `last_assessment` columns to the DATE data type. This model calculates `days_since_last_assessment` and derives a `credit_rating` based on the `credit_score`. Finally, it adds metadata fields like `dbt_updated_at` and `_dbt_source_project`. This staging model prepares the risk factor data for downstream analysis and reporting, providing a standardized and enriched view of customer risk profiles."
    },
    {
      "id": "c7",
      "name": "int_customer_risk_enriched",
      "project": "claims_processing",
      "description": "This dbt model, `int_customer_risk_enriched`, enriches customer data with risk assessments. It joins customer information from `stg_customers` with risk factors from `stg_risk_factors`. The model produces a comprehensive view of each customer, including demographic details, risk scores, and derived customer segments. Key transformations include adjusting risk scores based on customer age and segmenting customers based on tenure and risk category, providing valuable insights for risk management and customer relationship strategies. This intermediate model serves as a foundation for downstream analyses and reporting within the claims processing data pipeline.",
      "columns": [
        {
          "name": "*",
          "type": "unknown",
          "description": "Here are a few options, depending on the column name (which is missing):\n\n**Option 1: If the column name is `age_adjusted_risk_score`**\n\nThis column stores the customer's risk score adjusted for age. The risk score is increased by 20% if the customer's age is under 25 or over 70, reflecting a potential higher risk profile for these age groups.\n\n**Option 2: If the column name is related to customer age (e.g., `customer_age`)**\n\nThis column contains the customer's age, likely sourced from the `stg_customers` table.  It's used in the model to adjust the risk score, with younger and older customers having their risk scores potentially increased.\n\n**Option 3: If the column name is related to the risk score (e.g., `risk_score`)**\n\nThis column stores the customer's base risk score, likely sourced from the `stg_risk_factors` table.  This score is then adjusted based on the customer's age within this model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "Here are a few options, depending on the column name (which is missing):\n\n**Option 1: If the column name is `age_adjusted_risk_score`**\n\nThis column stores the customer's risk score adjusted for age. The risk score is increased by 20% if the customer's age is under 25 or over 70, reflecting a potential higher risk profile for these age groups.\n\n**Option 2: If the column name is related to customer age (e.g., `customer_age`)**\n\nThis column contains the customer's age, likely sourced from the `stg_customers` table.  It's used in the model to adjust the risk score, with younger and older customers having their risk scores potentially increased.\n\n**Option 3: If the column name is related to the risk score (e.g., `risk_score`)**\n\nThis column stores the customer's base risk score, likely sourced from the `stg_risk_factors` table.  This score is then adjusted based on the customer's age within this model."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['intermediate', 'customers', 'risk', 'daily']\n    )\n}}\n\nWITH customers AS (\n    SELECT * FROM {{ ref('stg_customers') }}\n),\n\nrisk_factors AS (\n    SELECT * FROM {{ ref('stg_risk_factors') }}\n)\n\nSELECT\n    c.customer_id,\n    c.customer_name,\n    c.email,\n    c.phone,\n    c.address,\n    c.city,\n    c.state,\n    c.zip_code,\n    c.date_of_birth,\n    c.gender,\n    c.joining_date,\n    c.age,\n    c.months_as_customer,\n    -- Risk information\n    r.risk_id,\n    r.assessment_date,\n    r.credit_score,\n    r.credit_rating,\n    r.claim_frequency,\n    r.risk_score,\n    r.previous_claims_count,\n    r.risk_category,\n    r.days_since_last_assessment,\n    -- Risk factor adjustments\n    CASE\n        WHEN c.age < 25 OR c.age > 70 THEN r.risk_score * 1.2\n        ELSE r.risk_score\n    END AS age_adjusted_risk_score,\n    -- Customer segments\n    CASE\n        WHEN c.months_as_customer >= 36 AND r.risk_category = 'LOW_RISK' THEN 'PREMIUM'\n        WHEN c.months_as_customer >= 24 AND r.risk_category IN ('LOW_RISK', 'MEDIUM_RISK') THEN 'PREFERRED'\n        WHEN c.months_as_customer >= 12 THEN 'STANDARD'\n        ELSE 'NEW'\n    END AS customer_segment,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    c._dbt_source_project\nFROM customers c\nLEFT JOIN risk_factors r ON c.customer_id = r.customer_id",
      "materialized": "view",
      "schema": "intermediate",
      "file_path": "models/intermediate/int_customer_risk_enriched.sql",
      "database": "insurance_data",
      "tags": [
        "intermediate",
        "customers",
        "risk",
        "daily"
      ],
      "ai_description": "This dbt model, `int_customer_risk_enriched`, enriches customer data with risk assessments. It joins customer information from `stg_customers` with risk factors from `stg_risk_factors`. The model produces a comprehensive view of each customer, including demographic details, risk scores, and derived customer segments. Key transformations include adjusting risk scores based on customer age and segmenting customers based on tenure and risk category, providing valuable insights for risk management and customer relationship strategies. This intermediate model serves as a foundation for downstream analyses and reporting within the claims processing data pipeline."
    },
    {
      "id": "c8",
      "name": "mart_customer_risk_profile",
      "project": "claims_processing",
      "description": "The `mart_customer_risk_profile` dbt model, within the `claims_processing` project, materializes as a table and is tagged for daily updates. Its primary purpose is to create a customer-level risk profile by enriching customer data with claims information. This model joins data from the `int_customer_risk_enriched` model with aggregated claims data, sourced from the `mart_claims_analysis` model in the `claims_processing` project, if available. Key transformations include calculating aggregate claim metrics like total claims, amounts, and settlement times, along with counts of settled and denied claims, providing a comprehensive view of customer risk.",
      "columns": [
        {
          "name": "*",
          "type": "unknown",
          "description": "Okay, here are a few options for the column description, based on the information provided. Since the column name is \"*\", I'll assume it's a calculated field.  I'll provide a few options, as the exact meaning is unclear without the column name.\n\n**Option 1 (Assuming a Risk Score Calculation):**\n\nThis column likely represents a customer's adjusted risk score. It's calculated by potentially adjusting the `age_adjusted_risk_score` based on the `total_claims` count, providing a more granular risk assessment.  The adjustment suggests that a higher claim volume increases the risk score.\n\n**Option 2 (Assuming a Rate Calculation):**\n\nThis column calculates the `claim_denial_rate` for each customer. It represents the percentage of denied claims out of the total claims, providing insight into the customer's claim denial history. This metric is crucial for understanding a customer's claim behavior and potential risk.\n\n**Option 3 (Assuming a simple count):**\n\nThis column likely represents the total number of claims for a customer. This count is used to calculate other metrics, such as the `claim_denial_rate`, and is a fundamental indicator of customer activity and potential risk.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "Okay, here are a few options for the column description, based on the information provided. Since the column name is \"*\", I'll assume it's a calculated field.  I'll provide a few options, as the exact meaning is unclear without the column name.\n\n**Option 1 (Assuming a Risk Score Calculation):**\n\nThis column likely represents a customer's adjusted risk score. It's calculated by potentially adjusting the `age_adjusted_risk_score` based on the `total_claims` count, providing a more granular risk assessment.  The adjustment suggests that a higher claim volume increases the risk score.\n\n**Option 2 (Assuming a Rate Calculation):**\n\nThis column calculates the `claim_denial_rate` for each customer. It represents the percentage of denied claims out of the total claims, providing insight into the customer's claim denial history. This metric is crucial for understanding a customer's claim behavior and potential risk.\n\n**Option 3 (Assuming a simple count):**\n\nThis column likely represents the total number of claims for a customer. This count is used to calculate other metrics, such as the `claim_denial_rate`, and is a fundamental indicator of customer activity and potential risk."
        }
      ],
      "sql": "{{\n    config(\n        materialized='table',\n        tags=['mart', 'customers', 'risk', 'daily']\n    )\n}}\n\nWITH customer_risk_enriched AS (\n    SELECT * FROM {{ ref('int_customer_risk_enriched') }}\n),\n\n-- Reference to claims data from claims processing project\ncustomer_claims AS (\n    {% if execute %}\n        {% if adapter.get_relation(this.database, 'mart', 'mart_claims_analysis') %}\n            SELECT \n                customer_id,\n                COUNT(*) AS total_claims,\n                SUM(claim_amount) AS total_claim_amount,\n                SUM(settlement_amount_clean) AS total_settlement_amount,\n                AVG(days_to_settle) AS avg_days_to_settle,\n                SUM(CASE WHEN claim_status = 'SETTLED' THEN 1 ELSE 0 END) AS settled_claims_count,\n                SUM(CASE WHEN claim_status = 'DENIED' THEN 1 ELSE 0 END) AS denied_claims_count,\n                MAX(claim_date) AS most_recent_claim_date,\n                'claims_processing' AS _dbt_source_project\n            FROM {{ ref('claims_processing', 'mart_claims_analysis') }}\n            GROUP BY customer_id\n        {% else %}\n            SELECT\n                'CU0000' AS customer_id,\n                0 AS total_claims,\n                0 AS total_claim_amount,\n                0 AS total_settlement_amount,\n                0 AS avg_days_to_settle,\n                0 AS settled_claims_count,\n                0 AS denied_claims_count,\n                CAST('2000-01-01' AS DATE) AS most_recent_claim_date,\n                'claims_processing' AS _dbt_source_project\n            WHERE 1=0\n        {% endif %}\n    {% else %}\n        SELECT\n            'CU0000' AS customer_id,\n            0 AS total_claims,\n            0 AS total_claim_amount,\n            0 AS total_settlement_amount,\n            0 AS avg_days_to_settle,\n            0 AS settled_claims_count,\n            0 AS denied_claims_count,\n            CAST('2000-01-01' AS DATE) AS most_recent_claim_date,\n            'claims_processing' AS _dbt_source_project\n        WHERE 1=0\n    {% endif %}\n)\n\nSELECT\n    cr.customer_id,\n    cr.customer_name,\n    cr.email,\n    cr.city,\n    cr.state,\n    cr.age,\n    cr.months_as_customer,\n    cr.credit_score,\n    cr.credit_rating,\n    cr.claim_frequency,\n    cr.risk_score,\n    cr.age_adjusted_risk_score,\n    cr.previous_claims_count,\n    cr.risk_category,\n    cr.customer_segment,\n    -- Claims information from claims processing\n    cc.total_claims,\n    cc.total_claim_amount,\n    cc.total_settlement_amount,\n    cc.avg_days_to_settle,\n    cc.settled_claims_count,\n    cc.denied_claims_count,\n    cc.most_recent_claim_date,\n    -- Risk scoring with claim data\n    CASE\n        WHEN cc.total_claims > 0 THEN\n            cr.age_adjusted_risk_score * (1 + (cc.total_claims / 10))\n        ELSE\n            cr.age_adjusted_risk_score\n    END AS claims_adjusted_risk_score,\n    -- Denial ratio\n    CASE\n        WHEN cc.total_claims > 0 THEN \n            ROUND(cc.denied_claims_count / cc.total_claims * 100, 2)\n        ELSE 0\n    END AS claim_denial_rate,\n    -- Cross project attribution\n    cr._dbt_source_project AS risk_source,\n    cc._dbt_source_project AS claims_source,\n    -- Metadata\n    CURRENT_TIMESTAMP AS dbt_updated_at\nFROM customer_risk_enriched cr\nLEFT JOIN customer_claims cc ON cr.customer_id = cc.customer_id",
      "materialized": "table",
      "schema": "mart",
      "file_path": "models/mart/mart_customer_risk_profile.sql",
      "database": "insurance_data",
      "tags": [
        "mart",
        "customers",
        "risk",
        "daily"
      ],
      "ai_description": "The `mart_customer_risk_profile` dbt model, within the `claims_processing` project, materializes as a table and is tagged for daily updates. Its primary purpose is to create a customer-level risk profile by enriching customer data with claims information. This model joins data from the `int_customer_risk_enriched` model with aggregated claims data, sourced from the `mart_claims_analysis` model in the `claims_processing` project, if available. Key transformations include calculating aggregate claim metrics like total claims, amounts, and settlement times, along with counts of settled and denied claims, providing a comprehensive view of customer risk."
    },
    {
      "id": "c9",
      "name": "stg_policies",
      "project": "claims_processing",
      "description": "The `stg_policies` dbt model in the `claims_processing` project serves as a staging layer for policy data. It transforms data from the `policies` source, applying type conversions and deriving new fields. This model produces a standardized view of policy information, including calculated fields like `policy_term_days`, `effective_status`, and `coverage_premium_ratio`, along with metadata. It plays a crucial role in the data pipeline by preparing the raw policy data for downstream analysis and reporting.",
      "columns": [
        {
          "name": "*",
          "type": "unknown",
          "description": "Okay, here are a few options for the column description, given the context:\n\n**Option 1 (Most General):**\n\n> This column contains all columns from the source `policies` table. It serves as the foundation for the `stg_policies` model, providing the raw policy data that is then transformed and enriched with derived fields.\n\n**Option 2 (Slightly More Specific):**\n\n> This column represents all columns from the source `policies` table, which includes policy details such as `policy_id`, `customer_id`, `policy_type`, and other raw data. This column is the starting point for the staging model, providing the base data for subsequent transformations and calculations.\n\n**Option 3 (Focusing on the \"unknown\" data type):**\n\n> This column contains all columns from the source `policies` table, with an unknown data type. It is the raw data used to build the `stg_policies` model, which is then transformed and enriched.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "Okay, here are a few options for the column description, given the context:\n\n**Option 1 (Most General):**\n\n> This column contains all columns from the source `policies` table. It serves as the foundation for the `stg_policies` model, providing the raw policy data that is then transformed and enriched with derived fields.\n\n**Option 2 (Slightly More Specific):**\n\n> This column represents all columns from the source `policies` table, which includes policy details such as `policy_id`, `customer_id`, `policy_type`, and other raw data. This column is the starting point for the staging model, providing the base data for subsequent transformations and calculations.\n\n**Option 3 (Focusing on the \"unknown\" data type):**\n\n> This column contains all columns from the source `policies` table, with an unknown data type. It is the raw data used to build the `stg_policies` model, which is then transformed and enriched."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'policies', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('policies') }}\n)\n\nSELECT\n    policy_id,\n    customer_id,\n    policy_type,\n    CAST(start_date AS DATE) AS start_date,\n    CAST(end_date AS DATE) AS end_date,\n    premium_amount,\n    coverage_amount,\n    status,\n    agent_id,\n    policy_number,\n    -- Derived fields\n    DATEDIFF('day', start_date, end_date) AS policy_term_days,\n    CASE\n        WHEN CURRENT_DATE() > end_date THEN 'EXPIRED'\n        WHEN CURRENT_DATE() BETWEEN start_date AND end_date THEN status\n        WHEN CURRENT_DATE() < start_date THEN 'FUTURE'\n        ELSE 'UNKNOWN'\n    END AS effective_status,\n    ROUND(coverage_amount / premium_amount, 2) AS coverage_premium_ratio,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'policy_management' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_policies.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "policies",
        "daily"
      ],
      "ai_description": "The `stg_policies` dbt model in the `claims_processing` project serves as a staging layer for policy data. It transforms data from the `policies` source, applying type conversions and deriving new fields. This model produces a standardized view of policy information, including calculated fields like `policy_term_days`, `effective_status`, and `coverage_premium_ratio`, along with metadata. It plays a crucial role in the data pipeline by preparing the raw policy data for downstream analysis and reporting."
    },
    {
      "id": "c10",
      "name": "stg_agents",
      "project": "claims_processing",
      "description": "The `stg_agents` dbt model in the `claims_processing` project stages agent data from the `agents` source. This model selects all columns from the source and adds derived fields for experience level and metadata. It transforms the `years_experience` column into an `experience_level` category (SENIOR, MID, JUNIOR) and adds `dbt_updated_at` and `_dbt_source_project` columns. As a staging model, it prepares the raw agent data for downstream analysis and reporting within the claims processing data pipeline.",
      "columns": [
        {
          "name": "*",
          "type": "unknown",
          "description": "Since the column name is \"*\", and the query selects all columns from the source table, the description is:\n\nThis column contains all data from the source `agents` table.  It's included to bring in all raw agent attributes, such as `agent_id`, `agent_name`, and `agent_email`, for staging and subsequent transformation within the `claims_processing` data pipeline. The specific data type for each column is inherited from the source table.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "Since the column name is \"*\", and the query selects all columns from the source table, the description is:\n\nThis column contains all data from the source `agents` table.  It's included to bring in all raw agent attributes, such as `agent_id`, `agent_name`, and `agent_email`, for staging and subsequent transformation within the `claims_processing` data pipeline. The specific data type for each column is inherited from the source table."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'agents', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('agents') }}\n)\n\nSELECT\n    agent_id,\n    agent_name,\n    agent_email,\n    office_location,\n    years_experience,\n    specialization,\n    active,\n    -- Derived fields\n    CASE \n        WHEN years_experience >= 10 THEN 'SENIOR'\n        WHEN years_experience >= 5 THEN 'MID'\n        ELSE 'JUNIOR'\n    END AS experience_level,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'policy_management' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_agents.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "agents",
        "daily"
      ],
      "ai_description": "The `stg_agents` dbt model in the `claims_processing` project stages agent data from the `agents` source. This model selects all columns from the source and adds derived fields for experience level and metadata. It transforms the `years_experience` column into an `experience_level` category (SENIOR, MID, JUNIOR) and adds `dbt_updated_at` and `_dbt_source_project` columns. As a staging model, it prepares the raw agent data for downstream analysis and reporting within the claims processing data pipeline."
    },
    {
      "id": "c11",
      "name": "int_policies_enriched",
      "project": "claims_processing",
      "description": "The `int_policies_enriched` dbt model in the `claims_processing` project enriches policy data by joining it with agent information. This intermediate model selects and transforms data from the `stg_policies` and `stg_agents` staging models. It produces a view containing policy details, agent details, and calculated fields like `specialization_alignment` which indicates if the agent's specialization matches the policy type. This model serves as a crucial step in the data pipeline, providing a consolidated and enriched view of policies for downstream analysis and reporting.",
      "columns": [
        {
          "name": "*",
          "type": "unknown",
          "description": "Okay, here are a few options for the column description, based on the provided context, assuming the column name is a wildcard (*):\n\n**Option 1 (Most General - if the wildcard represents all columns):**\n\n> This column contains data from the `stg_policies` and `stg_agents` staging models, representing a specific attribute of a policy or agent.  The data is included to provide a comprehensive view of policy and agent details within the `int_policies_enriched` model, supporting analysis and reporting on policy characteristics and agent relationships.\n\n**Option 2 (If the wildcard represents a specific column, and we can infer its purpose):**\n\n> This column likely contains policy details or agent information, depending on the source table.  The data is included to provide a comprehensive view of policy and agent details within the `int_policies_enriched` model, supporting analysis and reporting on policy characteristics and agent relationships.\n\n**Option 3 (If the wildcard represents a calculated column, and we can infer its purpose):**\n\n> This column represents a calculated field, likely derived from the `stg_policies` and `stg_agents` staging models.  The data is included to provide a comprehensive view of policy and agent details within the `int_policies_enriched` model, supporting analysis and reporting on policy characteristics and agent relationships.\n\n**Important Considerations:**\n\n*   **Data Type:** Without knowing the data type, it'",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "Okay, here are a few options for the column description, based on the provided context, assuming the column name is a wildcard (*):\n\n**Option 1 (Most General - if the wildcard represents all columns):**\n\n> This column contains data from the `stg_policies` and `stg_agents` staging models, representing a specific attribute of a policy or agent.  The data is included to provide a comprehensive view of policy and agent details within the `int_policies_enriched` model, supporting analysis and reporting on policy characteristics and agent relationships.\n\n**Option 2 (If the wildcard represents a specific column, and we can infer its purpose):**\n\n> This column likely contains policy details or agent information, depending on the source table.  The data is included to provide a comprehensive view of policy and agent details within the `int_policies_enriched` model, supporting analysis and reporting on policy characteristics and agent relationships.\n\n**Option 3 (If the wildcard represents a calculated column, and we can infer its purpose):**\n\n> This column represents a calculated field, likely derived from the `stg_policies` and `stg_agents` staging models.  The data is included to provide a comprehensive view of policy and agent details within the `int_policies_enriched` model, supporting analysis and reporting on policy characteristics and agent relationships.\n\n**Important Considerations:**\n\n*   **Data Type:** Without knowing the data type, it'"
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['intermediate', 'policies', 'daily']\n    )\n}}\n\nWITH policies AS (\n    SELECT * FROM {{ ref('stg_policies') }}\n),\n\nagents AS (\n    SELECT * FROM {{ ref('stg_agents') }}\n)\n\nSELECT\n    p.policy_id,\n    p.customer_id,\n    p.policy_type,\n    p.start_date,\n    p.end_date,\n    p.premium_amount,\n    p.coverage_amount,\n    p.status,\n    p.agent_id,\n    p.policy_number,\n    p.policy_term_days,\n    p.effective_status,\n    p.coverage_premium_ratio,\n    -- Agent information\n    a.agent_name,\n    a.office_location,\n    a.specialization AS agent_specialization,\n    a.experience_level AS agent_experience,\n    -- Policy-agent alignment\n    CASE\n        WHEN a.specialization = p.policy_type THEN 'ALIGNED'\n        ELSE 'MISALIGNED'\n    END AS specialization_alignment,\n    -- Metadata fields\n    p.dbt_updated_at,\n    p._dbt_source_project\nFROM policies p\nLEFT JOIN agents a ON p.agent_id = a.agent_id",
      "materialized": "view",
      "schema": "intermediate",
      "file_path": "models/intermediate/int_policies_enriched.sql",
      "database": "insurance_data",
      "tags": [
        "intermediate",
        "policies",
        "daily"
      ],
      "ai_description": "The `int_policies_enriched` dbt model in the `claims_processing` project enriches policy data by joining it with agent information. This intermediate model selects and transforms data from the `stg_policies` and `stg_agents` staging models. It produces a view containing policy details, agent details, and calculated fields like `specialization_alignment` which indicates if the agent's specialization matches the policy type. This model serves as a crucial step in the data pipeline, providing a consolidated and enriched view of policies for downstream analysis and reporting."
    },
    {
      "id": "c12",
      "name": "mart_policy_details",
      "project": "claims_processing",
      "description": "The `mart_policy_details` dbt model in the `claims_processing` project creates a detailed, daily-updated table containing policy information. It joins enriched policy data from `int_policies_enriched` with customer risk profiles from the `customer_risk` project, handling the potential absence of the risk profile data gracefully. This model serves as a core mart, providing a comprehensive view of policies, including details like policy type, dates, premium, coverage, and customer risk attributes, for downstream analysis and reporting. The model incorporates logic to handle the availability of the `customer_risk_profile` table, ensuring the query runs even if the external project is not available.",
      "columns": [
        {
          "name": "*",
          "type": "unknown",
          "description": "Okay, I'll provide a description for the unnamed column based on the context. Since the column name is \"*\", I'll assume it's a column that is being selected from the `int_policies_enriched` table.\n\nHere's a description:\n\nThis column represents all the columns from the `int_policies_enriched` table, which contains enriched policy data. It provides the core policy details, such as policy type, dates, premium, and coverage, used to build the comprehensive policy view in the `mart_policy_details` model. This data is essential for understanding the characteristics of each policy.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "Okay, I'll provide a description for the unnamed column based on the context. Since the column name is \"*\", I'll assume it's a column that is being selected from the `int_policies_enriched` table.\n\nHere's a description:\n\nThis column represents all the columns from the `int_policies_enriched` table, which contains enriched policy data. It provides the core policy details, such as policy type, dates, premium, and coverage, used to build the comprehensive policy view in the `mart_policy_details` model. This data is essential for understanding the characteristics of each policy."
        }
      ],
      "sql": "{{\n    config(\n        materialized='table',\n        tags=['mart', 'policies', 'daily']\n    )\n}}\n\nWITH policies_enriched AS (\n    SELECT * FROM {{ ref('int_policies_enriched') }}\n),\n\n-- Reference to the customer risk project\ncustomer_risk_profile AS (\n    {% if execute %}\n        {% if adapter.get_relation(this.database, 'mart', 'mart_customer_risk_profile') %}\n            SELECT * FROM {{ ref('customer_risk', 'mart_customer_risk_profile') }}\n        {% else %}\n            SELECT\n                'CU0000' AS customer_id,\n                0 AS credit_score,\n                'UNKNOWN' AS claim_frequency,\n                0 AS risk_score,\n                0 AS previous_claims_count,\n                'UNKNOWN' AS risk_category,\n                'UNKNOWN' AS customer_name,\n                'customer_risk' AS _dbt_source_project\n            WHERE 1=0\n        {% endif %}\n    {% else %}\n        SELECT\n            'CU0000' AS customer_id,\n            0 AS credit_score,\n            'UNKNOWN' AS claim_frequency,\n            0 AS risk_score,\n            0 AS previous_claims_count,\n            'UNKNOWN' AS risk_category,\n            'UNKNOWN' AS customer_name,\n            'customer_risk' AS _dbt_source_project\n        WHERE 1=0\n    {% endif %}\n)\n\nSELECT\n    pe.policy_id,\n    pe.customer_id,\n    pe.policy_type,\n    pe.start_date,\n    pe.end_date,\n    pe.premium_amount,\n    pe.coverage_amount,\n    pe.status,\n    pe.agent_id,\n    pe.policy_number,\n    pe.policy_term_days,\n    pe.effective_status,\n    pe.coverage_premium_ratio,\n    pe.agent_name,\n    pe.office_location,\n    pe.agent_specialization,\n    pe.agent_experience,\n    pe.specialization_alignment,\n    -- Customer risk information\n    cr.customer_name,\n    cr.risk_category,\n    cr.risk_score,\n    cr.credit_score,\n    cr.claim_frequency,\n    cr.previous_claims_count,\n    -- Risk-adjusted premium calculation\n    CASE\n        WHEN cr.risk_category = 'HIGH_RISK' THEN pe.premium_amount * 1.25\n        WHEN cr.risk_category = 'MEDIUM_RISK' THEN pe.premium_amount * 1.1\n        WHEN cr.risk_category = 'LOW_RISK' THEN pe.premium_amount * 0.95\n        ELSE pe.premium_amount\n    END AS risk_adjusted_premium,\n    -- Cross project attribution\n    pe._dbt_source_project AS policy_source,\n    cr._dbt_source_project AS risk_source,\n    -- Metadata\n    CURRENT_TIMESTAMP AS dbt_updated_at\nFROM policies_enriched pe\nLEFT JOIN customer_risk_profile cr ON pe.customer_id = cr.customer_id",
      "materialized": "table",
      "schema": "mart",
      "file_path": "models/mart/mart_policy_details.sql",
      "database": "insurance_data",
      "tags": [
        "mart",
        "policies",
        "daily"
      ],
      "ai_description": "The `mart_policy_details` dbt model in the `claims_processing` project creates a detailed, daily-updated table containing policy information. It joins enriched policy data from `int_policies_enriched` with customer risk profiles from the `customer_risk` project, handling the potential absence of the risk profile data gracefully. This model serves as a core mart, providing a comprehensive view of policies, including details like policy type, dates, premium, coverage, and customer risk attributes, for downstream analysis and reporting. The model incorporates logic to handle the availability of the `customer_risk_profile` table, ensuring the query runs even if the external project is not available."
    },
    {
      "id": "c1",
      "name": "stg_risk_factors",
      "project": "customer_risk",
      "description": "The `stg_risk_factors` dbt model in the `customer_risk` project serves as a staging layer for risk factor data. It transforms the raw `risk_factors` data by casting `assessment_date` and `last_assessment` to the DATE data type. This model calculates `days_since_last_assessment` using a date difference and derives a `credit_rating` based on the `credit_score`. Finally, it adds metadata fields like `dbt_updated_at` and `_dbt_source_project`, preparing the data for downstream analysis and reporting within the customer risk data pipeline.",
      "columns": [
        {
          "name": "risk_id",
          "type": "VARCHAR",
          "description": "`risk_id` is a VARCHAR column that uniquely identifies a specific risk factor record within the `stg_risk_factors` staging model. This ID is inherited from the source `risk_factors` table and serves as a primary key, enabling the tracking and linking of risk-related information across the customer risk data pipeline.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "`risk_id` is a VARCHAR column that uniquely identifies a specific risk factor record within the `stg_risk_factors` staging model. This ID is inherited from the source `risk_factors` table and serves as a primary key, enabling the tracking and linking of risk-related information across the customer risk data pipeline."
        },
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for a customer, represented as a string.  In the `stg_risk_factors` model, `customer_id` links risk factor data to individual customer profiles. This allows for analysis of risk factors at the customer level.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for a customer, represented as a string.  In the `stg_risk_factors` model, `customer_id` links risk factor data to individual customer profiles. This allows for analysis of risk factors at the customer level."
        },
        {
          "name": "assessment_date",
          "type": "DATE",
          "description": "This column stores the date when a risk assessment was performed, represented as a DATE data type.  In the `stg_risk_factors` model, this date is used to calculate the `days_since_last_assessment` which is a key metric for understanding the recency of risk evaluations. This column is essential for tracking changes in risk factors over time.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the date when a risk assessment was performed, represented as a DATE data type.  In the `stg_risk_factors` model, this date is used to calculate the `days_since_last_assessment` which is a key metric for understanding the recency of risk evaluations. This column is essential for tracking changes in risk factors over time."
        },
        {
          "name": "credit_score",
          "type": "INTEGER",
          "description": "This column stores the customer's credit score as an integer.  It is a key risk factor used to derive the `credit_rating` within the `stg_risk_factors` model. The credit score is used in a CASE statement to categorize the customer's creditworthiness.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's credit score as an integer.  It is a key risk factor used to derive the `credit_rating` within the `stg_risk_factors` model. The credit score is used in a CASE statement to categorize the customer's creditworthiness."
        },
        {
          "name": "claim_frequency",
          "type": "VARCHAR",
          "description": "`claim_frequency` stores a string representation of how often a customer has filed claims. This column likely represents a categorical or coded value indicating the frequency of claims, used in conjunction with other risk factors to assess customer risk. The specific values and their meaning would be defined in the source data or a related data dictionary.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`claim_frequency` stores a string representation of how often a customer has filed claims. This column likely represents a categorical or coded value indicating the frequency of claims, used in conjunction with other risk factors to assess customer risk. The specific values and their meaning would be defined in the source data or a related data dictionary."
        },
        {
          "name": "risk_score",
          "type": "DOUBLE",
          "description": "`risk_score` stores a numerical value representing the overall risk associated with a customer. This DOUBLE data type column is likely a calculated metric within the `stg_risk_factors` model, potentially incorporating factors like `credit_score` and `claim_frequency` to quantify customer risk. This score is crucial for risk assessment and segmentation within the customer risk data pipeline.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`risk_score` stores a numerical value representing the overall risk associated with a customer. This DOUBLE data type column is likely a calculated metric within the `stg_risk_factors` model, potentially incorporating factors like `credit_score` and `claim_frequency` to quantify customer risk. This score is crucial for risk assessment and segmentation within the customer risk data pipeline."
        },
        {
          "name": "previous_claims_count",
          "type": "INTEGER",
          "description": "`previous_claims_count` stores the number of claims a customer has made prior to the current assessment. This integer value is a key risk factor used in the `stg_risk_factors` model to assess a customer's risk profile, potentially influencing their overall risk score and category assignment.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`previous_claims_count` stores the number of claims a customer has made prior to the current assessment. This integer value is a key risk factor used in the `stg_risk_factors` model to assess a customer's risk profile, potentially influencing their overall risk score and category assignment."
        },
        {
          "name": "risk_category",
          "type": "VARCHAR",
          "description": "The `risk_category` column in the `stg_risk_factors` table stores a categorical representation of the customer's risk level. This column likely categorizes customers based on their risk profile, potentially derived from factors like `risk_score` and `previous_claims_count`, to facilitate risk-based segmentation and analysis.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `risk_category` column in the `stg_risk_factors` table stores a categorical representation of the customer's risk level. This column likely categorizes customers based on their risk profile, potentially derived from factors like `risk_score` and `previous_claims_count`, to facilitate risk-based segmentation and analysis."
        },
        {
          "name": "last_assessment",
          "type": "DATE",
          "description": "This column stores the date of the last risk assessment for a customer.  It's used to calculate the `days_since_last_assessment`, providing insight into the recency of the risk evaluation.  The `last_assessment` date is cast to the DATE data type for consistent date-based calculations.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the date of the last risk assessment for a customer.  It's used to calculate the `days_since_last_assessment`, providing insight into the recency of the risk evaluation.  The `last_assessment` date is cast to the DATE data type for consistent date-based calculations."
        },
        {
          "name": "assessment_source",
          "type": "VARCHAR",
          "description": "This column, `assessment_source`, stores the origin or system from which the risk assessment data was obtained.  It identifies the source of the risk factor information within the `stg_risk_factors` staging model, providing context for data lineage and potential data quality considerations. This helps analysts understand the origin of the risk assessment data.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `assessment_source`, stores the origin or system from which the risk assessment data was obtained.  It identifies the source of the risk factor information within the `stg_risk_factors` staging model, providing context for data lineage and potential data quality considerations. This helps analysts understand the origin of the risk assessment data."
        },
        {
          "name": "days_since_last_assessment",
          "type": "BIGINT",
          "description": "This column stores the number of days elapsed since the last risk assessment, calculated as the difference between the `assessment_date` and `last_assessment` dates.  It's used to understand the recency of risk evaluations, providing insight into how recently a customer's risk profile was reviewed. The `BIGINT` data type indicates this is a whole number representing the duration in days.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the number of days elapsed since the last risk assessment, calculated as the difference between the `assessment_date` and `last_assessment` dates.  It's used to understand the recency of risk evaluations, providing insight into how recently a customer's risk profile was reviewed. The `BIGINT` data type indicates this is a whole number representing the duration in days."
        },
        {
          "name": "credit_rating",
          "type": "VARCHAR",
          "description": "This column, `credit_rating`, stores a customer's creditworthiness as a string value. It's derived in the `stg_risk_factors` model based on the `credit_score`, categorizing customers as 'POOR' or 'VERY_POOR'. This rating helps assess customer risk within the risk factor staging layer.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `credit_rating`, stores a customer's creditworthiness as a string value. It's derived in the `stg_risk_factors` model based on the `credit_score`, categorizing customers as 'POOR' or 'VERY_POOR'. This rating helps assess customer risk within the risk factor staging layer."
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "`dbt_updated_at` stores the timestamp when the `stg_risk_factors` model was last refreshed. This column provides a record of when the risk factor data within the staging layer was last updated, aiding in data freshness monitoring and debugging. The value is generated using `CURRENT_TIMESTAMP`.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`dbt_updated_at` stores the timestamp when the `stg_risk_factors` model was last refreshed. This column provides a record of when the risk factor data within the staging layer was last updated, aiding in data freshness monitoring and debugging. The value is generated using `CURRENT_TIMESTAMP`."
        },
        {
          "name": "_dbt_source_project",
          "type": "VARCHAR",
          "description": "This column, `_dbt_source_project`, stores the name of the dbt project from which the data originated, which is 'customer_risk'. It serves as a metadata field, enabling traceability of the data source within the `stg_risk_factors` model. This allows for easy identification of the project responsible for generating the data.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `_dbt_source_project`, stores the name of the dbt project from which the data originated, which is 'customer_risk'. It serves as a metadata field, enabling traceability of the data source within the `stg_risk_factors` model. This allows for easy identification of the project responsible for generating the data."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'risk', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('risk_factors') }}\n)\n\nSELECT\n    risk_id,\n    customer_id,\n    CAST(assessment_date AS DATE) AS assessment_date,\n    credit_score,\n    claim_frequency,\n    risk_score,\n    previous_claims_count,\n    risk_category,\n    CAST(last_assessment AS DATE) AS last_assessment,\n    assessment_source,\n    -- Derived fields\n    DATEDIFF('day', last_assessment, assessment_date) AS days_since_last_assessment,\n    CASE\n        WHEN credit_score >= 750 THEN 'EXCELLENT'\n        WHEN credit_score >= 700 THEN 'GOOD'\n        WHEN credit_score >= 650 THEN 'FAIR'\n        WHEN credit_score >= 600 THEN 'POOR'\n        ELSE 'VERY_POOR'\n    END AS credit_rating,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'customer_risk' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_risk_factors.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "risk",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.customer_risk.stg_risk_factors",
        "metadata": {
          "type": "VIEW",
          "schema": "customer_risk_staging",
          "name": "stg_risk_factors",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `stg_risk_factors` dbt model in the `customer_risk` project serves as a staging layer for risk factor data. It transforms the raw `risk_factors` data by casting `assessment_date` and `last_assessment` to the DATE data type. This model calculates `days_since_last_assessment` using a date difference and derives a `credit_rating` based on the `credit_score`. Finally, it adds metadata fields like `dbt_updated_at` and `_dbt_source_project`, preparing the data for downstream analysis and reporting within the customer risk data pipeline."
    },
    {
      "id": "c2",
      "name": "stg_customers",
      "project": "customer_risk",
      "description": "The `stg_customers` dbt model in the `customer_risk` project serves as a staging layer for customer data. It transforms raw customer data from the `customers` source, casting date fields and deriving new columns. This model produces a view containing standardized customer information, including calculated fields like `customer_name`, `age`, and `months_as_customer`.  It plays a crucial role in the data pipeline by preparing customer data for downstream analysis and modeling, ensuring data consistency and facilitating business logic implementation.",
      "columns": [
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for each customer, sourced from the `customers` table.  The `customer_id` is a VARCHAR field used to link customer records within the `stg_customers` staging model, enabling consistent customer identification across the data pipeline.  It's a key field for joining this data with other tables and performing customer-level analysis.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for each customer, sourced from the `customers` table.  The `customer_id` is a VARCHAR field used to link customer records within the `stg_customers` staging model, enabling consistent customer identification across the data pipeline.  It's a key field for joining this data with other tables and performing customer-level analysis."
        },
        {
          "name": "first_name",
          "type": "VARCHAR",
          "description": "This column stores the customer's first name as a string. Within the `stg_customers` model, this field is sourced directly from the raw customer data and is used in the `customer_name` calculation. This allows for easy identification and display of customer names.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's first name as a string. Within the `stg_customers` model, this field is sourced directly from the raw customer data and is used in the `customer_name` calculation. This allows for easy identification and display of customer names."
        },
        {
          "name": "last_name",
          "type": "VARCHAR",
          "description": "This column stores the customer's last name as a string. It's used in the `stg_customers` model to construct the `customer_name` field by concatenating it with the first name. This standardized last name is essential for identifying and referencing customers within the data pipeline.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's last name as a string. It's used in the `stg_customers` model to construct the `customer_name` field by concatenating it with the first name. This standardized last name is essential for identifying and referencing customers within the data pipeline."
        },
        {
          "name": "email",
          "type": "VARCHAR",
          "description": "This column stores the customer's email address as a string.  It's a key piece of customer contact information within the `stg_customers` staging model, sourced directly from the raw `customers` data. This field is essential for customer identification and potential communication.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's email address as a string.  It's a key piece of customer contact information within the `stg_customers` staging model, sourced directly from the raw `customers` data. This field is essential for customer identification and potential communication."
        },
        {
          "name": "phone",
          "type": "VARCHAR",
          "description": "This column stores the customer's phone number as a string.  It's sourced directly from the raw `customers` data and included in the staging layer for comprehensive customer information.  The `phone` column is a key identifier for customer contact.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's phone number as a string.  It's sourced directly from the raw `customers` data and included in the staging layer for comprehensive customer information.  The `phone` column is a key identifier for customer contact."
        },
        {
          "name": "address",
          "type": "VARCHAR",
          "description": "The `address` column in the `stg_customers` staging model stores the customer's street address as a VARCHAR string. This column is sourced directly from the raw customer data and is included to provide location information for each customer. This address data is used for customer profiling and potentially for geographic analysis.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `address` column in the `stg_customers` staging model stores the customer's street address as a VARCHAR string. This column is sourced directly from the raw customer data and is included to provide location information for each customer. This address data is used for customer profiling and potentially for geographic analysis."
        },
        {
          "name": "city",
          "type": "VARCHAR",
          "description": "The `city` column in the `stg_customers` staging model stores the customer's city of residence as a string. This column is sourced directly from the raw customer data and is used to provide location information for customer segmentation and analysis. It is a key attribute for understanding customer demographics and geographic distribution.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `city` column in the `stg_customers` staging model stores the customer's city of residence as a string. This column is sourced directly from the raw customer data and is used to provide location information for customer segmentation and analysis. It is a key attribute for understanding customer demographics and geographic distribution."
        },
        {
          "name": "state",
          "type": "VARCHAR",
          "description": "The `state` column in the `stg_customers` staging model stores the customer's state of residence as a VARCHAR string. This column is directly sourced from the raw `customers` data and is used to provide location information for customer segmentation and analysis. It is a key attribute for understanding customer demographics and potentially for risk assessment.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `state` column in the `stg_customers` staging model stores the customer's state of residence as a VARCHAR string. This column is directly sourced from the raw `customers` data and is used to provide location information for customer segmentation and analysis. It is a key attribute for understanding customer demographics and potentially for risk assessment."
        },
        {
          "name": "zip_code",
          "type": "INTEGER",
          "description": "The `zip_code` column in the `stg_customers` table stores the customer's postal code as an integer. This column is sourced directly from the raw customer data and is used to represent the customer's geographic location. This information is crucial for segmentation, risk assessment, and other analyses within the customer data.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `zip_code` column in the `stg_customers` table stores the customer's postal code as an integer. This column is sourced directly from the raw customer data and is used to represent the customer's geographic location. This information is crucial for segmentation, risk assessment, and other analyses within the customer data."
        },
        {
          "name": "date_of_birth",
          "type": "DATE",
          "description": "This column stores the customer's date of birth.  It's used to calculate the customer's age within the `stg_customers` model.  The `date_of_birth` is cast as a DATE data type for consistency and is a key input for age calculations.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's date of birth.  It's used to calculate the customer's age within the `stg_customers` model.  The `date_of_birth` is cast as a DATE data type for consistency and is a key input for age calculations."
        },
        {
          "name": "gender",
          "type": "VARCHAR",
          "description": "This column stores the customer's gender as a string value. Within the `stg_customers` model, this column provides a standardized representation of customer gender, sourced from the raw customer data. This information is crucial for segmenting customers and performing analyses based on gender demographics.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's gender as a string value. Within the `stg_customers` model, this column provides a standardized representation of customer gender, sourced from the raw customer data. This information is crucial for segmenting customers and performing analyses based on gender demographics."
        },
        {
          "name": "joining_date",
          "type": "DATE",
          "description": "The `joining_date` column in the `stg_customers` table stores the date when a customer joined the company. This date is used to calculate the `months_as_customer` metric, providing insight into customer tenure and potentially informing customer segmentation or analysis.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `joining_date` column in the `stg_customers` table stores the date when a customer joined the company. This date is used to calculate the `months_as_customer` metric, providing insight into customer tenure and potentially informing customer segmentation or analysis."
        },
        {
          "name": "customer_name",
          "type": "VARCHAR",
          "description": "This column, `customer_name`, stores the full name of the customer. It's derived by concatenating the `first_name` and `last_name` fields from the source data within the `stg_customers` model. This provides a readily available, human-readable customer identifier for analysis.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `customer_name`, stores the full name of the customer. It's derived by concatenating the `first_name` and `last_name` fields from the source data within the `stg_customers` model. This provides a readily available, human-readable customer identifier for analysis."
        },
        {
          "name": "age",
          "type": "BIGINT",
          "description": "The `age` column in the `stg_customers` model stores the customer's age in years, calculated as the difference between their date of birth and the current date. This column provides a readily available age value for customer segmentation and analysis within the customer risk project, facilitating insights based on customer demographics.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `age` column in the `stg_customers` model stores the customer's age in years, calculated as the difference between their date of birth and the current date. This column provides a readily available age value for customer segmentation and analysis within the customer risk project, facilitating insights based on customer demographics."
        },
        {
          "name": "months_as_customer",
          "type": "BIGINT",
          "description": "This column, `months_as_customer`, stores the number of months a customer has been a customer. It's calculated as the difference in months between the `joining_date` and the current date. This field is crucial for understanding customer tenure and is used for segmentation and analysis within the `stg_customers` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `months_as_customer`, stores the number of months a customer has been a customer. It's calculated as the difference in months between the `joining_date` and the current date. This field is crucial for understanding customer tenure and is used for segmentation and analysis within the `stg_customers` model."
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "`dbt_updated_at` stores the timestamp when the `stg_customers` model was last refreshed. This column provides a record of the model's update time, enabling data analysts to track the freshness of the customer data and understand when the information was last transformed.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`dbt_updated_at` stores the timestamp when the `stg_customers` model was last refreshed. This column provides a record of the model's update time, enabling data analysts to track the freshness of the customer data and understand when the information was last transformed."
        },
        {
          "name": "_dbt_source_project",
          "type": "VARCHAR",
          "description": "This column, `_dbt_source_project`, stores the name of the dbt project from which the source data originates, in this case, 'customer_risk'. This metadata field is used for tracking the lineage of the data, allowing for easier identification of the source and potential troubleshooting. It helps in understanding the origin of the customer data within the data pipeline.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `_dbt_source_project`, stores the name of the dbt project from which the source data originates, in this case, 'customer_risk'. This metadata field is used for tracking the lineage of the data, allowing for easier identification of the source and potential troubleshooting. It helps in understanding the origin of the customer data within the data pipeline."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'customers', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('customers') }}\n)\n\nSELECT\n    customer_id,\n    first_name,\n    last_name,\n    email,\n    phone,\n    address,\n    city,\n    state,\n    zip_code,\n    CAST(date_of_birth AS DATE) AS date_of_birth,\n    gender,\n    CAST(joining_date AS DATE) AS joining_date,\n    -- Derived fields\n    CONCAT(first_name, ' ', last_name) AS customer_name,\n    DATEDIFF('year', date_of_birth, CURRENT_DATE()) AS age,\n    DATEDIFF('month', joining_date, CURRENT_DATE()) AS months_as_customer,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'customer_risk' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_customers.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "customers",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.customer_risk.stg_customers",
        "metadata": {
          "type": "VIEW",
          "schema": "customer_risk_staging",
          "name": "stg_customers",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `stg_customers` dbt model in the `customer_risk` project serves as a staging layer for customer data. It transforms raw customer data from the `customers` source, casting date fields and deriving new columns. This model produces a view containing standardized customer information, including calculated fields like `customer_name`, `age`, and `months_as_customer`.  It plays a crucial role in the data pipeline by preparing customer data for downstream analysis and modeling, ensuring data consistency and facilitating business logic implementation."
    },
    {
      "id": "c3",
      "name": "mart_customer_risk_profile",
      "project": "customer_risk",
      "description": "The `mart_customer_risk_profile` dbt model in the `customer_risk` project generates a customer-level risk profile. It consolidates customer information with risk-related metrics, including age, credit score, and claim history. This model enriches the `int_customer_risk_enriched` intermediate model and joins with claims data from the `claims_processing` project, if available. Key transformations include calculating risk scores, categorizing customers by risk, and aggregating claim statistics to provide a comprehensive view for customer segmentation and risk assessment.",
      "columns": [
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for a customer, represented as a variable-length string.  It serves as the primary key for the `mart_customer_risk_profile` model, linking customer data with their risk profile information. This ID is used to join with other tables, such as claims data, to provide a comprehensive view of each customer.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for a customer, represented as a variable-length string.  It serves as the primary key for the `mart_customer_risk_profile` model, linking customer data with their risk profile information. This ID is used to join with other tables, such as claims data, to provide a comprehensive view of each customer."
        },
        {
          "name": "customer_name",
          "type": "VARCHAR",
          "description": "This column, `customer_name`, stores the customer's full name as a string. It's used to identify and label individual customer risk profiles within the `mart_customer_risk_profile` model. This allows for easy identification and reporting on customer risk profiles.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `customer_name`, stores the customer's full name as a string. It's used to identify and label individual customer risk profiles within the `mart_customer_risk_profile` model. This allows for easy identification and reporting on customer risk profiles."
        },
        {
          "name": "email",
          "type": "VARCHAR",
          "description": "This column stores the customer's email address as a string. It's used to identify and link customer records within the `mart_customer_risk_profile` model. This allows for customer-level analysis and risk profiling based on various attributes.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's email address as a string. It's used to identify and link customer records within the `mart_customer_risk_profile` model. This allows for customer-level analysis and risk profiling based on various attributes."
        },
        {
          "name": "city",
          "type": "VARCHAR",
          "description": "This column stores the customer's city of residence.  It provides geographic context for customer risk profiling within the `mart_customer_risk_profile` model, enabling analysis of risk factors by location. This information is likely sourced from customer data and used for segmentation and risk assessment.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's city of residence.  It provides geographic context for customer risk profiling within the `mart_customer_risk_profile` model, enabling analysis of risk factors by location. This information is likely sourced from customer data and used for segmentation and risk assessment."
        },
        {
          "name": "state",
          "type": "VARCHAR",
          "description": "The `state` column stores the customer's state of residence as a text string. This information is likely used for customer segmentation and risk analysis, potentially allowing for risk profiles to be assessed based on geographic location. It could be used to identify regional risk trends or to filter data by state.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `state` column stores the customer's state of residence as a text string. This information is likely used for customer segmentation and risk analysis, potentially allowing for risk profiles to be assessed based on geographic location. It could be used to identify regional risk trends or to filter data by state."
        },
        {
          "name": "age",
          "type": "BIGINT",
          "description": "The `age` column stores the customer's age as a whole number (BIGINT). This data is a key input for calculating risk scores and categorizing customers within the `mart_customer_risk_profile` model.  It is used in conjunction with other factors like claim history and credit score to assess customer risk.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `age` column stores the customer's age as a whole number (BIGINT). This data is a key input for calculating risk scores and categorizing customers within the `mart_customer_risk_profile` model.  It is used in conjunction with other factors like claim history and credit score to assess customer risk."
        },
        {
          "name": "months_as_customer",
          "type": "BIGINT",
          "description": "This column, `months_as_customer`, stores the number of months a customer has been active. It's a key metric for understanding customer tenure and is likely used in calculating risk scores or segmenting customers based on their relationship duration with the company. The `BIGINT` data type suggests this value represents a whole number of months.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `months_as_customer`, stores the number of months a customer has been active. It's a key metric for understanding customer tenure and is likely used in calculating risk scores or segmenting customers based on their relationship duration with the company. The `BIGINT` data type suggests this value represents a whole number of months."
        },
        {
          "name": "credit_score",
          "type": "INTEGER",
          "description": "The `credit_score` column stores a customer's credit score as an integer. This score is a key input for the customer risk profile model, used to assess a customer's financial risk. It likely contributes to the overall risk score calculation and customer segmentation.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `credit_score` column stores a customer's credit score as an integer. This score is a key input for the customer risk profile model, used to assess a customer's financial risk. It likely contributes to the overall risk score calculation and customer segmentation."
        },
        {
          "name": "credit_rating",
          "type": "VARCHAR",
          "description": "The `credit_rating` column in the `mart_customer_risk_profile` table stores a customer's credit rating, likely obtained from a credit bureau. This rating is a key input for assessing customer risk, contributing to the overall risk score and customer segmentation within the model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `credit_rating` column in the `mart_customer_risk_profile` table stores a customer's credit rating, likely obtained from a credit bureau. This rating is a key input for assessing customer risk, contributing to the overall risk score and customer segmentation within the model."
        },
        {
          "name": "claim_frequency",
          "type": "VARCHAR",
          "description": "`claim_frequency` stores a customer's claim frequency, likely represented as a string value. This column is crucial for assessing customer risk, providing insight into a customer's historical claim behavior. The value likely represents a calculated metric, such as the number of claims per year or a similar time period.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`claim_frequency` stores a customer's claim frequency, likely represented as a string value. This column is crucial for assessing customer risk, providing insight into a customer's historical claim behavior. The value likely represents a calculated metric, such as the number of claims per year or a similar time period."
        },
        {
          "name": "risk_score",
          "type": "DOUBLE",
          "description": "`risk_score` stores a numerical value representing the customer's overall risk profile. This score, of type DOUBLE, is calculated within the `mart_customer_risk_profile` model, likely based on factors like credit rating, claim frequency, and age, to facilitate customer segmentation and risk assessment. The `claims_adjusted_risk_score` is also calculated using this `risk_score`.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`risk_score` stores a numerical value representing the customer's overall risk profile. This score, of type DOUBLE, is calculated within the `mart_customer_risk_profile` model, likely based on factors like credit rating, claim frequency, and age, to facilitate customer segmentation and risk assessment. The `claims_adjusted_risk_score` is also calculated using this `risk_score`."
        },
        {
          "name": "age_adjusted_risk_score",
          "type": "DOUBLE",
          "description": "This column, `age_adjusted_risk_score`, stores a customer's risk score adjusted for their age. This score is a key component of the customer risk profile, likely used for segmenting customers and assessing their overall risk. The score is a DOUBLE data type, indicating a numerical value that can be used in further calculations.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `age_adjusted_risk_score`, stores a customer's risk score adjusted for their age. This score is a key component of the customer risk profile, likely used for segmenting customers and assessing their overall risk. The score is a DOUBLE data type, indicating a numerical value that can be used in further calculations."
        },
        {
          "name": "previous_claims_count",
          "type": "INTEGER",
          "description": "`previous_claims_count` stores the total number of claims a customer has filed prior to the current reporting period. This integer value is a key input for calculating customer risk profiles within the `mart_customer_risk_profile` model, contributing to risk scoring and customer segmentation.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`previous_claims_count` stores the total number of claims a customer has filed prior to the current reporting period. This integer value is a key input for calculating customer risk profiles within the `mart_customer_risk_profile` model, contributing to risk scoring and customer segmentation."
        },
        {
          "name": "risk_category",
          "type": "VARCHAR",
          "description": "`risk_category` categorizes customers based on their calculated risk score, likely representing levels like \"Low,\" \"Medium,\" or \"High.\" This column is crucial for customer segmentation and risk assessment within the `mart_customer_risk_profile` model. The categorization helps to quickly identify and group customers with similar risk profiles.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`risk_category` categorizes customers based on their calculated risk score, likely representing levels like \"Low,\" \"Medium,\" or \"High.\" This column is crucial for customer segmentation and risk assessment within the `mart_customer_risk_profile` model. The categorization helps to quickly identify and group customers with similar risk profiles."
        },
        {
          "name": "customer_segment",
          "type": "VARCHAR",
          "description": "`customer_segment` categorizes customers into distinct groups based on their risk profiles, likely derived from factors like age, credit score, and claim history. This VARCHAR column facilitates customer segmentation within the `mart_customer_risk_profile` model, enabling targeted risk assessment and potentially influencing business strategies. The specific segments are not defined, but the column's presence suggests a categorization of customers based on their risk level.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`customer_segment` categorizes customers into distinct groups based on their risk profiles, likely derived from factors like age, credit score, and claim history. This VARCHAR column facilitates customer segmentation within the `mart_customer_risk_profile` model, enabling targeted risk assessment and potentially influencing business strategies. The specific segments are not defined, but the column's presence suggests a categorization of customers based on their risk level."
        },
        {
          "name": "total_claims",
          "type": "INTEGER",
          "description": "This column, `total_claims`, stores the total number of claims associated with a customer. It's a key metric in the `mart_customer_risk_profile` model, used to assess customer risk by incorporating claim history into risk score calculations and identifying potential high-risk customers. The value is an integer representing the count of claims for each customer.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `total_claims`, stores the total number of claims associated with a customer. It's a key metric in the `mart_customer_risk_profile` model, used to assess customer risk by incorporating claim history into risk score calculations and identifying potential high-risk customers. The value is an integer representing the count of claims for each customer."
        },
        {
          "name": "total_claim_amount",
          "type": "INTEGER",
          "description": "`total_claim_amount` represents the sum of all claim amounts associated with a specific customer. This integer value provides a key metric for understanding a customer's claim history and is used in the `mart_customer_risk_profile` model to assess customer risk and segment customers based on their claim behavior.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`total_claim_amount` represents the sum of all claim amounts associated with a specific customer. This integer value provides a key metric for understanding a customer's claim history and is used in the `mart_customer_risk_profile` model to assess customer risk and segment customers based on their claim behavior."
        },
        {
          "name": "total_settlement_amount",
          "type": "INTEGER",
          "description": "`total_settlement_amount` represents the sum of all settlement amounts associated with a customer's claims, calculated as an integer. This column provides a key financial metric for assessing a customer's risk profile, indicating the total monetary value paid out to settle their claims. It's used in conjunction with other risk factors to categorize customers and inform risk-based decisions.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`total_settlement_amount` represents the sum of all settlement amounts associated with a customer's claims, calculated as an integer. This column provides a key financial metric for assessing a customer's risk profile, indicating the total monetary value paid out to settle their claims. It's used in conjunction with other risk factors to categorize customers and inform risk-based decisions."
        },
        {
          "name": "avg_days_to_settle",
          "type": "INTEGER",
          "description": "This column stores the average number of days it took to settle a customer's claims, calculated as an integer.  It provides insight into the efficiency of the claims settlement process for each customer within the `mart_customer_risk_profile` model. This metric is crucial for understanding customer risk profiles and identifying potential delays in claim resolution.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the average number of days it took to settle a customer's claims, calculated as an integer.  It provides insight into the efficiency of the claims settlement process for each customer within the `mart_customer_risk_profile` model. This metric is crucial for understanding customer risk profiles and identifying potential delays in claim resolution."
        },
        {
          "name": "settled_claims_count",
          "type": "INTEGER",
          "description": "`settled_claims_count` stores the total number of claims for a customer that have been settled. This integer value is crucial for understanding a customer's claim history and is used in the `mart_customer_risk_profile` model to assess customer risk and inform segmentation. The value is derived from the `claims_processing` project and aggregated at the customer level.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`settled_claims_count` stores the total number of claims for a customer that have been settled. This integer value is crucial for understanding a customer's claim history and is used in the `mart_customer_risk_profile` model to assess customer risk and inform segmentation. The value is derived from the `claims_processing` project and aggregated at the customer level."
        },
        {
          "name": "denied_claims_count",
          "type": "INTEGER",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "most_recent_claim_date",
          "type": "DATE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "claims_adjusted_risk_score",
          "type": "DOUBLE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "claim_denial_rate",
          "type": "DOUBLE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "risk_source",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "claims_source",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        }
      ],
      "sql": "{{\n    config(\n        materialized='table',\n        tags=['mart', 'customers', 'risk', 'daily']\n    )\n}}\n\nWITH customer_risk_enriched AS (\n    SELECT * FROM {{ ref('int_customer_risk_enriched') }}\n),\n\n-- Reference to claims data from claims processing project\ncustomer_claims AS (\n    {% if execute %}\n        {% if adapter.get_relation(this.database, 'mart', 'mart_claims_analysis') %}\n            SELECT \n                customer_id,\n                COUNT(*) AS total_claims,\n                SUM(claim_amount) AS total_claim_amount,\n                SUM(settlement_amount_clean) AS total_settlement_amount,\n                AVG(days_to_settle) AS avg_days_to_settle,\n                SUM(CASE WHEN claim_status = 'SETTLED' THEN 1 ELSE 0 END) AS settled_claims_count,\n                SUM(CASE WHEN claim_status = 'DENIED' THEN 1 ELSE 0 END) AS denied_claims_count,\n                MAX(claim_date) AS most_recent_claim_date,\n                'claims_processing' AS _dbt_source_project\n            FROM {{ ref('claims_processing', 'mart_claims_analysis') }}\n            GROUP BY customer_id\n        {% else %}\n            SELECT\n                'CU0000' AS customer_id,\n                0 AS total_claims,\n                0 AS total_claim_amount,\n                0 AS total_settlement_amount,\n                0 AS avg_days_to_settle,\n                0 AS settled_claims_count,\n                0 AS denied_claims_count,\n                CAST('2000-01-01' AS DATE) AS most_recent_claim_date,\n                'claims_processing' AS _dbt_source_project\n            WHERE 1=0\n        {% endif %}\n    {% else %}\n        SELECT\n            'CU0000' AS customer_id,\n            0 AS total_claims,\n            0 AS total_claim_amount,\n            0 AS total_settlement_amount,\n            0 AS avg_days_to_settle,\n            0 AS settled_claims_count,\n            0 AS denied_claims_count,\n            CAST('2000-01-01' AS DATE) AS most_recent_claim_date,\n            'claims_processing' AS _dbt_source_project\n        WHERE 1=0\n    {% endif %}\n)\n\nSELECT\n    cr.customer_id,\n    cr.customer_name,\n    cr.email,\n    cr.city,\n    cr.state,\n    cr.age,\n    cr.months_as_customer,\n    cr.credit_score,\n    cr.credit_rating,\n    cr.claim_frequency,\n    cr.risk_score,\n    cr.age_adjusted_risk_score,\n    cr.previous_claims_count,\n    cr.risk_category,\n    cr.customer_segment,\n    -- Claims information from claims processing\n    cc.total_claims,\n    cc.total_claim_amount,\n    cc.total_settlement_amount,\n    cc.avg_days_to_settle,\n    cc.settled_claims_count,\n    cc.denied_claims_count,\n    cc.most_recent_claim_date,\n    -- Risk scoring with claim data\n    CASE\n        WHEN cc.total_claims > 0 THEN\n            cr.age_adjusted_risk_score * (1 + (cc.total_claims / 10))\n        ELSE\n            cr.age_adjusted_risk_score\n    END AS claims_adjusted_risk_score,\n    -- Denial ratio\n    CASE\n        WHEN cc.total_claims > 0 THEN \n            ROUND(cc.denied_claims_count / cc.total_claims * 100, 2)\n        ELSE 0\n    END AS claim_denial_rate,\n    -- Cross project attribution\n    cr._dbt_source_project AS risk_source,\n    cc._dbt_source_project AS claims_source,\n    -- Metadata\n    CURRENT_TIMESTAMP AS dbt_updated_at\nFROM customer_risk_enriched cr\nLEFT JOIN customer_claims cc ON cr.customer_id = cc.customer_id",
      "materialized": "table",
      "schema": "mart",
      "file_path": "models/mart/mart_customer_risk_profile.sql",
      "database": "insurance_data",
      "tags": [
        "mart",
        "customers",
        "risk",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.customer_risk.mart_customer_risk_profile",
        "metadata": {
          "type": "BASE TABLE",
          "schema": "customer_risk_mart",
          "name": "mart_customer_risk_profile",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `mart_customer_risk_profile` dbt model in the `customer_risk` project generates a customer-level risk profile. It consolidates customer information with risk-related metrics, including age, credit score, and claim history. This model enriches the `int_customer_risk_enriched` intermediate model and joins with claims data from the `claims_processing` project, if available. Key transformations include calculating risk scores, categorizing customers by risk, and aggregating claim statistics to provide a comprehensive view for customer segmentation and risk assessment."
    },
    {
      "id": "c4",
      "name": "int_customer_risk_enriched",
      "project": "customer_risk",
      "description": "The `int_customer_risk_enriched` dbt model enriches customer data with risk assessment information. It joins customer details from `stg_customers` with risk factors from `stg_risk_factors`. This model produces a comprehensive view of each customer, including demographic data, risk scores, and derived customer segments. Key transformations include adjusting risk scores based on age and defining customer segments based on tenure and risk category, providing valuable insights for customer risk analysis and segmentation. This intermediate model serves as a foundation for downstream analyses and reporting, facilitating a deeper understanding of customer risk profiles.",
      "columns": [
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for a customer, sourced from the `stg_customers` table.  The `customer_id` is used to link customer details with their corresponding risk factors within the `int_customer_risk_enriched` model, enabling a comprehensive view of each customer's profile. This allows for risk analysis and segmentation based on customer-specific data.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for a customer, sourced from the `stg_customers` table.  The `customer_id` is used to link customer details with their corresponding risk factors within the `int_customer_risk_enriched` model, enabling a comprehensive view of each customer's profile. This allows for risk analysis and segmentation based on customer-specific data."
        },
        {
          "name": "customer_name",
          "type": "VARCHAR",
          "description": "This column stores the customer's full name as a string.  It's sourced from the `stg_customers` table and provides a key identifier for each customer within the risk-enriched dataset. This allows for easy identification and linking of customer risk profiles to their respective names.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's full name as a string.  It's sourced from the `stg_customers` table and provides a key identifier for each customer within the risk-enriched dataset. This allows for easy identification and linking of customer risk profiles to their respective names."
        },
        {
          "name": "email",
          "type": "VARCHAR",
          "description": "This column stores the customer's email address. It's included to provide customer contact information within the enriched customer risk profile. This allows for direct communication and identification of customers within the risk analysis context.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's email address. It's included to provide customer contact information within the enriched customer risk profile. This allows for direct communication and identification of customers within the risk analysis context."
        },
        {
          "name": "phone",
          "type": "VARCHAR",
          "description": "This column stores the customer's phone number as a string. It's used to identify and contact customers within the `int_customer_risk_enriched` model, providing a key piece of customer contact information alongside other demographic details. This data is directly sourced from the `stg_customers` table.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's phone number as a string. It's used to identify and contact customers within the `int_customer_risk_enriched` model, providing a key piece of customer contact information alongside other demographic details. This data is directly sourced from the `stg_customers` table."
        },
        {
          "name": "address",
          "type": "VARCHAR",
          "description": "The `address` column stores the customer's street address as a string. This column is part of the customer's demographic information, providing location details for risk analysis and customer segmentation within the `int_customer_risk_enriched` model. It is sourced directly from the `stg_customers` table.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `address` column stores the customer's street address as a string. This column is part of the customer's demographic information, providing location details for risk analysis and customer segmentation within the `int_customer_risk_enriched` model. It is sourced directly from the `stg_customers` table."
        },
        {
          "name": "city",
          "type": "VARCHAR",
          "description": "This column stores the city associated with the customer's address, sourced from the `stg_customers` table. It provides customer location information, which is essential for demographic analysis and potentially for risk assessment based on geographical factors. This data is used to enrich the customer profile within the `int_customer_risk_enriched` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the city associated with the customer's address, sourced from the `stg_customers` table. It provides customer location information, which is essential for demographic analysis and potentially for risk assessment based on geographical factors. This data is used to enrich the customer profile within the `int_customer_risk_enriched` model."
        },
        {
          "name": "state",
          "type": "VARCHAR",
          "description": "The `state` column stores the customer's state of residence as a VARCHAR. This demographic information is sourced from the `stg_customers` table and is used to provide customer location details within the enriched customer risk profile. This column is essential for geographic analysis and segmentation.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `state` column stores the customer's state of residence as a VARCHAR. This demographic information is sourced from the `stg_customers` table and is used to provide customer location details within the enriched customer risk profile. This column is essential for geographic analysis and segmentation."
        },
        {
          "name": "zip_code",
          "type": "INTEGER",
          "description": "This column stores the customer's zip code as an integer. It's used to provide customer location information within the enriched customer risk data. This data is likely used for geographic analysis or segmentation.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's zip code as an integer. It's used to provide customer location information within the enriched customer risk data. This data is likely used for geographic analysis or segmentation."
        },
        {
          "name": "date_of_birth",
          "type": "DATE",
          "description": "This column stores the customer's date of birth as a DATE. It's used to calculate the customer's age, which is then used in the `age_adjusted_risk_score` calculation, potentially increasing the risk score for younger or older customers. This information is crucial for understanding customer demographics and their impact on risk assessment.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's date of birth as a DATE. It's used to calculate the customer's age, which is then used in the `age_adjusted_risk_score` calculation, potentially increasing the risk score for younger or older customers. This information is crucial for understanding customer demographics and their impact on risk assessment."
        },
        {
          "name": "gender",
          "type": "VARCHAR",
          "description": "This column stores the customer's gender as a string value.  It's included in the `int_customer_risk_enriched` model to provide demographic information alongside risk assessments, enabling a more comprehensive customer profile. This data is used for customer segmentation and risk analysis.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's gender as a string value.  It's included in the `int_customer_risk_enriched` model to provide demographic information alongside risk assessments, enabling a more comprehensive customer profile. This data is used for customer segmentation and risk analysis."
        },
        {
          "name": "joining_date",
          "type": "DATE",
          "description": "`joining_date`: This column stores the date when the customer initially joined the company. It's used to calculate the customer's tenure (`months_as_customer`) and is a key factor in determining customer segments. This information helps in understanding customer loyalty and behavior over time.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`joining_date`: This column stores the date when the customer initially joined the company. It's used to calculate the customer's tenure (`months_as_customer`) and is a key factor in determining customer segments. This information helps in understanding customer loyalty and behavior over time."
        },
        {
          "name": "age",
          "type": "BIGINT",
          "description": "This column stores the customer's age as a whole number (BIGINT).  It's used in the model to adjust the `risk_score`; customers under 25 or over 70 have their risk scores multiplied by 1.2. This adjustment reflects the business's understanding of age-related risk factors.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's age as a whole number (BIGINT).  It's used in the model to adjust the `risk_score`; customers under 25 or over 70 have their risk scores multiplied by 1.2. This adjustment reflects the business's understanding of age-related risk factors."
        },
        {
          "name": "months_as_customer",
          "type": "BIGINT",
          "description": "This column, `months_as_customer`, stores the number of months a customer has been active. It's used in the `int_customer_risk_enriched` model to calculate customer segments, such as \"PREMIUM,\" \"PREFERRED,\" \"STANDARD,\" and \"NEW,\" based on tenure and risk category. This helps in understanding customer loyalty and risk profiles.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `months_as_customer`, stores the number of months a customer has been active. It's used in the `int_customer_risk_enriched` model to calculate customer segments, such as \"PREMIUM,\" \"PREFERRED,\" \"STANDARD,\" and \"NEW,\" based on tenure and risk category. This helps in understanding customer loyalty and risk profiles."
        },
        {
          "name": "risk_id",
          "type": "VARCHAR",
          "description": "`risk_id`: This column stores a unique identifier for the risk assessment associated with a customer. It links customer data to specific risk assessments from the `stg_risk_factors` source, enabling analysis of risk factors and their impact on customer profiles.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "`risk_id`: This column stores a unique identifier for the risk assessment associated with a customer. It links customer data to specific risk assessments from the `stg_risk_factors` source, enabling analysis of risk factors and their impact on customer profiles."
        },
        {
          "name": "assessment_date",
          "type": "DATE",
          "description": "`assessment_date` stores the date when the customer's risk assessment was performed. This date is crucial for understanding the recency of the risk evaluation and allows for tracking changes in risk profiles over time within the `int_customer_risk_enriched` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`assessment_date` stores the date when the customer's risk assessment was performed. This date is crucial for understanding the recency of the risk evaluation and allows for tracking changes in risk profiles over time within the `int_customer_risk_enriched` model."
        },
        {
          "name": "credit_score",
          "type": "INTEGER",
          "description": "This column, `credit_score`, stores an integer representing the customer's credit score.  It's sourced from the `stg_risk_factors` table and is used to assess a customer's creditworthiness within the `int_customer_risk_enriched` model. This score is a key input for risk analysis and customer segmentation.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `credit_score`, stores an integer representing the customer's credit score.  It's sourced from the `stg_risk_factors` table and is used to assess a customer's creditworthiness within the `int_customer_risk_enriched` model. This score is a key input for risk analysis and customer segmentation."
        },
        {
          "name": "credit_rating",
          "type": "VARCHAR",
          "description": "The `credit_rating` column stores a customer's creditworthiness as a string value, likely representing a rating like \"A\", \"B\", or \"C\". This rating, derived from risk factors, provides a quick assessment of a customer's credit risk within the `int_customer_risk_enriched` model, aiding in customer segmentation and risk analysis.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `credit_rating` column stores a customer's creditworthiness as a string value, likely representing a rating like \"A\", \"B\", or \"C\". This rating, derived from risk factors, provides a quick assessment of a customer's credit risk within the `int_customer_risk_enriched` model, aiding in customer segmentation and risk analysis."
        },
        {
          "name": "claim_frequency",
          "type": "VARCHAR",
          "description": "This column, `claim_frequency`, stores a string representation of the frequency of claims filed by a customer.  Within the `int_customer_risk_enriched` model, this data likely contributes to the overall customer risk assessment, potentially influencing risk scores or customer segmentation.  The `VARCHAR` data type suggests the values are likely categorical, such as \"Low\", \"Medium\", or \"High\".",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `claim_frequency`, stores a string representation of the frequency of claims filed by a customer.  Within the `int_customer_risk_enriched` model, this data likely contributes to the overall customer risk assessment, potentially influencing risk scores or customer segmentation.  The `VARCHAR` data type suggests the values are likely categorical, such as \"Low\", \"Medium\", or \"High\"."
        },
        {
          "name": "risk_score",
          "type": "DOUBLE",
          "description": "The `risk_score` column in the `int_customer_risk_enriched` model stores a numerical value representing the customer's inherent risk level, derived from `stg_risk_factors`. This score is a key component of the customer risk assessment, used in conjunction with other factors to calculate an `age_adjusted_risk_score` and ultimately define customer segments.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `risk_score` column in the `int_customer_risk_enriched` model stores a numerical value representing the customer's inherent risk level, derived from `stg_risk_factors`. This score is a key component of the customer risk assessment, used in conjunction with other factors to calculate an `age_adjusted_risk_score` and ultimately define customer segments."
        },
        {
          "name": "previous_claims_count",
          "type": "INTEGER",
          "description": "`previous_claims_count` stores the total number of insurance claims a customer has filed prior to the current assessment. This integer value is a key risk indicator within the `int_customer_risk_enriched` model, contributing to the overall risk assessment and customer segmentation by reflecting a customer's historical claim behavior.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`previous_claims_count` stores the total number of insurance claims a customer has filed prior to the current assessment. This integer value is a key risk indicator within the `int_customer_risk_enriched` model, contributing to the overall risk assessment and customer segmentation by reflecting a customer's historical claim behavior."
        },
        {
          "name": "risk_category",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "days_since_last_assessment",
          "type": "BIGINT",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "age_adjusted_risk_score",
          "type": "DOUBLE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "customer_segment",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "_dbt_source_project",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['intermediate', 'customers', 'risk', 'daily']\n    )\n}}\n\nWITH customers AS (\n    SELECT * FROM {{ ref('stg_customers') }}\n),\n\nrisk_factors AS (\n    SELECT * FROM {{ ref('stg_risk_factors') }}\n)\n\nSELECT\n    c.customer_id,\n    c.customer_name,\n    c.email,\n    c.phone,\n    c.address,\n    c.city,\n    c.state,\n    c.zip_code,\n    c.date_of_birth,\n    c.gender,\n    c.joining_date,\n    c.age,\n    c.months_as_customer,\n    -- Risk information\n    r.risk_id,\n    r.assessment_date,\n    r.credit_score,\n    r.credit_rating,\n    r.claim_frequency,\n    r.risk_score,\n    r.previous_claims_count,\n    r.risk_category,\n    r.days_since_last_assessment,\n    -- Risk factor adjustments\n    CASE\n        WHEN c.age < 25 OR c.age > 70 THEN r.risk_score * 1.2\n        ELSE r.risk_score\n    END AS age_adjusted_risk_score,\n    -- Customer segments\n    CASE\n        WHEN c.months_as_customer >= 36 AND r.risk_category = 'LOW_RISK' THEN 'PREMIUM'\n        WHEN c.months_as_customer >= 24 AND r.risk_category IN ('LOW_RISK', 'MEDIUM_RISK') THEN 'PREFERRED'\n        WHEN c.months_as_customer >= 12 THEN 'STANDARD'\n        ELSE 'NEW'\n    END AS customer_segment,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    c._dbt_source_project\nFROM customers c\nLEFT JOIN risk_factors r ON c.customer_id = r.customer_id",
      "materialized": "view",
      "schema": "intermediate",
      "file_path": "models/intermediate/int_customer_risk_enriched.sql",
      "database": "insurance_data",
      "tags": [
        "intermediate",
        "customers",
        "risk",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.customer_risk.int_customer_risk_enriched",
        "metadata": {
          "type": "VIEW",
          "schema": "customer_risk_intermediate",
          "name": "int_customer_risk_enriched",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `int_customer_risk_enriched` dbt model enriches customer data with risk assessment information. It joins customer details from `stg_customers` with risk factors from `stg_risk_factors`. This model produces a comprehensive view of each customer, including demographic data, risk scores, and derived customer segments. Key transformations include adjusting risk scores based on age and defining customer segments based on tenure and risk category, providing valuable insights for customer risk analysis and segmentation. This intermediate model serves as a foundation for downstream analyses and reporting, facilitating a deeper understanding of customer risk profiles."
    },
    {
      "id": "p1",
      "name": "stg_policies",
      "project": "policy_management",
      "description": "The `stg_policies` dbt model in the `policy_management` project serves as a staging layer for policy data. It transforms the raw `policies` data by casting date fields, deriving new columns, and adding metadata. This model produces a cleaned and enriched dataset containing key policy attributes, including calculated fields like `policy_term_days`, `effective_status`, and `coverage_premium_ratio`. It plays a crucial role in the data pipeline by preparing the raw policy data for downstream analysis and reporting, making it easier to consume and analyze.",
      "columns": [
        {
          "name": "policy_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for each insurance policy.  The `policy_id` is used to uniquely identify and track individual policies within the `stg_policies` staging model, facilitating data transformation and analysis.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for each insurance policy.  The `policy_id` is used to uniquely identify and track individual policies within the `stg_policies` staging model, facilitating data transformation and analysis."
        },
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "The `customer_id` column in the `stg_policies` table stores a unique identifier for the customer associated with the policy. This VARCHAR field links each policy record to a specific customer, enabling analysis of policy data by customer. This is a key field for joining with customer tables and understanding customer-level policy information.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "The `customer_id` column in the `stg_policies` table stores a unique identifier for the customer associated with the policy. This VARCHAR field links each policy record to a specific customer, enabling analysis of policy data by customer. This is a key field for joining with customer tables and understanding customer-level policy information."
        },
        {
          "name": "policy_type",
          "type": "VARCHAR",
          "description": "The `policy_type` column in the `stg_policies` table stores the type of insurance policy (e.g., \"Auto\", \"Home\", \"Life\"). This column categorizes policies, enabling filtering and aggregation by policy type for analysis and reporting within the policy management system. The data type is VARCHAR, indicating the policy type is stored as a text string.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `policy_type` column in the `stg_policies` table stores the type of insurance policy (e.g., \"Auto\", \"Home\", \"Life\"). This column categorizes policies, enabling filtering and aggregation by policy type for analysis and reporting within the policy management system. The data type is VARCHAR, indicating the policy type is stored as a text string."
        },
        {
          "name": "start_date",
          "type": "DATE",
          "description": "The `start_date` column in the `stg_policies` table stores the policy's effective start date, formatted as a date. This date is crucial for calculating the `policy_term_days` and determining the `effective_status` of the policy, providing context for the policy's lifecycle. This column is derived from the raw `policies` data and is cast to a DATE data type.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `start_date` column in the `stg_policies` table stores the policy's effective start date, formatted as a date. This date is crucial for calculating the `policy_term_days` and determining the `effective_status` of the policy, providing context for the policy's lifecycle. This column is derived from the raw `policies` data and is cast to a DATE data type."
        },
        {
          "name": "end_date",
          "type": "DATE",
          "description": "This column stores the end date of an insurance policy. It's used to calculate the `policy_term_days` and determine the `effective_status` of the policy, indicating whether it's expired, active, or in the future. The `end_date` is crucial for understanding the policy's duration and current validity.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the end date of an insurance policy. It's used to calculate the `policy_term_days` and determine the `effective_status` of the policy, indicating whether it's expired, active, or in the future. The `end_date` is crucial for understanding the policy's duration and current validity."
        },
        {
          "name": "premium_amount",
          "type": "DOUBLE",
          "description": "This column, `premium_amount`, stores the policy's premium value as a double-precision number. It represents the monetary value paid for the insurance policy and is used in calculations like the `coverage_premium_ratio` within the `stg_policies` model. This value is crucial for understanding the financial aspects of each policy.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `premium_amount`, stores the policy's premium value as a double-precision number. It represents the monetary value paid for the insurance policy and is used in calculations like the `coverage_premium_ratio` within the `stg_policies` model. This value is crucial for understanding the financial aspects of each policy."
        },
        {
          "name": "coverage_amount",
          "type": "INTEGER",
          "description": "The `coverage_amount` column in the `stg_policies` table stores the integer value representing the monetary coverage limit associated with an insurance policy. This value is a key policy attribute used in calculating the `coverage_premium_ratio`, providing insight into the relationship between the coverage provided and the premium paid.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `coverage_amount` column in the `stg_policies` table stores the integer value representing the monetary coverage limit associated with an insurance policy. This value is a key policy attribute used in calculating the `coverage_premium_ratio`, providing insight into the relationship between the coverage provided and the premium paid."
        },
        {
          "name": "status",
          "type": "VARCHAR",
          "description": "The `status` column in the `stg_policies` table stores the current status of a policy, likely reflecting its state as provided in the raw data. This column is used in conjunction with `start_date` and `end_date` to determine the `effective_status` of the policy, indicating whether it's active, expired, or in the future.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `status` column in the `stg_policies` table stores the current status of a policy, likely reflecting its state as provided in the raw data. This column is used in conjunction with `start_date` and `end_date` to determine the `effective_status` of the policy, indicating whether it's active, expired, or in the future."
        },
        {
          "name": "agent_id",
          "type": "VARCHAR",
          "description": "This column, `agent_id`, stores the unique identifier for the agent associated with the policy.  It's a VARCHAR field used to link each policy in the `stg_policies` staging model to the responsible agent. This allows for analysis of policy performance and other metrics by agent.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column, `agent_id`, stores the unique identifier for the agent associated with the policy.  It's a VARCHAR field used to link each policy in the `stg_policies` staging model to the responsible agent. This allows for analysis of policy performance and other metrics by agent."
        },
        {
          "name": "policy_number",
          "type": "VARCHAR",
          "description": "The `policy_number` column stores the unique identifier assigned to each insurance policy. This VARCHAR field is essential for identifying and linking policy records within the `stg_policies` staging model, enabling data integrity and facilitating joins with other related tables.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `policy_number` column stores the unique identifier assigned to each insurance policy. This VARCHAR field is essential for identifying and linking policy records within the `stg_policies` staging model, enabling data integrity and facilitating joins with other related tables."
        },
        {
          "name": "policy_term_days",
          "type": "BIGINT",
          "description": "`policy_term_days` stores the number of days the policy was active, calculated as the difference between the `start_date` and `end_date`. This column is essential for understanding the duration of each policy and is used in the `effective_status` calculation. This value is a BIGINT representing the number of days.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`policy_term_days` stores the number of days the policy was active, calculated as the difference between the `start_date` and `end_date`. This column is essential for understanding the duration of each policy and is used in the `effective_status` calculation. This value is a BIGINT representing the number of days."
        },
        {
          "name": "effective_status",
          "type": "VARCHAR",
          "description": "The `effective_status` column in the `stg_policies` table indicates the current status of a policy based on its `start_date`. It contains values like 'FUTURE' if the policy start date is in the future, otherwise 'UNKNOWN'. This column helps analysts understand the current state of policies relative to the current date.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `effective_status` column in the `stg_policies` table indicates the current status of a policy based on its `start_date`. It contains values like 'FUTURE' if the policy start date is in the future, otherwise 'UNKNOWN'. This column helps analysts understand the current state of policies relative to the current date."
        },
        {
          "name": "coverage_premium_ratio",
          "type": "DOUBLE",
          "description": "The `coverage_premium_ratio` column stores the ratio of coverage amount to premium amount, calculated as coverage amount divided by premium amount, rounded to two decimal places. This ratio provides a measure of the value of coverage relative to the premium paid, allowing for analysis of policy pricing and risk assessment within the `stg_policies` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `coverage_premium_ratio` column stores the ratio of coverage amount to premium amount, calculated as coverage amount divided by premium amount, rounded to two decimal places. This ratio provides a measure of the value of coverage relative to the premium paid, allowing for analysis of policy pricing and risk assessment within the `stg_policies` model."
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "`dbt_updated_at` stores the timestamp when the `stg_policies` model was last updated. This column provides a record of the model's refresh time, aiding in data lineage and ensuring analysts can track the freshness of the policy data within the staging layer.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`dbt_updated_at` stores the timestamp when the `stg_policies` model was last updated. This column provides a record of the model's refresh time, aiding in data lineage and ensuring analysts can track the freshness of the policy data within the staging layer."
        },
        {
          "name": "_dbt_source_project",
          "type": "VARCHAR",
          "description": "This column, `_dbt_source_project`, stores the name of the dbt project from which the source data originates, in this case, 'policy_management'. This metadata field helps track the origin of the policy data within the data pipeline, enabling lineage tracking and facilitating debugging.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `_dbt_source_project`, stores the name of the dbt project from which the source data originates, in this case, 'policy_management'. This metadata field helps track the origin of the policy data within the data pipeline, enabling lineage tracking and facilitating debugging."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'policies', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('policies') }}\n)\n\nSELECT\n    policy_id,\n    customer_id,\n    policy_type,\n    CAST(start_date AS DATE) AS start_date,\n    CAST(end_date AS DATE) AS end_date,\n    premium_amount,\n    coverage_amount,\n    status,\n    agent_id,\n    policy_number,\n    -- Derived fields\n    DATEDIFF('day', start_date, end_date) AS policy_term_days,\n    CASE\n        WHEN CURRENT_DATE() > end_date THEN 'EXPIRED'\n        WHEN CURRENT_DATE() BETWEEN start_date AND end_date THEN status\n        WHEN CURRENT_DATE() < start_date THEN 'FUTURE'\n        ELSE 'UNKNOWN'\n    END AS effective_status,\n    ROUND(coverage_amount / premium_amount, 2) AS coverage_premium_ratio,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'policy_management' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_policies.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "policies",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.policy_management.stg_policies",
        "metadata": {
          "type": "VIEW",
          "schema": "policy_management_staging",
          "name": "stg_policies",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `stg_policies` dbt model in the `policy_management` project serves as a staging layer for policy data. It transforms the raw `policies` data by casting date fields, deriving new columns, and adding metadata. This model produces a cleaned and enriched dataset containing key policy attributes, including calculated fields like `policy_term_days`, `effective_status`, and `coverage_premium_ratio`. It plays a crucial role in the data pipeline by preparing the raw policy data for downstream analysis and reporting, making it easier to consume and analyze."
    },
    {
      "id": "p2",
      "name": "stg_agents",
      "project": "policy_management",
      "description": "The `stg_agents` dbt model in the `policy_management` project stages agent data from the `agents` source. It selects and transforms agent information, including agent ID, name, email, office location, years of experience, specialization, and active status.  This model derives the `experience_level` based on `years_experience` and adds metadata fields like `dbt_updated_at` and `_dbt_source_project`.  This staging model prepares the agent data for downstream analysis and reporting, providing a standardized and enriched view of the agent information.",
      "columns": [
        {
          "name": "agent_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for each agent, sourced from the `agents` table.  The `agent_id` is used to uniquely identify and track individual agents within the `stg_agents` model, enabling consistent referencing of agent records for analysis and reporting.  The data type is `VARCHAR`, indicating the ID is stored as a string.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for each agent, sourced from the `agents` table.  The `agent_id` is used to uniquely identify and track individual agents within the `stg_agents` model, enabling consistent referencing of agent records for analysis and reporting.  The data type is `VARCHAR`, indicating the ID is stored as a string."
        },
        {
          "name": "agent_name",
          "type": "VARCHAR",
          "description": "This column, `agent_name`, stores the full name of the agent as a string.  It's used to identify and label each agent within the `stg_agents` model, providing a human-readable identifier for reporting and analysis. This column is sourced directly from the `agents` source table.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `agent_name`, stores the full name of the agent as a string.  It's used to identify and label each agent within the `stg_agents` model, providing a human-readable identifier for reporting and analysis. This column is sourced directly from the `agents` source table."
        },
        {
          "name": "agent_email",
          "type": "VARCHAR",
          "description": "This column, `agent_email`, stores the email address of the agent.  Within the `stg_agents` model, this column directly reflects the agent's email from the source `agents` table, providing a key identifier for each agent.  This allows for communication and contact information to be readily available for reporting and analysis.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `agent_email`, stores the email address of the agent.  Within the `stg_agents` model, this column directly reflects the agent's email from the source `agents` table, providing a key identifier for each agent.  This allows for communication and contact information to be readily available for reporting and analysis."
        },
        {
          "name": "office_location",
          "type": "VARCHAR",
          "description": "The `office_location` column stores the physical location where the agent is based, represented as a text string. This column is crucial for understanding agent distribution and potentially for regional analysis within the `stg_agents` model. The data type is VARCHAR, indicating the location is stored as a text string.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `office_location` column stores the physical location where the agent is based, represented as a text string. This column is crucial for understanding agent distribution and potentially for regional analysis within the `stg_agents` model. The data type is VARCHAR, indicating the location is stored as a text string."
        },
        {
          "name": "years_experience",
          "type": "INTEGER",
          "description": "This column stores the agent's total years of professional experience as an integer.  It's used to determine the agent's `experience_level` within the `stg_agents` model, categorizing agents as JUNIOR, MID, or SENIOR based on their experience. This information helps in understanding agent seniority and potentially informs performance analysis.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the agent's total years of professional experience as an integer.  It's used to determine the agent's `experience_level` within the `stg_agents` model, categorizing agents as JUNIOR, MID, or SENIOR based on their experience. This information helps in understanding agent seniority and potentially informs performance analysis."
        },
        {
          "name": "specialization",
          "type": "VARCHAR",
          "description": "The `specialization` column in the `stg_agents` table stores the area of expertise for each agent, such as \"Property\" or \"Life\". This VARCHAR column captures the agent's primary focus within the insurance domain, providing a key attribute for agent categorization and analysis. This information is sourced directly from the `agents` source table.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `specialization` column in the `stg_agents` table stores the area of expertise for each agent, such as \"Property\" or \"Life\". This VARCHAR column captures the agent's primary focus within the insurance domain, providing a key attribute for agent categorization and analysis. This information is sourced directly from the `agents` source table."
        },
        {
          "name": "active",
          "type": "BOOLEAN",
          "description": "The `active` column indicates whether an agent is currently active, storing a boolean value (TRUE/FALSE). This column reflects the agent's operational status within the company. This information is crucial for identifying active agents for various reporting and analytical purposes.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `active` column indicates whether an agent is currently active, storing a boolean value (TRUE/FALSE). This column reflects the agent's operational status within the company. This information is crucial for identifying active agents for various reporting and analytical purposes."
        },
        {
          "name": "experience_level",
          "type": "VARCHAR",
          "description": "This column, `experience_level`, categorizes agents based on their years of experience. It assigns 'MID' to agents with 5 or more years of experience and 'JUNIOR' to those with less. This categorization helps in understanding the agent's seniority level within the organization.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `experience_level`, categorizes agents based on their years of experience. It assigns 'MID' to agents with 5 or more years of experience and 'JUNIOR' to those with less. This categorization helps in understanding the agent's seniority level within the organization."
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "`dbt_updated_at` stores the timestamp indicating when the agent data in this staging model was last updated. This column, populated using `CURRENT_TIMESTAMP`, provides a record of the data's freshness and can be used for tracking data lineage and identifying the latest version of the agent information.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`dbt_updated_at` stores the timestamp indicating when the agent data in this staging model was last updated. This column, populated using `CURRENT_TIMESTAMP`, provides a record of the data's freshness and can be used for tracking data lineage and identifying the latest version of the agent information."
        },
        {
          "name": "_dbt_source_project",
          "type": "VARCHAR",
          "description": "This column, `_dbt_source_project`, stores the name of the dbt project from which the data originated, which is 'policy_management'. This metadata field helps track the source of the agent data within the `stg_agents` model, facilitating lineage and debugging.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `_dbt_source_project`, stores the name of the dbt project from which the data originated, which is 'policy_management'. This metadata field helps track the source of the agent data within the `stg_agents` model, facilitating lineage and debugging."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'agents', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('agents') }}\n)\n\nSELECT\n    agent_id,\n    agent_name,\n    agent_email,\n    office_location,\n    years_experience,\n    specialization,\n    active,\n    -- Derived fields\n    CASE \n        WHEN years_experience >= 10 THEN 'SENIOR'\n        WHEN years_experience >= 5 THEN 'MID'\n        ELSE 'JUNIOR'\n    END AS experience_level,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'policy_management' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_agents.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "agents",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.policy_management.stg_agents",
        "metadata": {
          "type": "VIEW",
          "schema": "policy_management_staging",
          "name": "stg_agents",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `stg_agents` dbt model in the `policy_management` project stages agent data from the `agents` source. It selects and transforms agent information, including agent ID, name, email, office location, years of experience, specialization, and active status.  This model derives the `experience_level` based on `years_experience` and adds metadata fields like `dbt_updated_at` and `_dbt_source_project`.  This staging model prepares the agent data for downstream analysis and reporting, providing a standardized and enriched view of the agent information."
    },
    {
      "id": "p3",
      "name": "int_policies_enriched",
      "project": "policy_management",
      "description": "The `int_policies_enriched` dbt model in the `policy_management` project enriches policy data by joining it with agent information. It produces a view containing detailed policy information, including key attributes like policy type, premium, and coverage, alongside agent details such as name, office location, and specialization. This intermediate model serves as a crucial step in the data pipeline, transforming raw policy data (`stg_policies`) and agent data (`stg_agents`) into a more comprehensive and usable format. Key transformations include calculating a specialization alignment flag based on policy type and agent specialization, and adding metadata fields. This enriched view is designed to facilitate downstream analysis and reporting on policy performance and agent effectiveness.",
      "columns": [
        {
          "name": "policy_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for each insurance policy, represented as a string.  It serves as the primary key for the `int_policies_enriched` model, enabling joins with other tables and uniquely identifying each policy record. This ID is crucial for tracking and analyzing individual policy details and performance.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for each insurance policy, represented as a string.  It serves as the primary key for the `int_policies_enriched` model, enabling joins with other tables and uniquely identifying each policy record. This ID is crucial for tracking and analyzing individual policy details and performance."
        },
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "This column stores the customer's unique identifier, represented as a string.  It links policies in the `int_policies_enriched` model to specific customers, enabling analysis of policy performance at the customer level.  This VARCHAR field allows for flexibility in customer ID formats.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the customer's unique identifier, represented as a string.  It links policies in the `int_policies_enriched` model to specific customers, enabling analysis of policy performance at the customer level.  This VARCHAR field allows for flexibility in customer ID formats."
        },
        {
          "name": "policy_type",
          "type": "VARCHAR",
          "description": "The `policy_type` column in the `int_policies_enriched` table stores the type of insurance policy, such as \"Home,\" \"Auto,\" or \"Life.\" This column is crucial for identifying policy categories and is used in the model to determine agent specialization alignment, indicating whether an agent's specialization matches the policy type.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `policy_type` column in the `int_policies_enriched` table stores the type of insurance policy, such as \"Home,\" \"Auto,\" or \"Life.\" This column is crucial for identifying policy categories and is used in the model to determine agent specialization alignment, indicating whether an agent's specialization matches the policy type."
        },
        {
          "name": "start_date",
          "type": "DATE",
          "description": "`start_date`: This column stores the date when the policy coverage begins. It's a key attribute for understanding the policy lifecycle and is used to track the period of coverage.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`start_date`: This column stores the date when the policy coverage begins. It's a key attribute for understanding the policy lifecycle and is used to track the period of coverage."
        },
        {
          "name": "end_date",
          "type": "DATE",
          "description": "The `end_date` column stores the date when the policy coverage expires. This date is crucial for understanding the policy's duration and is used in conjunction with the `start_date` to determine the policy term. This information is essential for analyzing policy lifecycles and calculating metrics related to policy renewals and expirations.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `end_date` column stores the date when the policy coverage expires. This date is crucial for understanding the policy's duration and is used in conjunction with the `start_date` to determine the policy term. This information is essential for analyzing policy lifecycles and calculating metrics related to policy renewals and expirations."
        },
        {
          "name": "premium_amount",
          "type": "DOUBLE",
          "description": "The `premium_amount` column in the `int_policies_enriched` view stores the monetary value of the premium for each policy. This column is crucial for analyzing policy revenue and performance. The data type is DOUBLE, indicating it can store precise premium amounts, which is essential for financial calculations.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `premium_amount` column in the `int_policies_enriched` view stores the monetary value of the premium for each policy. This column is crucial for analyzing policy revenue and performance. The data type is DOUBLE, indicating it can store precise premium amounts, which is essential for financial calculations."
        },
        {
          "name": "coverage_amount",
          "type": "INTEGER",
          "description": "This column, `coverage_amount`, stores the integer value representing the coverage amount for an insurance policy.  It reflects the financial protection provided by the policy, a key attribute for understanding the scope of coverage. This value is directly sourced from the `stg_policies` table and is essential for analyzing policy characteristics and risk exposure.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `coverage_amount`, stores the integer value representing the coverage amount for an insurance policy.  It reflects the financial protection provided by the policy, a key attribute for understanding the scope of coverage. This value is directly sourced from the `stg_policies` table and is essential for analyzing policy characteristics and risk exposure."
        },
        {
          "name": "status",
          "type": "VARCHAR",
          "description": "The `status` column in the `int_policies_enriched` table stores the current status of the policy, such as \"Active\" or \"Cancelled\". This column is crucial for filtering and analyzing policy data based on its lifecycle stage. The specific values and their meanings should be documented in the data dictionary.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `status` column in the `int_policies_enriched` table stores the current status of the policy, such as \"Active\" or \"Cancelled\". This column is crucial for filtering and analyzing policy data based on its lifecycle stage. The specific values and their meanings should be documented in the data dictionary."
        },
        {
          "name": "agent_id",
          "type": "VARCHAR",
          "description": "This column, `agent_id`, stores the unique identifier for the agent associated with the policy.  It's used to link policy information to agent details within the `int_policies_enriched` model, enabling analysis of agent performance and policy management. This VARCHAR column facilitates joining policy data with agent data from the `stg_agents` table.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column, `agent_id`, stores the unique identifier for the agent associated with the policy.  It's used to link policy information to agent details within the `int_policies_enriched` model, enabling analysis of agent performance and policy management. This VARCHAR column facilitates joining policy data with agent data from the `stg_agents` table."
        },
        {
          "name": "policy_number",
          "type": "VARCHAR",
          "description": "The `policy_number` column stores the unique identifier assigned to each insurance policy. This VARCHAR field is crucial for linking policy records within the `int_policies_enriched` model, enabling the aggregation of policy details with agent information for comprehensive analysis of policy performance and agent effectiveness.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `policy_number` column stores the unique identifier assigned to each insurance policy. This VARCHAR field is crucial for linking policy records within the `int_policies_enriched` model, enabling the aggregation of policy details with agent information for comprehensive analysis of policy performance and agent effectiveness."
        },
        {
          "name": "policy_term_days",
          "type": "BIGINT",
          "description": "This column, `policy_term_days`, stores the policy term duration in days as a large integer. It represents the length of time the policy is active, a key attribute for understanding policy lifecycles and calculating metrics like premium per day. This data is essential for analyzing policy performance and understanding the duration of coverage provided.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `policy_term_days`, stores the policy term duration in days as a large integer. It represents the length of time the policy is active, a key attribute for understanding policy lifecycles and calculating metrics like premium per day. This data is essential for analyzing policy performance and understanding the duration of coverage provided."
        },
        {
          "name": "effective_status",
          "type": "VARCHAR",
          "description": "The `effective_status` column in the `int_policies_enriched` table stores the current status of a policy, such as \"Active\" or \"Cancelled\". This column is crucial for understanding the current state of a policy and filtering for active policies when analyzing policy performance. The specific values likely come from the source policy data and are used to determine the policy's validity.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `effective_status` column in the `int_policies_enriched` table stores the current status of a policy, such as \"Active\" or \"Cancelled\". This column is crucial for understanding the current state of a policy and filtering for active policies when analyzing policy performance. The specific values likely come from the source policy data and are used to determine the policy's validity."
        },
        {
          "name": "coverage_premium_ratio",
          "type": "DOUBLE",
          "description": "The `coverage_premium_ratio` column stores the ratio of coverage to premium for each policy, calculated as a `DOUBLE`. This ratio is a key metric within the `int_policies_enriched` model, providing insights into the relationship between the level of coverage and the associated premium cost for each policy. This allows for analysis of pricing strategies and risk assessment.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `coverage_premium_ratio` column stores the ratio of coverage to premium for each policy, calculated as a `DOUBLE`. This ratio is a key metric within the `int_policies_enriched` model, providing insights into the relationship between the level of coverage and the associated premium cost for each policy. This allows for analysis of pricing strategies and risk assessment."
        },
        {
          "name": "agent_name",
          "type": "VARCHAR",
          "description": "This column, `agent_name`, stores the full name of the agent associated with the policy. It's included in the `int_policies_enriched` model to provide agent-level context alongside policy details, enabling analysis of agent performance and policy sales. This allows for linking policies to the specific agent responsible for them.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `agent_name`, stores the full name of the agent associated with the policy. It's included in the `int_policies_enriched` model to provide agent-level context alongside policy details, enabling analysis of agent performance and policy sales. This allows for linking policies to the specific agent responsible for them."
        },
        {
          "name": "office_location",
          "type": "VARCHAR",
          "description": "This column stores the physical location of the agent's office.  It's used to provide context for policy data, allowing for analysis of policy performance by office location.  This information is sourced from the `stg_agents` table.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the physical location of the agent's office.  It's used to provide context for policy data, allowing for analysis of policy performance by office location.  This information is sourced from the `stg_agents` table."
        },
        {
          "name": "agent_specialization",
          "type": "VARCHAR",
          "description": "This column, `agent_specialization`, stores the area of expertise for the agent associated with the policy. It's used to provide agent-specific details within the enriched policy data, enabling analysis of policy performance based on agent specialization. This information is crucial for understanding agent effectiveness and aligning policies with appropriate agent expertise.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `agent_specialization`, stores the area of expertise for the agent associated with the policy. It's used to provide agent-specific details within the enriched policy data, enabling analysis of policy performance based on agent specialization. This information is crucial for understanding agent effectiveness and aligning policies with appropriate agent expertise."
        },
        {
          "name": "agent_experience",
          "type": "VARCHAR",
          "description": "`agent_experience` stores the agent's experience level as a string value. This column provides information about the agent's tenure or expertise, which is useful for analyzing the relationship between agent experience and policy performance. This information is sourced from the `stg_agents` table.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`agent_experience` stores the agent's experience level as a string value. This column provides information about the agent's tenure or expertise, which is useful for analyzing the relationship between agent experience and policy performance. This information is sourced from the `stg_agents` table."
        },
        {
          "name": "specialization_alignment",
          "type": "VARCHAR",
          "description": "This column indicates whether an agent's specialization aligns with the policy type, storing either 'ALIGNED' or 'MISALIGNED'. It's calculated by comparing the agent's specialization to the policy type, providing a key metric for understanding agent performance and policy-agent fit within the `int_policies_enriched` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column indicates whether an agent's specialization aligns with the policy type, storing either 'ALIGNED' or 'MISALIGNED'. It's calculated by comparing the agent's specialization to the policy type, providing a key metric for understanding agent performance and policy-agent fit within the `int_policies_enriched` model."
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "`dbt_updated_at` stores the timestamp indicating when the policy data was last updated within the `int_policies_enriched` model. This timestamp is inherited from the source policy data and is crucial for tracking data freshness and identifying the most recent policy information. It helps data analysts understand the recency of the data and manage data pipeline dependencies.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`dbt_updated_at` stores the timestamp indicating when the policy data was last updated within the `int_policies_enriched` model. This timestamp is inherited from the source policy data and is crucial for tracking data freshness and identifying the most recent policy information. It helps data analysts understand the recency of the data and manage data pipeline dependencies."
        },
        {
          "name": "_dbt_source_project",
          "type": "VARCHAR",
          "description": "This column, `_dbt_source_project`, stores the name of the dbt project from which the policy data originated. It serves as a metadata field, allowing for tracking the source of the data within the `int_policies_enriched` model. This is useful for lineage and debugging purposes, indicating the specific dbt project responsible for the initial policy data.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `_dbt_source_project`, stores the name of the dbt project from which the policy data originated. It serves as a metadata field, allowing for tracking the source of the data within the `int_policies_enriched` model. This is useful for lineage and debugging purposes, indicating the specific dbt project responsible for the initial policy data."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['intermediate', 'policies', 'daily']\n    )\n}}\n\nWITH policies AS (\n    SELECT * FROM {{ ref('stg_policies') }}\n),\n\nagents AS (\n    SELECT * FROM {{ ref('stg_agents') }}\n)\n\nSELECT\n    p.policy_id,\n    p.customer_id,\n    p.policy_type,\n    p.start_date,\n    p.end_date,\n    p.premium_amount,\n    p.coverage_amount,\n    p.status,\n    p.agent_id,\n    p.policy_number,\n    p.policy_term_days,\n    p.effective_status,\n    p.coverage_premium_ratio,\n    -- Agent information\n    a.agent_name,\n    a.office_location,\n    a.specialization AS agent_specialization,\n    a.experience_level AS agent_experience,\n    -- Policy-agent alignment\n    CASE\n        WHEN a.specialization = p.policy_type THEN 'ALIGNED'\n        ELSE 'MISALIGNED'\n    END AS specialization_alignment,\n    -- Metadata fields\n    p.dbt_updated_at,\n    p._dbt_source_project\nFROM policies p\nLEFT JOIN agents a ON p.agent_id = a.agent_id",
      "materialized": "view",
      "schema": "intermediate",
      "file_path": "models/intermediate/int_policies_enriched.sql",
      "database": "insurance_data",
      "tags": [
        "intermediate",
        "policies",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.policy_management.int_policies_enriched",
        "metadata": {
          "type": "VIEW",
          "schema": "policy_management_intermediate",
          "name": "int_policies_enriched",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `int_policies_enriched` dbt model in the `policy_management` project enriches policy data by joining it with agent information. It produces a view containing detailed policy information, including key attributes like policy type, premium, and coverage, alongside agent details such as name, office location, and specialization. This intermediate model serves as a crucial step in the data pipeline, transforming raw policy data (`stg_policies`) and agent data (`stg_agents`) into a more comprehensive and usable format. Key transformations include calculating a specialization alignment flag based on policy type and agent specialization, and adding metadata fields. This enriched view is designed to facilitate downstream analysis and reporting on policy performance and agent effectiveness."
    },
    {
      "id": "p4",
      "name": "mart_policy_details",
      "project": "policy_management",
      "description": "The `mart_policy_details` dbt model in the `policy_management` project serves as a central, pre-aggregated data mart for policy-related information. It consolidates and enriches policy data, pulling from the `int_policies_enriched` intermediate model and conditionally joining with the `mart_customer_risk_profile` model (from the `customer_risk` project if available). This model produces a table containing detailed policy attributes, including policy identifiers, customer details, financial metrics (premium, coverage), and status information. Key transformations include the calculation of `coverage_premium_ratio` and potentially the integration of customer risk profiles, making it a crucial component for downstream analysis and reporting on policy performance and customer risk.",
      "columns": [
        {
          "name": "policy_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for each insurance policy.  The `policy_id` is crucial for linking policy details within the `mart_policy_details` model, enabling analysis of policy performance and aggregation of related information. This allows for tracking and reporting on individual policies.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for each insurance policy.  The `policy_id` is crucial for linking policy details within the `mart_policy_details` model, enabling analysis of policy performance and aggregation of related information. This allows for tracking and reporting on individual policies."
        },
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for the customer associated with a specific policy.  It's a key field used to link policy details in `mart_policy_details` to customer information, enabling analysis of policy performance by customer. The `customer_id` is a VARCHAR data type.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for the customer associated with a specific policy.  It's a key field used to link policy details in `mart_policy_details` to customer information, enabling analysis of policy performance by customer. The `customer_id` is a VARCHAR data type."
        },
        {
          "name": "policy_type",
          "type": "VARCHAR",
          "description": "This column, `policy_type`, stores the type of insurance policy. It categorizes policies within the `mart_policy_details` model, enabling analysis and reporting on policy performance based on different policy types. This is a key attribute for segmenting and understanding policy portfolios.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `policy_type`, stores the type of insurance policy. It categorizes policies within the `mart_policy_details` model, enabling analysis and reporting on policy performance based on different policy types. This is a key attribute for segmenting and understanding policy portfolios."
        },
        {
          "name": "start_date",
          "type": "DATE",
          "description": "The `start_date` column in the `mart_policy_details` table stores the effective start date of the insurance policy. This date is crucial for understanding the policy's lifecycle and is used for time-based analysis of policy performance and financial metrics. It is sourced from the `int_policies_enriched` intermediate model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `start_date` column in the `mart_policy_details` table stores the effective start date of the insurance policy. This date is crucial for understanding the policy's lifecycle and is used for time-based analysis of policy performance and financial metrics. It is sourced from the `int_policies_enriched` intermediate model."
        },
        {
          "name": "end_date",
          "type": "DATE",
          "description": "The `end_date` column in the `mart_policy_details` table stores the date the policy coverage ends. This date is crucial for determining the policy's active period and is used in conjunction with the `start_date` to calculate the policy's duration and assess its performance over time.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `end_date` column in the `mart_policy_details` table stores the date the policy coverage ends. This date is crucial for determining the policy's active period and is used in conjunction with the `start_date` to calculate the policy's duration and assess its performance over time."
        },
        {
          "name": "premium_amount",
          "type": "DOUBLE",
          "description": "`premium_amount` stores the monetary value of the policy premium, represented as a double-precision floating-point number. This column is a core financial metric within the `mart_policy_details` model, representing the base premium amount before any risk adjustments. It's used for calculating other financial metrics and for analyzing policy performance.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`premium_amount` stores the monetary value of the policy premium, represented as a double-precision floating-point number. This column is a core financial metric within the `mart_policy_details` model, representing the base premium amount before any risk adjustments. It's used for calculating other financial metrics and for analyzing policy performance."
        },
        {
          "name": "coverage_amount",
          "type": "INTEGER",
          "description": "This column, `coverage_amount`, stores the integer value representing the monetary coverage provided by the policy.  It reflects the financial protection offered by the policy, a key metric for understanding the policy's scope and value. This value is crucial for calculating ratios like `coverage_premium_ratio` and for overall policy performance analysis.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `coverage_amount`, stores the integer value representing the monetary coverage provided by the policy.  It reflects the financial protection offered by the policy, a key metric for understanding the policy's scope and value. This value is crucial for calculating ratios like `coverage_premium_ratio` and for overall policy performance analysis."
        },
        {
          "name": "status",
          "type": "VARCHAR",
          "description": "The `status` column in the `mart_policy_details` table stores the current state of the policy, such as \"Active\", \"Cancelled\", or \"Pending\". This column is crucial for filtering and analyzing policies based on their operational state, enabling insights into policy lifecycle and performance. The data type is VARCHAR.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `status` column in the `mart_policy_details` table stores the current state of the policy, such as \"Active\", \"Cancelled\", or \"Pending\". This column is crucial for filtering and analyzing policies based on their operational state, enabling insights into policy lifecycle and performance. The data type is VARCHAR."
        },
        {
          "name": "agent_id",
          "type": "VARCHAR",
          "description": "`agent_id` stores the unique identifier of the insurance agent associated with the policy. This column is crucial for tracking policy performance and attributing policies to specific agents within the `mart_policy_details` model. It allows for analysis of agent-level performance metrics and commission calculations.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "`agent_id` stores the unique identifier of the insurance agent associated with the policy. This column is crucial for tracking policy performance and attributing policies to specific agents within the `mart_policy_details` model. It allows for analysis of agent-level performance metrics and commission calculations."
        },
        {
          "name": "policy_number",
          "type": "VARCHAR",
          "description": "The `policy_number` column stores the unique identifier assigned to each insurance policy. This VARCHAR field is crucial for identifying and linking individual policies within the `mart_policy_details` model, enabling analysis of policy-level attributes and performance metrics. It is used to join with the `int_policies_enriched` intermediate model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `policy_number` column stores the unique identifier assigned to each insurance policy. This VARCHAR field is crucial for identifying and linking individual policies within the `mart_policy_details` model, enabling analysis of policy-level attributes and performance metrics. It is used to join with the `int_policies_enriched` intermediate model."
        },
        {
          "name": "policy_term_days",
          "type": "BIGINT",
          "description": "`policy_term_days` stores the policy term length in days, represented as a BIGINT. This value indicates the duration of the policy coverage. It's crucial for understanding the length of time a policy is active, which is essential for calculating annualized metrics and analyzing policy performance over time.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`policy_term_days` stores the policy term length in days, represented as a BIGINT. This value indicates the duration of the policy coverage. It's crucial for understanding the length of time a policy is active, which is essential for calculating annualized metrics and analyzing policy performance over time."
        },
        {
          "name": "effective_status",
          "type": "VARCHAR",
          "description": "The `effective_status` column in the `mart_policy_details` table stores the current status of a policy, such as \"Active\", \"Cancelled\", or \"Expired\". This column is crucial for understanding the lifecycle of a policy and filtering for active policies when analyzing policy performance. The data type is VARCHAR, indicating a text-based representation of the policy's operational state.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `effective_status` column in the `mart_policy_details` table stores the current status of a policy, such as \"Active\", \"Cancelled\", or \"Expired\". This column is crucial for understanding the lifecycle of a policy and filtering for active policies when analyzing policy performance. The data type is VARCHAR, indicating a text-based representation of the policy's operational state."
        },
        {
          "name": "coverage_premium_ratio",
          "type": "DOUBLE",
          "description": "The `coverage_premium_ratio` column in the `mart_policy_details` table stores the ratio of policy coverage to the premium paid. This ratio is a key financial metric used to assess the relationship between the coverage provided by a policy and the cost of that coverage, enabling analysis of policy profitability and risk.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `coverage_premium_ratio` column in the `mart_policy_details` table stores the ratio of policy coverage to the premium paid. This ratio is a key financial metric used to assess the relationship between the coverage provided by a policy and the cost of that coverage, enabling analysis of policy profitability and risk."
        },
        {
          "name": "agent_name",
          "type": "VARCHAR",
          "description": "The `agent_name` column stores the name of the agent associated with the policy. This column is crucial for identifying the sales representative responsible for the policy, enabling analysis of agent performance and contribution to policy sales within the `mart_policy_details` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `agent_name` column stores the name of the agent associated with the policy. This column is crucial for identifying the sales representative responsible for the policy, enabling analysis of agent performance and contribution to policy sales within the `mart_policy_details` model."
        },
        {
          "name": "office_location",
          "type": "VARCHAR",
          "description": "The `office_location` column in the `mart_policy_details` table stores the physical location of the office associated with the policy. This information is crucial for analyzing policy performance and potentially identifying regional trends or correlations between office location and policy characteristics. The data type is VARCHAR, suggesting the office location is stored as text.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `office_location` column in the `mart_policy_details` table stores the physical location of the office associated with the policy. This information is crucial for analyzing policy performance and potentially identifying regional trends or correlations between office location and policy characteristics. The data type is VARCHAR, suggesting the office location is stored as text."
        },
        {
          "name": "agent_specialization",
          "type": "VARCHAR",
          "description": "This column, `agent_specialization`, stores the specific area of expertise or focus for the agent associated with the policy.  It helps categorize policies based on the agent's specialization, enabling analysis of policy performance by agent skill set. This information is sourced from the `int_policies_enriched` intermediate model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `agent_specialization`, stores the specific area of expertise or focus for the agent associated with the policy.  It helps categorize policies based on the agent's specialization, enabling analysis of policy performance by agent skill set. This information is sourced from the `int_policies_enriched` intermediate model."
        },
        {
          "name": "agent_experience",
          "type": "VARCHAR",
          "description": "This column, `agent_experience`, stores the experience level of the agent associated with the policy, likely as a text string.  It provides insight into the agent's tenure or expertise, potentially influencing policy performance or customer interactions. This information is pulled from the `int_policies_enriched` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `agent_experience`, stores the experience level of the agent associated with the policy, likely as a text string.  It provides insight into the agent's tenure or expertise, potentially influencing policy performance or customer interactions. This information is pulled from the `int_policies_enriched` model."
        },
        {
          "name": "specialization_alignment",
          "type": "VARCHAR",
          "description": "`specialization_alignment` indicates how well an agent's specialization aligns with the policy. This VARCHAR column likely categorizes or describes the relationship between the agent's expertise and the specific policy type, potentially used to assess agent performance or match agents to suitable policies.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`specialization_alignment` indicates how well an agent's specialization aligns with the policy. This VARCHAR column likely categorizes or describes the relationship between the agent's expertise and the specific policy type, potentially used to assess agent performance or match agents to suitable policies."
        },
        {
          "name": "customer_name",
          "type": "VARCHAR",
          "description": "The `customer_name` column in the `mart_policy_details` table stores the name of the customer associated with the policy. This column is used to link policy details with customer information, enabling analysis of policy performance by customer. The value is sourced from the `customer_risk` project, if available.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `customer_name` column in the `mart_policy_details` table stores the name of the customer associated with the policy. This column is used to link policy details with customer information, enabling analysis of policy performance by customer. The value is sourced from the `customer_risk` project, if available."
        },
        {
          "name": "risk_category",
          "type": "VARCHAR",
          "description": "The `risk_category` column in the `mart_policy_details` table stores a categorical assessment of the customer's risk profile, such as 'HIGH_RISK', 'MEDIUM_RISK', or 'LOW_RISK'. This column is derived from the `mart_customer_risk_profile` model and is used to inform risk-adjusted premium calculations, allowing for a more accurate pricing strategy based on customer risk.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `risk_category` column in the `mart_policy_details` table stores a categorical assessment of the customer's risk profile, such as 'HIGH_RISK', 'MEDIUM_RISK', or 'LOW_RISK'. This column is derived from the `mart_customer_risk_profile` model and is used to inform risk-adjusted premium calculations, allowing for a more accurate pricing strategy based on customer risk."
        },
        {
          "name": "risk_score",
          "type": "INTEGER",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "credit_score",
          "type": "INTEGER",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "claim_frequency",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "previous_claims_count",
          "type": "INTEGER",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "risk_adjusted_premium",
          "type": "DOUBLE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "policy_source",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "risk_source",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        }
      ],
      "sql": "{{\n    config(\n        materialized='table',\n        tags=['mart', 'policies', 'daily']\n    )\n}}\n\nWITH policies_enriched AS (\n    SELECT * FROM {{ ref('int_policies_enriched') }}\n),\n\n-- Reference to the customer risk project\ncustomer_risk_profile AS (\n    {% if execute %}\n        {% if adapter.get_relation(this.database, 'mart', 'mart_customer_risk_profile') %}\n            SELECT * FROM {{ ref('customer_risk', 'mart_customer_risk_profile') }}\n        {% else %}\n            SELECT\n                'CU0000' AS customer_id,\n                0 AS credit_score,\n                'UNKNOWN' AS claim_frequency,\n                0 AS risk_score,\n                0 AS previous_claims_count,\n                'UNKNOWN' AS risk_category,\n                'UNKNOWN' AS customer_name,\n                'customer_risk' AS _dbt_source_project\n            WHERE 1=0\n        {% endif %}\n    {% else %}\n        SELECT\n            'CU0000' AS customer_id,\n            0 AS credit_score,\n            'UNKNOWN' AS claim_frequency,\n            0 AS risk_score,\n            0 AS previous_claims_count,\n            'UNKNOWN' AS risk_category,\n            'UNKNOWN' AS customer_name,\n            'customer_risk' AS _dbt_source_project\n        WHERE 1=0\n    {% endif %}\n)\n\nSELECT\n    pe.policy_id,\n    pe.customer_id,\n    pe.policy_type,\n    pe.start_date,\n    pe.end_date,\n    pe.premium_amount,\n    pe.coverage_amount,\n    pe.status,\n    pe.agent_id,\n    pe.policy_number,\n    pe.policy_term_days,\n    pe.effective_status,\n    pe.coverage_premium_ratio,\n    pe.agent_name,\n    pe.office_location,\n    pe.agent_specialization,\n    pe.agent_experience,\n    pe.specialization_alignment,\n    -- Customer risk information\n    cr.customer_name,\n    cr.risk_category,\n    cr.risk_score,\n    cr.credit_score,\n    cr.claim_frequency,\n    cr.previous_claims_count,\n    -- Risk-adjusted premium calculation\n    CASE\n        WHEN cr.risk_category = 'HIGH_RISK' THEN pe.premium_amount * 1.25\n        WHEN cr.risk_category = 'MEDIUM_RISK' THEN pe.premium_amount * 1.1\n        WHEN cr.risk_category = 'LOW_RISK' THEN pe.premium_amount * 0.95\n        ELSE pe.premium_amount\n    END AS risk_adjusted_premium,\n    -- Cross project attribution\n    pe._dbt_source_project AS policy_source,\n    cr._dbt_source_project AS risk_source,\n    -- Metadata\n    CURRENT_TIMESTAMP AS dbt_updated_at\nFROM policies_enriched pe\nLEFT JOIN customer_risk_profile cr ON pe.customer_id = cr.customer_id",
      "materialized": "table",
      "schema": "mart",
      "file_path": "models/mart/mart_policy_details.sql",
      "database": "insurance_data",
      "tags": [
        "mart",
        "policies",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.policy_management.mart_policy_details",
        "metadata": {
          "type": "BASE TABLE",
          "schema": "policy_management_mart",
          "name": "mart_policy_details",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `mart_policy_details` dbt model in the `policy_management` project serves as a central, pre-aggregated data mart for policy-related information. It consolidates and enriches policy data, pulling from the `int_policies_enriched` intermediate model and conditionally joining with the `mart_customer_risk_profile` model (from the `customer_risk` project if available). This model produces a table containing detailed policy attributes, including policy identifiers, customer details, financial metrics (premium, coverage), and status information. Key transformations include the calculation of `coverage_premium_ratio` and potentially the integration of customer risk profiles, making it a crucial component for downstream analysis and reporting on policy performance and customer risk."
    },
    {
      "id": "p5",
      "name": "stg_customers",
      "project": "policy_management",
      "description": "The `stg_customers` dbt model in the `policy_management` project serves as a staging layer for customer data. It selects all columns from the `customers` source table and performs type conversions for `date_of_birth` and `joining_date` to the DATE data type. This model also derives several key customer attributes, including `customer_name`, `age`, and `months_as_customer`, using SQL functions. Finally, it adds metadata fields like `dbt_updated_at` and `_dbt_source_project` to track data lineage and origin. This model is tagged as 'staging', 'customers', and 'daily', indicating its role in preparing customer data for downstream transformations and analysis.",
      "columns": [
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for each customer, sourced from the `customers` table.  It's a VARCHAR data type, likely representing a string-based ID.  This `customer_id` is essential for joining this staging table with other tables and tracking individual customer records throughout the data pipeline.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for each customer, sourced from the `customers` table.  It's a VARCHAR data type, likely representing a string-based ID.  This `customer_id` is essential for joining this staging table with other tables and tracking individual customer records throughout the data pipeline."
        },
        {
          "name": "first_name",
          "type": "VARCHAR",
          "description": "This column stores the customer's first name as a string. It's used in the `stg_customers` staging model to prepare customer data for downstream analysis, specifically for constructing the `customer_name` field. The first name is directly sourced from the `customers` source table.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's first name as a string. It's used in the `stg_customers` staging model to prepare customer data for downstream analysis, specifically for constructing the `customer_name` field. The first name is directly sourced from the `customers` source table."
        },
        {
          "name": "last_name",
          "type": "VARCHAR",
          "description": "This column stores the customer's last name as a string. It's used in the `stg_customers` model to build the `customer_name` field by concatenating it with the `first_name`. This allows for easy identification and display of customer names.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's last name as a string. It's used in the `stg_customers` model to build the `customer_name` field by concatenating it with the `first_name`. This allows for easy identification and display of customer names."
        },
        {
          "name": "email",
          "type": "VARCHAR",
          "description": "This column stores the customer's email address as a string.  It's sourced directly from the `customers` source table and is included in the staging model for customer data.  This allows for easy access to customer contact information for various analyses.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's email address as a string.  It's sourced directly from the `customers` source table and is included in the staging model for customer data.  This allows for easy access to customer contact information for various analyses."
        },
        {
          "name": "phone",
          "type": "VARCHAR",
          "description": "The `phone` column stores the customer's phone number as a string. This column is directly sourced from the `customers` table and is included in the staging layer for customer data. It is used for identifying and contacting customers.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `phone` column stores the customer's phone number as a string. This column is directly sourced from the `customers` table and is included in the staging layer for customer data. It is used for identifying and contacting customers."
        },
        {
          "name": "address",
          "type": "VARCHAR",
          "description": "The `address` column stores the customer's street address as a string. This column is directly sourced from the `customers` table and is included in the staging layer for customer data. This allows for easy access to customer addresses for reporting and analysis.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `address` column stores the customer's street address as a string. This column is directly sourced from the `customers` table and is included in the staging layer for customer data. This allows for easy access to customer addresses for reporting and analysis."
        },
        {
          "name": "city",
          "type": "VARCHAR",
          "description": "This column stores the city of the customer's address as a string.  It's directly sourced from the `customers` table and is used to provide customer location information within the staging model.  No calculations or transformations are performed on this column within this model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the city of the customer's address as a string.  It's directly sourced from the `customers` table and is used to provide customer location information within the staging model.  No calculations or transformations are performed on this column within this model."
        },
        {
          "name": "state",
          "type": "VARCHAR",
          "description": "The `state` column stores the two-letter abbreviation of the customer's state of residence. This column is directly sourced from the `customers` table and is used for identifying the customer's location, which can be useful for segmentation and analysis. No calculations are performed on this column within this model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `state` column stores the two-letter abbreviation of the customer's state of residence. This column is directly sourced from the `customers` table and is used for identifying the customer's location, which can be useful for segmentation and analysis. No calculations are performed on this column within this model."
        },
        {
          "name": "zip_code",
          "type": "INTEGER",
          "description": "This column stores the customer's postal code as an integer. It's used to identify the customer's geographic location within the `stg_customers` staging model. This data is likely used for segmentation, analysis, and potentially risk assessment.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's postal code as an integer. It's used to identify the customer's geographic location within the `stg_customers` staging model. This data is likely used for segmentation, analysis, and potentially risk assessment."
        },
        {
          "name": "date_of_birth",
          "type": "DATE",
          "description": "This column stores the customer's date of birth as a DATE data type. It's used to calculate the customer's age within the `stg_customers` model. This information is crucial for understanding customer demographics and potentially for policy-related calculations.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's date of birth as a DATE data type. It's used to calculate the customer's age within the `stg_customers` model. This information is crucial for understanding customer demographics and potentially for policy-related calculations."
        },
        {
          "name": "gender",
          "type": "VARCHAR",
          "description": "The `gender` column in the `stg_customers` table stores the customer's gender as a string value. This column is directly sourced from the `customers` table and is included in the staging layer for customer data. This information is essential for customer segmentation and analysis within the policy management project.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `gender` column in the `stg_customers` table stores the customer's gender as a string value. This column is directly sourced from the `customers` table and is included in the staging layer for customer data. This information is essential for customer segmentation and analysis within the policy management project."
        },
        {
          "name": "joining_date",
          "type": "DATE",
          "description": "This column stores the date when a customer joined the company.  It's used to calculate the `months_as_customer` attribute, providing insight into customer tenure. The `joining_date` is cast to a DATE data type for consistent date-based calculations.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the date when a customer joined the company.  It's used to calculate the `months_as_customer` attribute, providing insight into customer tenure. The `joining_date` is cast to a DATE data type for consistent date-based calculations."
        },
        {
          "name": "customer_name",
          "type": "VARCHAR",
          "description": "This column, `customer_name`, stores the full name of the customer. It's derived by concatenating the `first_name` and `last_name` fields from the source data, providing a user-friendly representation of the customer's identity within the staging layer.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `customer_name`, stores the full name of the customer. It's derived by concatenating the `first_name` and `last_name` fields from the source data, providing a user-friendly representation of the customer's identity within the staging layer."
        },
        {
          "name": "age",
          "type": "BIGINT",
          "description": "The `age` column stores the customer's age as a whole number (BIGINT). This column is derived from the `date_of_birth` column using the `DATEDIFF` function, calculating the difference in years between the date of birth and the current date. This provides a readily available age value for customer analysis.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `age` column stores the customer's age as a whole number (BIGINT). This column is derived from the `date_of_birth` column using the `DATEDIFF` function, calculating the difference in years between the date of birth and the current date. This provides a readily available age value for customer analysis."
        },
        {
          "name": "months_as_customer",
          "type": "BIGINT",
          "description": "This column, `months_as_customer`, stores the number of months a customer has been a customer. It's calculated by subtracting the `joining_date` from the current date. This value is a key customer attribute used for understanding customer tenure and potentially segmenting customers based on their relationship length.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `months_as_customer`, stores the number of months a customer has been a customer. It's calculated by subtracting the `joining_date` from the current date. This value is a key customer attribute used for understanding customer tenure and potentially segmenting customers based on their relationship length."
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "`dbt_updated_at` stores the timestamp indicating when the `stg_customers` model was last refreshed. This column is crucial for tracking the freshness of the staged customer data, allowing analysts to understand the recency of the information. It is populated using `CURRENT_TIMESTAMP` during the model's execution.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`dbt_updated_at` stores the timestamp indicating when the `stg_customers` model was last refreshed. This column is crucial for tracking the freshness of the staged customer data, allowing analysts to understand the recency of the information. It is populated using `CURRENT_TIMESTAMP` during the model's execution."
        },
        {
          "name": "_dbt_source_project",
          "type": "VARCHAR",
          "description": "This column, `_dbt_source_project`, stores the name of the source project from which the customer data originates.  It's a metadata field used for data lineage, indicating the source of the customer information within the `stg_customers` staging model.  In this case, the value is hardcoded to 'customer_risk'.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `_dbt_source_project`, stores the name of the source project from which the customer data originates.  It's a metadata field used for data lineage, indicating the source of the customer information within the `stg_customers` staging model.  In this case, the value is hardcoded to 'customer_risk'."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'customers', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('customers') }}\n)\n\nSELECT\n    customer_id,\n    first_name,\n    last_name,\n    email,\n    phone,\n    address,\n    city,\n    state,\n    zip_code,\n    CAST(date_of_birth AS DATE) AS date_of_birth,\n    gender,\n    CAST(joining_date AS DATE) AS joining_date,\n    -- Derived fields\n    CONCAT(first_name, ' ', last_name) AS customer_name,\n    DATEDIFF('year', date_of_birth, CURRENT_DATE()) AS age,\n    DATEDIFF('month', joining_date, CURRENT_DATE()) AS months_as_customer,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'customer_risk' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_customers.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "customers",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.customer_risk.stg_customers",
        "metadata": {
          "type": "VIEW",
          "schema": "policy_management_staging",
          "name": "stg_customers",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `stg_customers` dbt model in the `policy_management` project serves as a staging layer for customer data. It selects all columns from the `customers` source table and performs type conversions for `date_of_birth` and `joining_date` to the DATE data type. This model also derives several key customer attributes, including `customer_name`, `age`, and `months_as_customer`, using SQL functions. Finally, it adds metadata fields like `dbt_updated_at` and `_dbt_source_project` to track data lineage and origin. This model is tagged as 'staging', 'customers', and 'daily', indicating its role in preparing customer data for downstream transformations and analysis."
    },
    {
      "id": "p6",
      "name": "stg_risk_factors",
      "project": "policy_management",
      "description": "The `stg_risk_factors` dbt model in the `policy_management` project serves as a staging layer for risk factor data. It transforms data from the `risk_factors` source, casting date fields and deriving new columns. This model produces a standardized view of risk-related information, including customer risk profiles, credit ratings, and the number of days since the last assessment. Key transformations include calculating `days_since_last_assessment` and deriving `credit_rating` based on `credit_score`, preparing the data for downstream analysis and reporting.",
      "columns": [
        {
          "name": "risk_id",
          "type": "VARCHAR",
          "description": "`risk_id` is a unique identifier for each risk factor record, sourced from the `risk_factors` source table. This VARCHAR column serves as the primary key, enabling the identification and tracking of individual risk profiles within the `stg_risk_factors` staging model.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "`risk_id` is a unique identifier for each risk factor record, sourced from the `risk_factors` source table. This VARCHAR column serves as the primary key, enabling the identification and tracking of individual risk profiles within the `stg_risk_factors` staging model."
        },
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for a customer, represented as a string.  In the `stg_risk_factors` model, this `customer_id` links risk factor data to specific customers, enabling analysis of their risk profiles. This is a key field for joining with other customer-related tables.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for a customer, represented as a string.  In the `stg_risk_factors` model, this `customer_id` links risk factor data to specific customers, enabling analysis of their risk profiles. This is a key field for joining with other customer-related tables."
        },
        {
          "name": "assessment_date",
          "type": "DATE",
          "description": "`assessment_date` stores the date when the risk assessment was performed. This column, cast as a DATE, is crucial for calculating the `days_since_last_assessment` and understanding the temporal context of risk factors within the `stg_risk_factors` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`assessment_date` stores the date when the risk assessment was performed. This column, cast as a DATE, is crucial for calculating the `days_since_last_assessment` and understanding the temporal context of risk factors within the `stg_risk_factors` model."
        },
        {
          "name": "credit_score",
          "type": "INTEGER",
          "description": "The `credit_score` column in the `stg_risk_factors` table stores an integer representing a customer's credit score. This score is used to derive the `credit_rating` and is a key component in assessing a customer's risk profile within the policy management system. The credit score is used to determine the credit rating.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `credit_score` column in the `stg_risk_factors` table stores an integer representing a customer's credit score. This score is used to derive the `credit_rating` and is a key component in assessing a customer's risk profile within the policy management system. The credit score is used to determine the credit rating."
        },
        {
          "name": "claim_frequency",
          "type": "VARCHAR",
          "description": "`claim_frequency` stores the frequency of claims, likely represented as a string value. This column is included in the staging layer to provide a standardized view of risk factors, potentially used to assess customer risk profiles alongside other factors like credit score and risk score. The specific format or meaning of the frequency (e.g., \"low\", \"high\", or a numerical representation) is not explicitly defined in the context.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`claim_frequency` stores the frequency of claims, likely represented as a string value. This column is included in the staging layer to provide a standardized view of risk factors, potentially used to assess customer risk profiles alongside other factors like credit score and risk score. The specific format or meaning of the frequency (e.g., \"low\", \"high\", or a numerical representation) is not explicitly defined in the context."
        },
        {
          "name": "risk_score",
          "type": "DOUBLE",
          "description": "The `risk_score` column in the `stg_risk_factors` table stores a numerical representation of a customer's overall risk profile. This double-precision value is likely derived from various risk factors like `credit_score` and `claim_frequency`, providing a consolidated assessment of risk for downstream analysis. The specific calculation logic is not explicitly defined, but it serves as a key input for understanding and managing customer risk.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `risk_score` column in the `stg_risk_factors` table stores a numerical representation of a customer's overall risk profile. This double-precision value is likely derived from various risk factors like `credit_score` and `claim_frequency`, providing a consolidated assessment of risk for downstream analysis. The specific calculation logic is not explicitly defined, but it serves as a key input for understanding and managing customer risk."
        },
        {
          "name": "previous_claims_count",
          "type": "INTEGER",
          "description": "`previous_claims_count` stores the number of claims a customer has filed prior to the current assessment. This integer value is a key risk factor used in the `stg_risk_factors` model to assess customer risk profiles. It contributes to the overall risk score and potentially influences the derived `risk_category`.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`previous_claims_count` stores the number of claims a customer has filed prior to the current assessment. This integer value is a key risk factor used in the `stg_risk_factors` model to assess customer risk profiles. It contributes to the overall risk score and potentially influences the derived `risk_category`."
        },
        {
          "name": "risk_category",
          "type": "VARCHAR",
          "description": "The `risk_category` column in the `stg_risk_factors` table stores a categorical classification of the risk associated with a customer or policy. This column likely categorizes risk levels based on factors like `risk_score`, potentially influencing downstream analysis and reporting on risk profiles.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `risk_category` column in the `stg_risk_factors` table stores a categorical classification of the risk associated with a customer or policy. This column likely categorizes risk levels based on factors like `risk_score`, potentially influencing downstream analysis and reporting on risk profiles."
        },
        {
          "name": "last_assessment",
          "type": "DATE",
          "description": "`last_assessment` stores the date of the most recent risk assessment. This column, cast as a DATE, is used to calculate the `days_since_last_assessment`, providing a temporal context for risk analysis within the `stg_risk_factors` model. This helps understand the recency of risk evaluations.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`last_assessment` stores the date of the most recent risk assessment. This column, cast as a DATE, is used to calculate the `days_since_last_assessment`, providing a temporal context for risk analysis within the `stg_risk_factors` model. This helps understand the recency of risk evaluations."
        },
        {
          "name": "assessment_source",
          "type": "VARCHAR",
          "description": "This column, `assessment_source`, stores the origin or source of the risk assessment data. It identifies where the risk factor information originated, providing context for the data within the `stg_risk_factors` staging model. This helps in understanding the reliability and provenance of the risk assessment data.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `assessment_source`, stores the origin or source of the risk assessment data. It identifies where the risk factor information originated, providing context for the data within the `stg_risk_factors` staging model. This helps in understanding the reliability and provenance of the risk assessment data."
        },
        {
          "name": "days_since_last_assessment",
          "type": "BIGINT",
          "description": "This column stores the number of days elapsed since the customer's last risk assessment. It's calculated as the difference between the `assessment_date` and `last_assessment` dates, providing a temporal measure of assessment recency. This information is crucial for understanding the timeliness of risk evaluations within the `stg_risk_factors` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the number of days elapsed since the customer's last risk assessment. It's calculated as the difference between the `assessment_date` and `last_assessment` dates, providing a temporal measure of assessment recency. This information is crucial for understanding the timeliness of risk evaluations within the `stg_risk_factors` model."
        },
        {
          "name": "credit_rating",
          "type": "VARCHAR",
          "description": "The `credit_rating` column in the `stg_risk_factors` table stores a customer's creditworthiness, categorized as 'POOR' or 'VERY_POOR'. This column is derived from the `credit_score` field within the staging model, providing a simplified risk assessment for downstream analysis. The rating is determined based on a threshold of 600, where scores below this value result in a 'VERY_POOR' rating.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `credit_rating` column in the `stg_risk_factors` table stores a customer's creditworthiness, categorized as 'POOR' or 'VERY_POOR'. This column is derived from the `credit_score` field within the staging model, providing a simplified risk assessment for downstream analysis. The rating is determined based on a threshold of 600, where scores below this value result in a 'VERY_POOR' rating."
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "`dbt_updated_at` stores the timestamp indicating when the `stg_risk_factors` model was last refreshed. This column provides a record of the model's update time, enabling data analysts to track the freshness of the risk factor data and understand the recency of the information used in downstream analyses.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`dbt_updated_at` stores the timestamp indicating when the `stg_risk_factors` model was last refreshed. This column provides a record of the model's update time, enabling data analysts to track the freshness of the risk factor data and understand the recency of the information used in downstream analyses."
        },
        {
          "name": "_dbt_source_project",
          "type": "VARCHAR",
          "description": "This column, `_dbt_source_project`, stores the source project identifier as a string, specifically \"customer_risk\".  It identifies the origin of the risk factor data within the `stg_risk_factors` staging model, aiding in data lineage and understanding the source of the information. This is a metadata field used for tracking the source of the data.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `_dbt_source_project`, stores the source project identifier as a string, specifically \"customer_risk\".  It identifies the origin of the risk factor data within the `stg_risk_factors` staging model, aiding in data lineage and understanding the source of the information. This is a metadata field used for tracking the source of the data."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'risk', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('risk_factors') }}\n)\n\nSELECT\n    risk_id,\n    customer_id,\n    CAST(assessment_date AS DATE) AS assessment_date,\n    credit_score,\n    claim_frequency,\n    risk_score,\n    previous_claims_count,\n    risk_category,\n    CAST(last_assessment AS DATE) AS last_assessment,\n    assessment_source,\n    -- Derived fields\n    DATEDIFF('day', last_assessment, assessment_date) AS days_since_last_assessment,\n    CASE\n        WHEN credit_score >= 750 THEN 'EXCELLENT'\n        WHEN credit_score >= 700 THEN 'GOOD'\n        WHEN credit_score >= 650 THEN 'FAIR'\n        WHEN credit_score >= 600 THEN 'POOR'\n        ELSE 'VERY_POOR'\n    END AS credit_rating,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'customer_risk' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_risk_factors.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "risk",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.customer_risk.stg_risk_factors",
        "metadata": {
          "type": "VIEW",
          "schema": "policy_management_staging",
          "name": "stg_risk_factors",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `stg_risk_factors` dbt model in the `policy_management` project serves as a staging layer for risk factor data. It transforms data from the `risk_factors` source, casting date fields and deriving new columns. This model produces a standardized view of risk-related information, including customer risk profiles, credit ratings, and the number of days since the last assessment. Key transformations include calculating `days_since_last_assessment` and deriving `credit_rating` based on `credit_score`, preparing the data for downstream analysis and reporting."
    },
    {
      "id": "p7",
      "name": "int_customer_risk_enriched",
      "project": "policy_management",
      "description": "This dbt model, `int_customer_risk_enriched`, enriches customer data with risk assessment information. It joins customer data from `stg_customers` with risk factors from `stg_risk_factors` using `customer_id`. The model produces a view containing customer details, risk scores, and derived attributes. Key transformations include age-based risk score adjustments and the creation of customer segments based on tenure and risk category. This intermediate model serves to combine and transform data, providing a comprehensive view of customer risk profiles for downstream analysis and reporting within the policy management project.",
      "columns": [
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for a customer, represented as a string.  It's used as the primary key to join customer data with risk factor information within the `int_customer_risk_enriched` model. This `customer_id` enables the association of customer details with their corresponding risk assessments.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for a customer, represented as a string.  It's used as the primary key to join customer data with risk factor information within the `int_customer_risk_enriched` model. This `customer_id` enables the association of customer details with their corresponding risk assessments."
        },
        {
          "name": "customer_name",
          "type": "VARCHAR",
          "description": "This column stores the customer's full name. It's used to identify and display customer information within the enriched risk profile.  This is a direct pass-through from the source `stg_customers` table.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's full name. It's used to identify and display customer information within the enriched risk profile.  This is a direct pass-through from the source `stg_customers` table."
        },
        {
          "name": "email",
          "type": "VARCHAR",
          "description": "This column stores the customer's email address, sourced from the `stg_customers` table.  The email address is included to provide a means of customer identification and contact within the enriched customer risk profile.  This allows for targeted communication and analysis based on risk assessments and customer segments.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's email address, sourced from the `stg_customers` table.  The email address is included to provide a means of customer identification and contact within the enriched customer risk profile.  This allows for targeted communication and analysis based on risk assessments and customer segments."
        },
        {
          "name": "phone",
          "type": "VARCHAR",
          "description": "This column stores the customer's phone number as a string.  It's included to provide contact information for the customer within the enriched customer risk profile.  The phone number is directly sourced from the `stg_customers` table.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's phone number as a string.  It's included to provide contact information for the customer within the enriched customer risk profile.  The phone number is directly sourced from the `stg_customers` table."
        },
        {
          "name": "address",
          "type": "VARCHAR",
          "description": "The `address` column stores the customer's street address as a string. This column is sourced from the `stg_customers` table and provides customer location details, essential for risk assessment and customer segmentation within the policy management project.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `address` column stores the customer's street address as a string. This column is sourced from the `stg_customers` table and provides customer location details, essential for risk assessment and customer segmentation within the policy management project."
        },
        {
          "name": "city",
          "type": "VARCHAR",
          "description": "This column, `city`, stores the customer's city of residence as a string.  It's included to provide customer location details, which is essential for understanding customer demographics and potentially for risk analysis. This information is sourced directly from the `stg_customers` table.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `city`, stores the customer's city of residence as a string.  It's included to provide customer location details, which is essential for understanding customer demographics and potentially for risk analysis. This information is sourced directly from the `stg_customers` table."
        },
        {
          "name": "state",
          "type": "VARCHAR",
          "description": "The `state` column stores the customer's state of residence as a VARCHAR value. This information is directly sourced from the `stg_customers` table and is used to provide customer location details within the enriched risk profile. It's a key attribute for understanding customer demographics and potential geographic risk factors.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `state` column stores the customer's state of residence as a VARCHAR value. This information is directly sourced from the `stg_customers` table and is used to provide customer location details within the enriched risk profile. It's a key attribute for understanding customer demographics and potential geographic risk factors."
        },
        {
          "name": "zip_code",
          "type": "INTEGER",
          "description": "This column stores the customer's postal code as an integer. It's used to identify the customer's geographic location and is included alongside other customer details for risk assessment and customer segmentation. This information is likely used for analysis and reporting within the policy management project.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's postal code as an integer. It's used to identify the customer's geographic location and is included alongside other customer details for risk assessment and customer segmentation. This information is likely used for analysis and reporting within the policy management project."
        },
        {
          "name": "date_of_birth",
          "type": "DATE",
          "description": "This column, `date_of_birth`, stores the customer's date of birth. It's used to calculate the customer's age, which is then used in risk score adjustments within the model. This information is crucial for understanding customer demographics and their potential impact on risk assessment.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `date_of_birth`, stores the customer's date of birth. It's used to calculate the customer's age, which is then used in risk score adjustments within the model. This information is crucial for understanding customer demographics and their potential impact on risk assessment."
        },
        {
          "name": "gender",
          "type": "VARCHAR",
          "description": "This column stores the customer's gender as a string value. It's sourced from the `stg_customers` table and provides demographic information used for customer profiling and risk assessment. This data is essential for understanding customer characteristics within the policy management project.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's gender as a string value. It's sourced from the `stg_customers` table and provides demographic information used for customer profiling and risk assessment. This data is essential for understanding customer characteristics within the policy management project."
        },
        {
          "name": "joining_date",
          "type": "DATE",
          "description": "`joining_date`: This column stores the date when the customer initially joined the company. It's used to calculate the customer's tenure (`months_as_customer`) and is a key factor in determining customer segments within the model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`joining_date`: This column stores the date when the customer initially joined the company. It's used to calculate the customer's tenure (`months_as_customer`) and is a key factor in determining customer segments within the model."
        },
        {
          "name": "age",
          "type": "BIGINT",
          "description": "This column, `age`, stores the customer's age as a BIGINT.  It's used within the `int_customer_risk_enriched` model to calculate an `age_adjusted_risk_score`, increasing the risk score for customers under 25 or over 70. This age information is crucial for segmenting customers and assessing their risk profiles.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `age`, stores the customer's age as a BIGINT.  It's used within the `int_customer_risk_enriched` model to calculate an `age_adjusted_risk_score`, increasing the risk score for customers under 25 or over 70. This age information is crucial for segmenting customers and assessing their risk profiles."
        },
        {
          "name": "months_as_customer",
          "type": "BIGINT",
          "description": "`months_as_customer` stores the number of months a customer has been active. This column is crucial for customer segmentation, as it's used in conjunction with risk category to determine a customer's segment (e.g., PREMIUM, PREFERRED, STANDARD, NEW). The value is likely calculated based on the difference between the current date and the customer's joining date.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`months_as_customer` stores the number of months a customer has been active. This column is crucial for customer segmentation, as it's used in conjunction with risk category to determine a customer's segment (e.g., PREMIUM, PREFERRED, STANDARD, NEW). The value is likely calculated based on the difference between the current date and the customer's joining date."
        },
        {
          "name": "risk_id",
          "type": "VARCHAR",
          "description": "The `risk_id` column stores a unique identifier for the risk assessment associated with a customer. This VARCHAR field links the customer to a specific risk assessment record from the `stg_risk_factors` table, enabling the model to incorporate risk-related data. This ID is crucial for joining risk information with customer details, providing a comprehensive risk profile for each customer.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "The `risk_id` column stores a unique identifier for the risk assessment associated with a customer. This VARCHAR field links the customer to a specific risk assessment record from the `stg_risk_factors` table, enabling the model to incorporate risk-related data. This ID is crucial for joining risk information with customer details, providing a comprehensive risk profile for each customer."
        },
        {
          "name": "assessment_date",
          "type": "DATE",
          "description": "`assessment_date` stores the date when the customer's risk assessment was performed. This date is crucial for understanding the recency of the risk evaluation and allows for tracking risk profile changes over time within the `int_customer_risk_enriched` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`assessment_date` stores the date when the customer's risk assessment was performed. This date is crucial for understanding the recency of the risk evaluation and allows for tracking risk profile changes over time within the `int_customer_risk_enriched` model."
        },
        {
          "name": "credit_score",
          "type": "INTEGER",
          "description": "The `credit_score` column stores an integer representing the customer's credit score, likely obtained from an external credit bureau. This score is a key risk factor used in the `int_customer_risk_enriched` model to assess customer risk profiles, influencing the overall risk assessment and potentially impacting customer segmentation.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `credit_score` column stores an integer representing the customer's credit score, likely obtained from an external credit bureau. This score is a key risk factor used in the `int_customer_risk_enriched` model to assess customer risk profiles, influencing the overall risk assessment and potentially impacting customer segmentation."
        },
        {
          "name": "credit_rating",
          "type": "VARCHAR",
          "description": "The `credit_rating` column stores a customer's creditworthiness as a string value, likely representing a rating like \"A\", \"B\", or \"C\". This column provides a direct assessment of a customer's credit risk, which is crucial for understanding their overall risk profile within the `int_customer_risk_enriched` model. This rating is likely sourced from an external credit bureau and used in conjunction with other risk factors to derive a comprehensive risk score.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `credit_rating` column stores a customer's creditworthiness as a string value, likely representing a rating like \"A\", \"B\", or \"C\". This column provides a direct assessment of a customer's credit risk, which is crucial for understanding their overall risk profile within the `int_customer_risk_enriched` model. This rating is likely sourced from an external credit bureau and used in conjunction with other risk factors to derive a comprehensive risk score."
        },
        {
          "name": "claim_frequency",
          "type": "VARCHAR",
          "description": "`claim_frequency` stores a customer's claim frequency, likely represented as a string value. This column is crucial for assessing a customer's risk profile, as it indicates how often they file claims. The specific values and their meaning (e.g., \"low\", \"medium\", \"high\") would be defined within the `stg_risk_factors` source data.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`claim_frequency` stores a customer's claim frequency, likely represented as a string value. This column is crucial for assessing a customer's risk profile, as it indicates how often they file claims. The specific values and their meaning (e.g., \"low\", \"medium\", \"high\") would be defined within the `stg_risk_factors` source data."
        },
        {
          "name": "risk_score",
          "type": "DOUBLE",
          "description": "The `risk_score` column stores a numerical value representing the customer's assessed risk level. This score, of type DOUBLE, is derived from risk factors and is used to evaluate a customer's overall risk profile within the `int_customer_risk_enriched` model.  It is used in calculations to derive `age_adjusted_risk_score` and is a key input for customer segmentation.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `risk_score` column stores a numerical value representing the customer's assessed risk level. This score, of type DOUBLE, is derived from risk factors and is used to evaluate a customer's overall risk profile within the `int_customer_risk_enriched` model.  It is used in calculations to derive `age_adjusted_risk_score` and is a key input for customer segmentation."
        },
        {
          "name": "previous_claims_count",
          "type": "INTEGER",
          "description": "`previous_claims_count` stores the number of claims a customer has filed previously. This integer value is a key risk factor used in the risk assessment, likely contributing to the overall risk score and customer segmentation within the `int_customer_risk_enriched` model. This data helps to understand a customer's claim history and potential future risk.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`previous_claims_count` stores the number of claims a customer has filed previously. This integer value is a key risk factor used in the risk assessment, likely contributing to the overall risk score and customer segmentation within the `int_customer_risk_enriched` model. This data helps to understand a customer's claim history and potential future risk."
        },
        {
          "name": "risk_category",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "days_since_last_assessment",
          "type": "BIGINT",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "age_adjusted_risk_score",
          "type": "DOUBLE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "customer_segment",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "_dbt_source_project",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['intermediate', 'customers', 'risk', 'daily']\n    )\n}}\n\nWITH customers AS (\n    SELECT * FROM {{ ref('stg_customers') }}\n),\n\nrisk_factors AS (\n    SELECT * FROM {{ ref('stg_risk_factors') }}\n)\n\nSELECT\n    c.customer_id,\n    c.customer_name,\n    c.email,\n    c.phone,\n    c.address,\n    c.city,\n    c.state,\n    c.zip_code,\n    c.date_of_birth,\n    c.gender,\n    c.joining_date,\n    c.age,\n    c.months_as_customer,\n    -- Risk information\n    r.risk_id,\n    r.assessment_date,\n    r.credit_score,\n    r.credit_rating,\n    r.claim_frequency,\n    r.risk_score,\n    r.previous_claims_count,\n    r.risk_category,\n    r.days_since_last_assessment,\n    -- Risk factor adjustments\n    CASE\n        WHEN c.age < 25 OR c.age > 70 THEN r.risk_score * 1.2\n        ELSE r.risk_score\n    END AS age_adjusted_risk_score,\n    -- Customer segments\n    CASE\n        WHEN c.months_as_customer >= 36 AND r.risk_category = 'LOW_RISK' THEN 'PREMIUM'\n        WHEN c.months_as_customer >= 24 AND r.risk_category IN ('LOW_RISK', 'MEDIUM_RISK') THEN 'PREFERRED'\n        WHEN c.months_as_customer >= 12 THEN 'STANDARD'\n        ELSE 'NEW'\n    END AS customer_segment,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    c._dbt_source_project\nFROM customers c\nLEFT JOIN risk_factors r ON c.customer_id = r.customer_id",
      "materialized": "view",
      "schema": "intermediate",
      "file_path": "models/intermediate/int_customer_risk_enriched.sql",
      "database": "insurance_data",
      "tags": [
        "intermediate",
        "customers",
        "risk",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.customer_risk.int_customer_risk_enriched",
        "metadata": {
          "type": "VIEW",
          "schema": "policy_management_intermediate",
          "name": "int_customer_risk_enriched",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "This dbt model, `int_customer_risk_enriched`, enriches customer data with risk assessment information. It joins customer data from `stg_customers` with risk factors from `stg_risk_factors` using `customer_id`. The model produces a view containing customer details, risk scores, and derived attributes. Key transformations include age-based risk score adjustments and the creation of customer segments based on tenure and risk category. This intermediate model serves to combine and transform data, providing a comprehensive view of customer risk profiles for downstream analysis and reporting within the policy management project."
    },
    {
      "id": "p8",
      "name": "mart_customer_risk_profile",
      "project": "policy_management",
      "description": "The `mart_customer_risk_profile` dbt model in the `policy_management` project creates a customer-level risk profile. It consolidates customer information with risk assessments and claims data to provide a comprehensive view of each customer's risk. This model joins data from `int_customer_risk_enriched` with claims data, including total claims, amounts, and settlement details, sourced from a separate claims processing project. Key transformations include calculating risk scores, categorizing customers based on risk, and enriching the customer profile with claims history, enabling informed decision-making related to policy management and risk mitigation.",
      "columns": [
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for a customer, sourced from various tables and models.  In the `mart_customer_risk_profile` model, this `customer_id` is used to join customer information with risk assessments and claims data, enabling the aggregation of customer-level risk profiles. This allows for analysis of customer risk and claims history.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for a customer, sourced from various tables and models.  In the `mart_customer_risk_profile` model, this `customer_id` is used to join customer information with risk assessments and claims data, enabling the aggregation of customer-level risk profiles. This allows for analysis of customer risk and claims history."
        },
        {
          "name": "customer_name",
          "type": "VARCHAR",
          "description": "This column stores the customer's full name.  Within the `mart_customer_risk_profile` model, this column provides a human-readable identifier for each customer, facilitating easy identification and linking of risk profiles to individual clients. It is a VARCHAR data type, indicating it stores text-based customer names.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's full name.  Within the `mart_customer_risk_profile` model, this column provides a human-readable identifier for each customer, facilitating easy identification and linking of risk profiles to individual clients. It is a VARCHAR data type, indicating it stores text-based customer names."
        },
        {
          "name": "email",
          "type": "VARCHAR",
          "description": "This column stores the customer's email address. It's used within the `mart_customer_risk_profile` model to uniquely identify and link customer records with their associated risk profiles and claims data. This allows for customer-level analysis and reporting.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's email address. It's used within the `mart_customer_risk_profile` model to uniquely identify and link customer records with their associated risk profiles and claims data. This allows for customer-level analysis and reporting."
        },
        {
          "name": "city",
          "type": "VARCHAR",
          "description": "The `city` column stores the customer's city of residence, sourced from the `int_customer_risk_enriched` model. This information is used to enrich the customer risk profile, potentially aiding in risk assessment and segmentation based on geographic location.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `city` column stores the customer's city of residence, sourced from the `int_customer_risk_enriched` model. This information is used to enrich the customer risk profile, potentially aiding in risk assessment and segmentation based on geographic location."
        },
        {
          "name": "state",
          "type": "VARCHAR",
          "description": "The `state` column stores the customer's state of residence as a two-letter abbreviation (e.g., CA, NY). This column is used to segment customers by geographic location within the customer risk profile, potentially for risk analysis and policy pricing. The data is sourced from the `int_customer_risk_enriched` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `state` column stores the customer's state of residence as a two-letter abbreviation (e.g., CA, NY). This column is used to segment customers by geographic location within the customer risk profile, potentially for risk analysis and policy pricing. The data is sourced from the `int_customer_risk_enriched` model."
        },
        {
          "name": "age",
          "type": "BIGINT",
          "description": "The `age` column stores the customer's age as a whole number (BIGINT). This column is used within the `mart_customer_risk_profile` model to contribute to the overall customer risk assessment, potentially influencing risk scores and categorizations. The SQL context suggests that age is a key factor in the risk profile calculation.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `age` column stores the customer's age as a whole number (BIGINT). This column is used within the `mart_customer_risk_profile` model to contribute to the overall customer risk assessment, potentially influencing risk scores and categorizations. The SQL context suggests that age is a key factor in the risk profile calculation."
        },
        {
          "name": "months_as_customer",
          "type": "BIGINT",
          "description": "This column stores the number of months a customer has been a customer.  It provides a measure of customer tenure, which is likely used in the `mart_customer_risk_profile` model to assess a customer's risk profile.  This information could be used to identify long-term customers or to segment customers based on their length of relationship with the company.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the number of months a customer has been a customer.  It provides a measure of customer tenure, which is likely used in the `mart_customer_risk_profile` model to assess a customer's risk profile.  This information could be used to identify long-term customers or to segment customers based on their length of relationship with the company."
        },
        {
          "name": "credit_score",
          "type": "INTEGER",
          "description": "The `credit_score` column stores an integer representing a customer's credit score. This score is used within the `mart_customer_risk_profile` model to assess a customer's financial risk, contributing to the overall risk profile alongside other factors like age and customer tenure. This value likely influences risk categorization and policy decisions.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `credit_score` column stores an integer representing a customer's credit score. This score is used within the `mart_customer_risk_profile` model to assess a customer's financial risk, contributing to the overall risk profile alongside other factors like age and customer tenure. This value likely influences risk categorization and policy decisions."
        },
        {
          "name": "credit_rating",
          "type": "VARCHAR",
          "description": "The `credit_rating` column stores a customer's credit rating, likely sourced from an external credit bureau. This rating is used within the customer risk profile to assess a customer's financial stability and is a key factor in determining their overall risk score, influencing policy management decisions.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `credit_rating` column stores a customer's credit rating, likely sourced from an external credit bureau. This rating is used within the customer risk profile to assess a customer's financial stability and is a key factor in determining their overall risk score, influencing policy management decisions."
        },
        {
          "name": "claim_frequency",
          "type": "VARCHAR",
          "description": "`claim_frequency` (VARCHAR) represents the frequency of claims filed by a customer. This column is crucial for assessing a customer's risk profile, as it helps determine the likelihood of future claims and informs risk scoring. The specific values likely represent categories or ranges of claim frequency (e.g., \"Never\", \"Low\", \"Medium\", \"High\").",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`claim_frequency` (VARCHAR) represents the frequency of claims filed by a customer. This column is crucial for assessing a customer's risk profile, as it helps determine the likelihood of future claims and informs risk scoring. The specific values likely represent categories or ranges of claim frequency (e.g., \"Never\", \"Low\", \"Medium\", \"High\")."
        },
        {
          "name": "risk_score",
          "type": "DOUBLE",
          "description": "`risk_score` stores a numerical value representing the customer's overall risk profile, calculated based on various factors including credit rating, claim frequency, and age. This score is a key component of the customer risk profile, used to assess and categorize customers for policy management and risk mitigation strategies. The value is likely used in further calculations, such as the `claims_adjusted_risk_score`.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`risk_score` stores a numerical value representing the customer's overall risk profile, calculated based on various factors including credit rating, claim frequency, and age. This score is a key component of the customer risk profile, used to assess and categorize customers for policy management and risk mitigation strategies. The value is likely used in further calculations, such as the `claims_adjusted_risk_score`."
        },
        {
          "name": "age_adjusted_risk_score",
          "type": "DOUBLE",
          "description": "The `age_adjusted_risk_score` column stores a customer's risk score, adjusted for age. This score is a key component of the customer risk profile, used to assess and categorize customer risk levels within the `policy_management` project. The SQL context suggests this score is further adjusted based on claim activity.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `age_adjusted_risk_score` column stores a customer's risk score, adjusted for age. This score is a key component of the customer risk profile, used to assess and categorize customer risk levels within the `policy_management` project. The SQL context suggests this score is further adjusted based on claim activity."
        },
        {
          "name": "previous_claims_count",
          "type": "INTEGER",
          "description": "`previous_claims_count` stores the total number of claims filed by a customer prior to the current assessment. This integer value is used within the `mart_customer_risk_profile` model to enrich the customer's risk profile, contributing to the overall risk assessment and potentially influencing risk categorization.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`previous_claims_count` stores the total number of claims filed by a customer prior to the current assessment. This integer value is used within the `mart_customer_risk_profile` model to enrich the customer's risk profile, contributing to the overall risk assessment and potentially influencing risk categorization."
        },
        {
          "name": "risk_category",
          "type": "VARCHAR",
          "description": "`risk_category` categorizes customers based on their calculated risk score, likely into levels like \"Low,\" \"Medium,\" or \"High.\" This column facilitates customer segmentation within the `mart_customer_risk_profile` model, enabling targeted policy management and risk mitigation strategies. The categorization is derived from the `age_adjusted_risk_score` and other risk factors, providing a simplified view of customer risk profiles.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`risk_category` categorizes customers based on their calculated risk score, likely into levels like \"Low,\" \"Medium,\" or \"High.\" This column facilitates customer segmentation within the `mart_customer_risk_profile` model, enabling targeted policy management and risk mitigation strategies. The categorization is derived from the `age_adjusted_risk_score` and other risk factors, providing a simplified view of customer risk profiles."
        },
        {
          "name": "customer_segment",
          "type": "VARCHAR",
          "description": "This column, `customer_segment`, categorizes customers based on their risk profile. It contains a string value representing the customer's risk segment, derived from the `int_customer_risk_enriched` model. This segmentation is crucial for policy management and risk mitigation strategies, allowing for targeted actions based on customer risk levels.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `customer_segment`, categorizes customers based on their risk profile. It contains a string value representing the customer's risk segment, derived from the `int_customer_risk_enriched` model. This segmentation is crucial for policy management and risk mitigation strategies, allowing for targeted actions based on customer risk levels."
        },
        {
          "name": "total_claims",
          "type": "INTEGER",
          "description": "`total_claims` stores the total number of claims associated with a customer. This integer value is used within the `mart_customer_risk_profile` model to enrich customer profiles with claims history, enabling risk scoring and analysis. The column is used in calculations such as adjusting risk scores based on the number of claims and determining claim denial rates.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`total_claims` stores the total number of claims associated with a customer. This integer value is used within the `mart_customer_risk_profile` model to enrich customer profiles with claims history, enabling risk scoring and analysis. The column is used in calculations such as adjusting risk scores based on the number of claims and determining claim denial rates."
        },
        {
          "name": "total_claim_amount",
          "type": "INTEGER",
          "description": "`total_claim_amount` stores the sum of all claim amounts for a given customer. This integer value represents the total financial exposure from claims associated with each customer, crucial for assessing their risk profile within the `mart_customer_risk_profile` model. This data is used in conjunction with other risk factors to categorize customers and inform policy management decisions.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`total_claim_amount` stores the sum of all claim amounts for a given customer. This integer value represents the total financial exposure from claims associated with each customer, crucial for assessing their risk profile within the `mart_customer_risk_profile` model. This data is used in conjunction with other risk factors to categorize customers and inform policy management decisions."
        },
        {
          "name": "total_settlement_amount",
          "type": "INTEGER",
          "description": "`total_settlement_amount` stores the sum of all settlement amounts for a customer's claims, represented as an integer. This column is crucial for understanding the financial impact of claims on a customer's risk profile within the `mart_customer_risk_profile` model. It helps assess the overall cost associated with settling claims, contributing to the customer's risk score and risk categorization.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`total_settlement_amount` stores the sum of all settlement amounts for a customer's claims, represented as an integer. This column is crucial for understanding the financial impact of claims on a customer's risk profile within the `mart_customer_risk_profile` model. It helps assess the overall cost associated with settling claims, contributing to the customer's risk score and risk categorization."
        },
        {
          "name": "avg_days_to_settle",
          "type": "INTEGER",
          "description": "`avg_days_to_settle` stores the average number of days it took to settle a customer's claims. This integer value provides insight into the efficiency of the claims settlement process for each customer, contributing to their overall risk profile assessment.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`avg_days_to_settle` stores the average number of days it took to settle a customer's claims. This integer value provides insight into the efficiency of the claims settlement process for each customer, contributing to their overall risk profile assessment."
        },
        {
          "name": "settled_claims_count",
          "type": "INTEGER",
          "description": "`settled_claims_count` stores the total number of claims for a customer that have been successfully settled. This integer value is crucial for understanding a customer's claims history and is used to assess their risk profile within the `mart_customer_risk_profile` model, contributing to risk scoring and customer categorization. The value is derived from the claims processing project, specifically counting claims with a 'SETTLED' status.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`settled_claims_count` stores the total number of claims for a customer that have been successfully settled. This integer value is crucial for understanding a customer's claims history and is used to assess their risk profile within the `mart_customer_risk_profile` model, contributing to risk scoring and customer categorization. The value is derived from the claims processing project, specifically counting claims with a 'SETTLED' status."
        },
        {
          "name": "denied_claims_count",
          "type": "INTEGER",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "most_recent_claim_date",
          "type": "DATE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "claims_adjusted_risk_score",
          "type": "DOUBLE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "claim_denial_rate",
          "type": "DOUBLE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "risk_source",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "claims_source",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        }
      ],
      "sql": "{{\n    config(\n        materialized='table',\n        tags=['mart', 'customers', 'risk', 'daily']\n    )\n}}\n\nWITH customer_risk_enriched AS (\n    SELECT * FROM {{ ref('int_customer_risk_enriched') }}\n),\n\n-- Reference to claims data from claims processing project\ncustomer_claims AS (\n    {% if execute %}\n        {% if adapter.get_relation(this.database, 'mart', 'mart_claims_analysis') %}\n            SELECT \n                customer_id,\n                COUNT(*) AS total_claims,\n                SUM(claim_amount) AS total_claim_amount,\n                SUM(settlement_amount_clean) AS total_settlement_amount,\n                AVG(days_to_settle) AS avg_days_to_settle,\n                SUM(CASE WHEN claim_status = 'SETTLED' THEN 1 ELSE 0 END) AS settled_claims_count,\n                SUM(CASE WHEN claim_status = 'DENIED' THEN 1 ELSE 0 END) AS denied_claims_count,\n                MAX(claim_date) AS most_recent_claim_date,\n                'claims_processing' AS _dbt_source_project\n            FROM {{ ref('claims_processing', 'mart_claims_analysis') }}\n            GROUP BY customer_id\n        {% else %}\n            SELECT\n                'CU0000' AS customer_id,\n                0 AS total_claims,\n                0 AS total_claim_amount,\n                0 AS total_settlement_amount,\n                0 AS avg_days_to_settle,\n                0 AS settled_claims_count,\n                0 AS denied_claims_count,\n                CAST('2000-01-01' AS DATE) AS most_recent_claim_date,\n                'claims_processing' AS _dbt_source_project\n            WHERE 1=0\n        {% endif %}\n    {% else %}\n        SELECT\n            'CU0000' AS customer_id,\n            0 AS total_claims,\n            0 AS total_claim_amount,\n            0 AS total_settlement_amount,\n            0 AS avg_days_to_settle,\n            0 AS settled_claims_count,\n            0 AS denied_claims_count,\n            CAST('2000-01-01' AS DATE) AS most_recent_claim_date,\n            'claims_processing' AS _dbt_source_project\n        WHERE 1=0\n    {% endif %}\n)\n\nSELECT\n    cr.customer_id,\n    cr.customer_name,\n    cr.email,\n    cr.city,\n    cr.state,\n    cr.age,\n    cr.months_as_customer,\n    cr.credit_score,\n    cr.credit_rating,\n    cr.claim_frequency,\n    cr.risk_score,\n    cr.age_adjusted_risk_score,\n    cr.previous_claims_count,\n    cr.risk_category,\n    cr.customer_segment,\n    -- Claims information from claims processing\n    cc.total_claims,\n    cc.total_claim_amount,\n    cc.total_settlement_amount,\n    cc.avg_days_to_settle,\n    cc.settled_claims_count,\n    cc.denied_claims_count,\n    cc.most_recent_claim_date,\n    -- Risk scoring with claim data\n    CASE\n        WHEN cc.total_claims > 0 THEN\n            cr.age_adjusted_risk_score * (1 + (cc.total_claims / 10))\n        ELSE\n            cr.age_adjusted_risk_score\n    END AS claims_adjusted_risk_score,\n    -- Denial ratio\n    CASE\n        WHEN cc.total_claims > 0 THEN \n            ROUND(cc.denied_claims_count / cc.total_claims * 100, 2)\n        ELSE 0\n    END AS claim_denial_rate,\n    -- Cross project attribution\n    cr._dbt_source_project AS risk_source,\n    cc._dbt_source_project AS claims_source,\n    -- Metadata\n    CURRENT_TIMESTAMP AS dbt_updated_at\nFROM customer_risk_enriched cr\nLEFT JOIN customer_claims cc ON cr.customer_id = cc.customer_id",
      "materialized": "table",
      "schema": "mart",
      "file_path": "models/mart/mart_customer_risk_profile.sql",
      "database": "insurance_data",
      "tags": [
        "mart",
        "customers",
        "risk",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.customer_risk.mart_customer_risk_profile",
        "metadata": {
          "type": "BASE TABLE",
          "schema": "policy_management_mart",
          "name": "mart_customer_risk_profile",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `mart_customer_risk_profile` dbt model in the `policy_management` project creates a customer-level risk profile. It consolidates customer information with risk assessments and claims data to provide a comprehensive view of each customer's risk. This model joins data from `int_customer_risk_enriched` with claims data, including total claims, amounts, and settlement details, sourced from a separate claims processing project. Key transformations include calculating risk scores, categorizing customers based on risk, and enriching the customer profile with claims history, enabling informed decision-making related to policy management and risk mitigation."
    }
  ],
  "lineage": [
    {
      "source": "c5",
      "target": "c7"
    },
    {
      "source": "c6",
      "target": "c7"
    },
    {
      "source": "c7",
      "target": "c8"
    },
    {
      "source": "c9",
      "target": "c11"
    },
    {
      "source": "c10",
      "target": "c11"
    },
    {
      "source": "c11",
      "target": "c12"
    },
    {
      "source": "c4",
      "target": "c3"
    },
    {
      "source": "c2",
      "target": "c4"
    },
    {
      "source": "c1",
      "target": "c4"
    },
    {
      "source": "p1",
      "target": "p3"
    },
    {
      "source": "p2",
      "target": "p3"
    },
    {
      "source": "p3",
      "target": "p4"
    },
    {
      "source": "p5",
      "target": "p7"
    },
    {
      "source": "p6",
      "target": "p7"
    },
    {
      "source": "p7",
      "target": "p8"
    }
  ]
}