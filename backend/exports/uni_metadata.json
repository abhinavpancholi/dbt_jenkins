{
  "projects": [
    {
      "id": "claims_processing",
      "name": "claims_processing",
      "description": "claims_processing dbt project"
    },
    {
      "id": "customer_risk",
      "name": "customer_risk",
      "description": "customer_risk dbt project"
    },
    {
      "id": "policy_management",
      "name": "policy_management",
      "description": "policy_management dbt project"
    }
  ],
  "models": [
    {
      "id": "c1",
      "name": "stg_claims",
      "project": "claims_processing",
      "description": "The `stg_claims` dbt model in the `claims_processing` project serves as a staging layer for raw claims data. It processes data from the source system, likely applying basic transformations like data type conversions and column renaming. This model produces a cleaned and standardized version of the claims data, making it ready for more complex transformations and analysis. It plays a crucial role in the data pipeline by providing a consistent and reliable foundation for subsequent models, ensuring data quality and consistency throughout the claims processing workflow.",
      "columns": [],
      "sql": "",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_claims.sql",
      "database": "insurance_data",
      "ai_description": "The `stg_claims` dbt model in the `claims_processing` project serves as a staging layer for raw claims data. It processes data from the source system, likely applying basic transformations like data type conversions and column renaming. This model produces a cleaned and standardized version of the claims data, making it ready for more complex transformations and analysis. It plays a crucial role in the data pipeline by providing a consistent and reliable foundation for subsequent models, ensuring data quality and consistency throughout the claims processing workflow."
    },
    {
      "id": "c2",
      "name": "stg_adjusters",
      "project": "claims_processing",
      "description": "Here's a concise description of the `stg_adjusters` dbt model:\n\nThis dbt model, part of the `claims_processing` project, creates a staging table for adjuster data. It processes raw adjuster information, likely from a source system, and prepares it for downstream transformations. The model selects and potentially cleanses adjuster attributes, such as names, contact information, and potentially their associated claims. This staging model serves as a foundational layer, ensuring data quality and consistency before more complex business logic is applied in subsequent models.",
      "columns": [],
      "sql": "",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_adjusters.sql",
      "database": "insurance_data",
      "ai_description": "Here's a concise description of the `stg_adjusters` dbt model:\n\nThis dbt model, part of the `claims_processing` project, creates a staging table for adjuster data. It processes raw adjuster information, likely from a source system, and prepares it for downstream transformations. The model selects and potentially cleanses adjuster attributes, such as names, contact information, and potentially their associated claims. This staging model serves as a foundational layer, ensuring data quality and consistency before more complex business logic is applied in subsequent models."
    },
    {
      "id": "c3",
      "name": "int_claims_enriched",
      "project": "claims_processing",
      "description": "The `int_claims_enriched` dbt model within the `claims_processing` project serves to enhance raw claims data with additional context. It processes raw claims data, likely from a source like `stg_claims`, and joins it with relevant dimensions such as customer, provider, and policy information. This model acts as an intermediate layer in the data pipeline, providing a more complete and business-relevant view of claims. Key transformations likely include joining dimension tables, calculating derived fields like claim age or cost metrics, and potentially applying business rules to flag specific claim characteristics.",
      "columns": [],
      "sql": "",
      "materialized": "view",
      "schema": "intermediate",
      "file_path": "models/intermediate/int_claims_enriched.sql",
      "database": "insurance_data",
      "ai_description": "The `int_claims_enriched` dbt model within the `claims_processing` project serves to enhance raw claims data with additional context. It processes raw claims data, likely from a source like `stg_claims`, and joins it with relevant dimensions such as customer, provider, and policy information. This model acts as an intermediate layer in the data pipeline, providing a more complete and business-relevant view of claims. Key transformations likely include joining dimension tables, calculating derived fields like claim age or cost metrics, and potentially applying business rules to flag specific claim characteristics."
    },
    {
      "id": "c4",
      "name": "mart_claims_analysis",
      "project": "claims_processing",
      "description": "The `mart_claims_analysis` dbt model within the `claims_processing` project serves to aggregate and analyze claims data for business insights. It processes raw claims data, likely from staging models, to produce a curated dataset focused on key performance indicators (KPIs) related to claims processing. This model plays a crucial role in the data pipeline by providing a readily consumable dataset for reporting and analysis. Important transformations include calculating claim resolution times, identifying claim status trends, and potentially summarizing claim amounts by various dimensions like claim type or provider.",
      "columns": [],
      "sql": "",
      "materialized": "table",
      "schema": "mart",
      "file_path": "models/mart/mart_claims_analysis.sql",
      "database": "insurance_data",
      "ai_description": "The `mart_claims_analysis` dbt model within the `claims_processing` project serves to aggregate and analyze claims data for business insights. It processes raw claims data, likely from staging models, to produce a curated dataset focused on key performance indicators (KPIs) related to claims processing. This model plays a crucial role in the data pipeline by providing a readily consumable dataset for reporting and analysis. Important transformations include calculating claim resolution times, identifying claim status trends, and potentially summarizing claim amounts by various dimensions like claim type or provider."
    },
    {
      "id": "c5",
      "name": "stg_customers",
      "project": "claims_processing",
      "description": "The `stg_customers` dbt model in the `claims_processing` project serves as a staging layer for customer data. It selects all columns from the `customers` source model and performs several transformations. These transformations include casting date fields, deriving customer name, calculating age and customer tenure, and adding metadata fields like `dbt_updated_at` and `_dbt_source_project`. This model prepares and enriches customer data for downstream analysis and reporting within the claims processing data pipeline.",
      "columns": [
        {
          "name": "*",
          "type": "unknown",
          "description": "Since the column name is \"*\", and the data type is unknown, I can't provide a specific description. However, I can provide a general description based on the context:\n\nThis column represents a field from the source `customers` table. It contains raw customer data, which is then transformed and enriched in this staging model for downstream use. The specific data and its purpose depend on the underlying source column.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "Since the column name is \"*\", and the data type is unknown, I can't provide a specific description. However, I can provide a general description based on the context:\n\nThis column represents a field from the source `customers` table. It contains raw customer data, which is then transformed and enriched in this staging model for downstream use. The specific data and its purpose depend on the underlying source column."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'customers', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('customers') }}\n)\n\nSELECT\n    customer_id,\n    first_name,\n    last_name,\n    email,\n    phone,\n    address,\n    city,\n    state,\n    zip_code,\n    CAST(date_of_birth AS DATE) AS date_of_birth,\n    gender,\n    CAST(joining_date AS DATE) AS joining_date,\n    -- Derived fields\n    CONCAT(first_name, ' ', last_name) AS customer_name,\n    DATEDIFF('year', date_of_birth, CURRENT_DATE()) AS age,\n    DATEDIFF('month', joining_date, CURRENT_DATE()) AS months_as_customer,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'customer_risk' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_customers.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "customers",
        "daily"
      ],
      "ai_description": "The `stg_customers` dbt model in the `claims_processing` project serves as a staging layer for customer data. It selects all columns from the `customers` source model and performs several transformations. These transformations include casting date fields, deriving customer name, calculating age and customer tenure, and adding metadata fields like `dbt_updated_at` and `_dbt_source_project`. This model prepares and enriches customer data for downstream analysis and reporting within the claims processing data pipeline."
    },
    {
      "id": "c6",
      "name": "stg_risk_factors",
      "project": "claims_processing",
      "description": "The `stg_risk_factors` dbt model in the `claims_processing` project stages risk factor data. It selects all columns from the `risk_factors` source model and performs several transformations. This model casts date columns, derives `days_since_last_assessment`, and calculates a `credit_rating` based on `credit_score`. Finally, it adds metadata fields like `dbt_updated_at` and `_dbt_source_project`, preparing the data for downstream analysis and reporting on customer risk profiles.",
      "columns": [
        {
          "name": "*",
          "type": "unknown",
          "description": "Since the column name is \"*\", and the data type is unknown, the description is:\n\nThis column represents all columns from the `risk_factors` source model.  It includes risk-related data such as `risk_id`, `customer_id`, `assessment_date`, `credit_score`, and other risk factors, which are staged for further transformation and analysis within the `claims_processing` project.  The specific data and its purpose are determined by the source table's schema.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "Since the column name is \"*\", and the data type is unknown, the description is:\n\nThis column represents all columns from the `risk_factors` source model.  It includes risk-related data such as `risk_id`, `customer_id`, `assessment_date`, `credit_score`, and other risk factors, which are staged for further transformation and analysis within the `claims_processing` project.  The specific data and its purpose are determined by the source table's schema."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'risk', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('risk_factors') }}\n)\n\nSELECT\n    risk_id,\n    customer_id,\n    CAST(assessment_date AS DATE) AS assessment_date,\n    credit_score,\n    claim_frequency,\n    risk_score,\n    previous_claims_count,\n    risk_category,\n    CAST(last_assessment AS DATE) AS last_assessment,\n    assessment_source,\n    -- Derived fields\n    DATEDIFF('day', last_assessment, assessment_date) AS days_since_last_assessment,\n    CASE\n        WHEN credit_score >= 750 THEN 'EXCELLENT'\n        WHEN credit_score >= 700 THEN 'GOOD'\n        WHEN credit_score >= 650 THEN 'FAIR'\n        WHEN credit_score >= 600 THEN 'POOR'\n        ELSE 'VERY_POOR'\n    END AS credit_rating,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'customer_risk' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_risk_factors.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "risk",
        "daily"
      ],
      "ai_description": "The `stg_risk_factors` dbt model in the `claims_processing` project stages risk factor data. It selects all columns from the `risk_factors` source model and performs several transformations. This model casts date columns, derives `days_since_last_assessment`, and calculates a `credit_rating` based on `credit_score`. Finally, it adds metadata fields like `dbt_updated_at` and `_dbt_source_project`, preparing the data for downstream analysis and reporting on customer risk profiles."
    },
    {
      "id": "c7",
      "name": "int_customer_risk_enriched",
      "project": "claims_processing",
      "description": "The `int_customer_risk_enriched` dbt model in the `claims_processing` project enriches customer data with risk assessment information. It joins customer details from `stg_customers` with risk factors from `stg_risk_factors`, using `customer_id` as the join key. This model produces a comprehensive view of each customer, including demographic information, risk scores, and derived customer segments. Key transformations include adjusting risk scores based on customer age and defining customer segments based on tenure and risk category, providing valuable insights for claims processing and customer segmentation.",
      "columns": [
        {
          "name": "*",
          "type": "unknown",
          "description": "Here are a few options for the column description, based on the information provided:\n\n**Option 1 (Most General):**\n\nThis column likely contains a risk score that has been adjusted based on the customer's age. The age adjustment is intended to refine the risk assessment, potentially reflecting higher risk for younger or older customers.\n\n**Option 2 (More Specific, if the column is `age_adjusted_risk_score`):**\n\n`age_adjusted_risk_score`: This column stores the customer's risk score, modified based on their age.  Customers under 25 or over 70 have their risk score multiplied by 1.2, reflecting an increased risk profile.\n\n**Option 3 (If the column is `risk_score` and the original `risk_score` is present):**\n\n`risk_score`: This column stores the customer's base risk score, which is then used to calculate the `age_adjusted_risk_score`. This value is a key input for the risk assessment process.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "Here are a few options for the column description, based on the information provided:\n\n**Option 1 (Most General):**\n\nThis column likely contains a risk score that has been adjusted based on the customer's age. The age adjustment is intended to refine the risk assessment, potentially reflecting higher risk for younger or older customers.\n\n**Option 2 (More Specific, if the column is `age_adjusted_risk_score`):**\n\n`age_adjusted_risk_score`: This column stores the customer's risk score, modified based on their age.  Customers under 25 or over 70 have their risk score multiplied by 1.2, reflecting an increased risk profile.\n\n**Option 3 (If the column is `risk_score` and the original `risk_score` is present):**\n\n`risk_score`: This column stores the customer's base risk score, which is then used to calculate the `age_adjusted_risk_score`. This value is a key input for the risk assessment process."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['intermediate', 'customers', 'risk', 'daily']\n    )\n}}\n\nWITH customers AS (\n    SELECT * FROM {{ ref('stg_customers') }}\n),\n\nrisk_factors AS (\n    SELECT * FROM {{ ref('stg_risk_factors') }}\n)\n\nSELECT\n    c.customer_id,\n    c.customer_name,\n    c.email,\n    c.phone,\n    c.address,\n    c.city,\n    c.state,\n    c.zip_code,\n    c.date_of_birth,\n    c.gender,\n    c.joining_date,\n    c.age,\n    c.months_as_customer,\n    -- Risk information\n    r.risk_id,\n    r.assessment_date,\n    r.credit_score,\n    r.credit_rating,\n    r.claim_frequency,\n    r.risk_score,\n    r.previous_claims_count,\n    r.risk_category,\n    r.days_since_last_assessment,\n    -- Risk factor adjustments\n    CASE\n        WHEN c.age < 25 OR c.age > 70 THEN r.risk_score * 1.2\n        ELSE r.risk_score\n    END AS age_adjusted_risk_score,\n    -- Customer segments\n    CASE\n        WHEN c.months_as_customer >= 36 AND r.risk_category = 'LOW_RISK' THEN 'PREMIUM'\n        WHEN c.months_as_customer >= 24 AND r.risk_category IN ('LOW_RISK', 'MEDIUM_RISK') THEN 'PREFERRED'\n        WHEN c.months_as_customer >= 12 THEN 'STANDARD'\n        ELSE 'NEW'\n    END AS customer_segment,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    c._dbt_source_project\nFROM customers c\nLEFT JOIN risk_factors r ON c.customer_id = r.customer_id",
      "materialized": "view",
      "schema": "intermediate",
      "file_path": "models/intermediate/int_customer_risk_enriched.sql",
      "database": "insurance_data",
      "tags": [
        "intermediate",
        "customers",
        "risk",
        "daily"
      ],
      "ai_description": "The `int_customer_risk_enriched` dbt model in the `claims_processing` project enriches customer data with risk assessment information. It joins customer details from `stg_customers` with risk factors from `stg_risk_factors`, using `customer_id` as the join key. This model produces a comprehensive view of each customer, including demographic information, risk scores, and derived customer segments. Key transformations include adjusting risk scores based on customer age and defining customer segments based on tenure and risk category, providing valuable insights for claims processing and customer segmentation."
    },
    {
      "id": "c8",
      "name": "mart_customer_risk_profile",
      "project": "claims_processing",
      "description": "This dbt model, `mart_customer_risk_profile`, aggregates customer risk data with claims information to create a customer risk profile. It processes enriched customer risk data from `int_customer_risk_enriched` and joins it with claims data from the `claims_processing` project's `mart_claims_analysis` model. The model calculates key claims metrics like total claims, claim amounts, settlement amounts, and claim status counts. This mart model serves as a central source for customer risk assessment, providing a comprehensive view of customer behavior for downstream analysis and reporting.",
      "columns": [
        {
          "name": "*",
          "type": "unknown",
          "description": "Okay, here are a few options for the column description, based on the information provided. Since the column name is \"*\", I'll provide a few options, assuming it's a placeholder for a specific column.\n\n**Option 1 (Assuming a Claims Metric):**\n\n> This column represents the total number of claims associated with a customer. It's calculated by counting the number of claims records for each customer within the `mart_claims_analysis` model. This metric is crucial for understanding a customer's claims history and contributing to their overall risk profile.\n\n**Option 2 (Assuming a Risk Score):**\n\n> This column contains the age-adjusted risk score for a customer, potentially modified based on their claims history. The risk score is adjusted upwards if a customer has claims, with the adjustment proportional to the number of claims. This score is used to assess customer risk.\n\n**Option 3 (Assuming Claim Denial Rate):**\n\n> This column calculates the claim denial rate for a customer, expressed as a percentage. It's computed by dividing the number of denied claims by the total number of claims, providing insight into a customer's claim rejection history. This metric informs the customer's risk profile.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "Okay, here are a few options for the column description, based on the information provided. Since the column name is \"*\", I'll provide a few options, assuming it's a placeholder for a specific column.\n\n**Option 1 (Assuming a Claims Metric):**\n\n> This column represents the total number of claims associated with a customer. It's calculated by counting the number of claims records for each customer within the `mart_claims_analysis` model. This metric is crucial for understanding a customer's claims history and contributing to their overall risk profile.\n\n**Option 2 (Assuming a Risk Score):**\n\n> This column contains the age-adjusted risk score for a customer, potentially modified based on their claims history. The risk score is adjusted upwards if a customer has claims, with the adjustment proportional to the number of claims. This score is used to assess customer risk.\n\n**Option 3 (Assuming Claim Denial Rate):**\n\n> This column calculates the claim denial rate for a customer, expressed as a percentage. It's computed by dividing the number of denied claims by the total number of claims, providing insight into a customer's claim rejection history. This metric informs the customer's risk profile."
        }
      ],
      "sql": "{{\n    config(\n        materialized='table',\n        tags=['mart', 'customers', 'risk', 'daily']\n    )\n}}\n\nWITH customer_risk_enriched AS (\n    SELECT * FROM {{ ref('int_customer_risk_enriched') }}\n),\n\n-- Reference to claims data from claims processing project\ncustomer_claims AS (\n    {% if execute %}\n        {% if adapter.get_relation(this.database, 'mart', 'mart_claims_analysis') %}\n            SELECT \n                customer_id,\n                COUNT(*) AS total_claims,\n                SUM(claim_amount) AS total_claim_amount,\n                SUM(settlement_amount_clean) AS total_settlement_amount,\n                AVG(days_to_settle) AS avg_days_to_settle,\n                SUM(CASE WHEN claim_status = 'SETTLED' THEN 1 ELSE 0 END) AS settled_claims_count,\n                SUM(CASE WHEN claim_status = 'DENIED' THEN 1 ELSE 0 END) AS denied_claims_count,\n                MAX(claim_date) AS most_recent_claim_date,\n                'claims_processing' AS _dbt_source_project\n            FROM {{ ref('claims_processing', 'mart_claims_analysis') }}\n            GROUP BY customer_id\n        {% else %}\n            SELECT\n                'CU0000' AS customer_id,\n                0 AS total_claims,\n                0 AS total_claim_amount,\n                0 AS total_settlement_amount,\n                0 AS avg_days_to_settle,\n                0 AS settled_claims_count,\n                0 AS denied_claims_count,\n                CAST('2000-01-01' AS DATE) AS most_recent_claim_date,\n                'claims_processing' AS _dbt_source_project\n            WHERE 1=0\n        {% endif %}\n    {% else %}\n        SELECT\n            'CU0000' AS customer_id,\n            0 AS total_claims,\n            0 AS total_claim_amount,\n            0 AS total_settlement_amount,\n            0 AS avg_days_to_settle,\n            0 AS settled_claims_count,\n            0 AS denied_claims_count,\n            CAST('2000-01-01' AS DATE) AS most_recent_claim_date,\n            'claims_processing' AS _dbt_source_project\n        WHERE 1=0\n    {% endif %}\n)\n\nSELECT\n    cr.customer_id,\n    cr.customer_name,\n    cr.email,\n    cr.city,\n    cr.state,\n    cr.age,\n    cr.months_as_customer,\n    cr.credit_score,\n    cr.credit_rating,\n    cr.claim_frequency,\n    cr.risk_score,\n    cr.age_adjusted_risk_score,\n    cr.previous_claims_count,\n    cr.risk_category,\n    cr.customer_segment,\n    -- Claims information from claims processing\n    cc.total_claims,\n    cc.total_claim_amount,\n    cc.total_settlement_amount,\n    cc.avg_days_to_settle,\n    cc.settled_claims_count,\n    cc.denied_claims_count,\n    cc.most_recent_claim_date,\n    -- Risk scoring with claim data\n    CASE\n        WHEN cc.total_claims > 0 THEN\n            cr.age_adjusted_risk_score * (1 + (cc.total_claims / 10))\n        ELSE\n            cr.age_adjusted_risk_score\n    END AS claims_adjusted_risk_score,\n    -- Denial ratio\n    CASE\n        WHEN cc.total_claims > 0 THEN \n            ROUND(cc.denied_claims_count / cc.total_claims * 100, 2)\n        ELSE 0\n    END AS claim_denial_rate,\n    -- Cross project attribution\n    cr._dbt_source_project AS risk_source,\n    cc._dbt_source_project AS claims_source,\n    -- Metadata\n    CURRENT_TIMESTAMP AS dbt_updated_at\nFROM customer_risk_enriched cr\nLEFT JOIN customer_claims cc ON cr.customer_id = cc.customer_id",
      "materialized": "table",
      "schema": "mart",
      "file_path": "models/mart/mart_customer_risk_profile.sql",
      "database": "insurance_data",
      "tags": [
        "mart",
        "customers",
        "risk",
        "daily"
      ],
      "ai_description": "This dbt model, `mart_customer_risk_profile`, aggregates customer risk data with claims information to create a customer risk profile. It processes enriched customer risk data from `int_customer_risk_enriched` and joins it with claims data from the `claims_processing` project's `mart_claims_analysis` model. The model calculates key claims metrics like total claims, claim amounts, settlement amounts, and claim status counts. This mart model serves as a central source for customer risk assessment, providing a comprehensive view of customer behavior for downstream analysis and reporting."
    },
    {
      "id": "c9",
      "name": "stg_policies",
      "project": "claims_processing",
      "description": "The `stg_policies` dbt model in the `claims_processing` project serves as a staging layer for policy data. It transforms data from the `policies` source, applying essential data type conversions and deriving new fields. This model produces a standardized view of policy information, including calculated fields like `policy_term_days`, `effective_status`, and `coverage_premium_ratio`.  Key business logic includes determining the policy's current status based on the current date and calculating the ratio of coverage to premium. This staged model is crucial for downstream analysis and reporting on policy details.",
      "columns": [
        {
          "name": "*",
          "type": "unknown",
          "description": "Okay, I'm ready to provide a concise description for the `*` column. Since the column name is `*`, it represents all columns from the source `policies` table. This includes all original policy attributes like `policy_id`, `customer_id`, `policy_type`, and others, which are brought into the `stg_policies` model for staging and transformation. This allows for a standardized and enriched view of the policy data, ready for downstream analysis.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "Okay, I'm ready to provide a concise description for the `*` column. Since the column name is `*`, it represents all columns from the source `policies` table. This includes all original policy attributes like `policy_id`, `customer_id`, `policy_type`, and others, which are brought into the `stg_policies` model for staging and transformation. This allows for a standardized and enriched view of the policy data, ready for downstream analysis."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'policies', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('policies') }}\n)\n\nSELECT\n    policy_id,\n    customer_id,\n    policy_type,\n    CAST(start_date AS DATE) AS start_date,\n    CAST(end_date AS DATE) AS end_date,\n    premium_amount,\n    coverage_amount,\n    status,\n    agent_id,\n    policy_number,\n    -- Derived fields\n    DATEDIFF('day', start_date, end_date) AS policy_term_days,\n    CASE\n        WHEN CURRENT_DATE() > end_date THEN 'EXPIRED'\n        WHEN CURRENT_DATE() BETWEEN start_date AND end_date THEN status\n        WHEN CURRENT_DATE() < start_date THEN 'FUTURE'\n        ELSE 'UNKNOWN'\n    END AS effective_status,\n    ROUND(coverage_amount / premium_amount, 2) AS coverage_premium_ratio,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'policy_management' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_policies.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "policies",
        "daily"
      ],
      "ai_description": "The `stg_policies` dbt model in the `claims_processing` project serves as a staging layer for policy data. It transforms data from the `policies` source, applying essential data type conversions and deriving new fields. This model produces a standardized view of policy information, including calculated fields like `policy_term_days`, `effective_status`, and `coverage_premium_ratio`.  Key business logic includes determining the policy's current status based on the current date and calculating the ratio of coverage to premium. This staged model is crucial for downstream analysis and reporting on policy details."
    },
    {
      "id": "c10",
      "name": "stg_agents",
      "project": "claims_processing",
      "description": "The `stg_agents` dbt model in the `claims_processing` project stages agent data from the `agents` source. It selects all columns from the source table and adds derived fields. This model transforms the raw agent data by calculating an `experience_level` based on `years_experience` and adds metadata like `dbt_updated_at` and `_dbt_source_project`. This staging model prepares the agent data for downstream analysis and reporting, making it a crucial component in the data pipeline.",
      "columns": [
        {
          "name": "*",
          "type": "unknown",
          "description": "Here are descriptions for the columns in the `stg_agents` table, based on the provided context:\n\n*   **agent_id:** Contains the unique identifier for each agent, directly sourced from the `agents` table. This column serves as the primary key for identifying individual agents within the staging model.\n*   **agent_name:** Stores the name of the agent, sourced directly from the `agents` table. This column provides the agent's full name for identification and reporting purposes.\n*   **agent_email:** Stores the email address of the agent, sourced directly from the `agents` table. This column provides the agent's email address for communication and contact information.\n*   **office_location:** Contains the location of the agent's office, sourced directly from the `agents` table. This column provides the agent's office location for reporting and analysis.\n*   **years_experience:** Stores the number of years of experience for each agent, sourced directly from the `agents` table. This column is used to calculate the `experience_level` of the agent.\n*   **specialization:** Contains the agent's area of specialization, sourced directly from the `agents` table. This column provides the agent's specialization for reporting and analysis.\n*   **active:** Indicates whether the agent is currently active, sourced directly from the `agents` table. This column provides the agent's active status for reporting and",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "Here are descriptions for the columns in the `stg_agents` table, based on the provided context:\n\n*   **agent_id:** Contains the unique identifier for each agent, directly sourced from the `agents` table. This column serves as the primary key for identifying individual agents within the staging model.\n*   **agent_name:** Stores the name of the agent, sourced directly from the `agents` table. This column provides the agent's full name for identification and reporting purposes.\n*   **agent_email:** Stores the email address of the agent, sourced directly from the `agents` table. This column provides the agent's email address for communication and contact information.\n*   **office_location:** Contains the location of the agent's office, sourced directly from the `agents` table. This column provides the agent's office location for reporting and analysis.\n*   **years_experience:** Stores the number of years of experience for each agent, sourced directly from the `agents` table. This column is used to calculate the `experience_level` of the agent.\n*   **specialization:** Contains the agent's area of specialization, sourced directly from the `agents` table. This column provides the agent's specialization for reporting and analysis.\n*   **active:** Indicates whether the agent is currently active, sourced directly from the `agents` table. This column provides the agent's active status for reporting and"
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'agents', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('agents') }}\n)\n\nSELECT\n    agent_id,\n    agent_name,\n    agent_email,\n    office_location,\n    years_experience,\n    specialization,\n    active,\n    -- Derived fields\n    CASE \n        WHEN years_experience >= 10 THEN 'SENIOR'\n        WHEN years_experience >= 5 THEN 'MID'\n        ELSE 'JUNIOR'\n    END AS experience_level,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'policy_management' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_agents.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "agents",
        "daily"
      ],
      "ai_description": "The `stg_agents` dbt model in the `claims_processing` project stages agent data from the `agents` source. It selects all columns from the source table and adds derived fields. This model transforms the raw agent data by calculating an `experience_level` based on `years_experience` and adds metadata like `dbt_updated_at` and `_dbt_source_project`. This staging model prepares the agent data for downstream analysis and reporting, making it a crucial component in the data pipeline."
    },
    {
      "id": "c11",
      "name": "int_policies_enriched",
      "project": "claims_processing",
      "description": "The `int_policies_enriched` dbt model in the `claims_processing` project enriches policy data with agent information. It joins the `stg_policies` and `stg_agents` staging models to combine policy details with corresponding agent attributes. This intermediate model produces a comprehensive view of policies, including agent details like name, location, and specialization, along with a calculated `specialization_alignment` field indicating whether the agent's specialization matches the policy type. This model serves as a foundational layer for downstream analyses and reporting on policies and agent performance.",
      "columns": [
        {
          "name": "*",
          "type": "unknown",
          "description": "Since the column name and data type are unknown, the best description we can provide is a general one.\n\nThis column contains data from either the `stg_policies` or `stg_agents` tables, or a calculated field. The exact data and its purpose depend on the specific column. Without knowing the column name, it's impossible to determine its business meaning or calculation logic.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "Since the column name and data type are unknown, the best description we can provide is a general one.\n\nThis column contains data from either the `stg_policies` or `stg_agents` tables, or a calculated field. The exact data and its purpose depend on the specific column. Without knowing the column name, it's impossible to determine its business meaning or calculation logic."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['intermediate', 'policies', 'daily']\n    )\n}}\n\nWITH policies AS (\n    SELECT * FROM {{ ref('stg_policies') }}\n),\n\nagents AS (\n    SELECT * FROM {{ ref('stg_agents') }}\n)\n\nSELECT\n    p.policy_id,\n    p.customer_id,\n    p.policy_type,\n    p.start_date,\n    p.end_date,\n    p.premium_amount,\n    p.coverage_amount,\n    p.status,\n    p.agent_id,\n    p.policy_number,\n    p.policy_term_days,\n    p.effective_status,\n    p.coverage_premium_ratio,\n    -- Agent information\n    a.agent_name,\n    a.office_location,\n    a.specialization AS agent_specialization,\n    a.experience_level AS agent_experience,\n    -- Policy-agent alignment\n    CASE\n        WHEN a.specialization = p.policy_type THEN 'ALIGNED'\n        ELSE 'MISALIGNED'\n    END AS specialization_alignment,\n    -- Metadata fields\n    p.dbt_updated_at,\n    p._dbt_source_project\nFROM policies p\nLEFT JOIN agents a ON p.agent_id = a.agent_id",
      "materialized": "view",
      "schema": "intermediate",
      "file_path": "models/intermediate/int_policies_enriched.sql",
      "database": "insurance_data",
      "tags": [
        "intermediate",
        "policies",
        "daily"
      ],
      "ai_description": "The `int_policies_enriched` dbt model in the `claims_processing` project enriches policy data with agent information. It joins the `stg_policies` and `stg_agents` staging models to combine policy details with corresponding agent attributes. This intermediate model produces a comprehensive view of policies, including agent details like name, location, and specialization, along with a calculated `specialization_alignment` field indicating whether the agent's specialization matches the policy type. This model serves as a foundational layer for downstream analyses and reporting on policies and agent performance."
    },
    {
      "id": "c12",
      "name": "mart_policy_details",
      "project": "claims_processing",
      "description": "The `mart_policy_details` dbt model in the `claims_processing` project creates a detailed, daily-updated table containing policy information. It joins enriched policy data (`int_policies_enriched`) with customer risk profiles from a separate project, `customer_risk`. This model selects and transforms key policy attributes, including policy details, customer information, and risk assessments. The model's output serves as a core mart for policy analysis, providing a comprehensive view of policies for reporting and downstream analytics.",
      "columns": [
        {
          "name": "*",
          "type": "unknown",
          "description": "Since the column name and data type are unknown, and the SQL context only provides examples of calculations, here are a few options, depending on what the column *could* be, based on the context:\n\n**Option 1 (Assuming a Policy Attribute):**\n\nThis column represents a specific attribute of the policy, such as policy number, effective date, or coverage type.  It's included to provide detailed information about each policy within the `mart_policy_details` table. The exact data type and specific attribute depend on the column name.\n\n**Option 2 (Assuming a Risk-Adjusted Premium):**\n\nThis column stores the premium amount adjusted based on the customer's risk profile. The risk adjustment is calculated by multiplying the base premium by a factor determined by the customer's risk category (e.g., higher premiums for high-risk customers). This allows for a more accurate view of revenue based on risk.\n\n**Option 3 (Assuming a Customer Risk Attribute):**\n\nThis column contains a piece of information related to the customer's risk profile, such as their risk category (HIGH_RISK, MEDIUM_RISK, LOW_RISK). This is used to understand the risk associated with each policy and is likely used in calculations like the risk-adjusted premium. The specific data type will depend on the nature of the risk attribute.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "Since the column name and data type are unknown, and the SQL context only provides examples of calculations, here are a few options, depending on what the column *could* be, based on the context:\n\n**Option 1 (Assuming a Policy Attribute):**\n\nThis column represents a specific attribute of the policy, such as policy number, effective date, or coverage type.  It's included to provide detailed information about each policy within the `mart_policy_details` table. The exact data type and specific attribute depend on the column name.\n\n**Option 2 (Assuming a Risk-Adjusted Premium):**\n\nThis column stores the premium amount adjusted based on the customer's risk profile. The risk adjustment is calculated by multiplying the base premium by a factor determined by the customer's risk category (e.g., higher premiums for high-risk customers). This allows for a more accurate view of revenue based on risk.\n\n**Option 3 (Assuming a Customer Risk Attribute):**\n\nThis column contains a piece of information related to the customer's risk profile, such as their risk category (HIGH_RISK, MEDIUM_RISK, LOW_RISK). This is used to understand the risk associated with each policy and is likely used in calculations like the risk-adjusted premium. The specific data type will depend on the nature of the risk attribute."
        }
      ],
      "sql": "{{\n    config(\n        materialized='table',\n        tags=['mart', 'policies', 'daily']\n    )\n}}\n\nWITH policies_enriched AS (\n    SELECT * FROM {{ ref('int_policies_enriched') }}\n),\n\n-- Reference to the customer risk project\ncustomer_risk_profile AS (\n    {% if execute %}\n        {% if adapter.get_relation(this.database, 'mart', 'mart_customer_risk_profile') %}\n            SELECT * FROM {{ ref('customer_risk', 'mart_customer_risk_profile') }}\n        {% else %}\n            SELECT\n                'CU0000' AS customer_id,\n                0 AS credit_score,\n                'UNKNOWN' AS claim_frequency,\n                0 AS risk_score,\n                0 AS previous_claims_count,\n                'UNKNOWN' AS risk_category,\n                'UNKNOWN' AS customer_name,\n                'customer_risk' AS _dbt_source_project\n            WHERE 1=0\n        {% endif %}\n    {% else %}\n        SELECT\n            'CU0000' AS customer_id,\n            0 AS credit_score,\n            'UNKNOWN' AS claim_frequency,\n            0 AS risk_score,\n            0 AS previous_claims_count,\n            'UNKNOWN' AS risk_category,\n            'UNKNOWN' AS customer_name,\n            'customer_risk' AS _dbt_source_project\n        WHERE 1=0\n    {% endif %}\n)\n\nSELECT\n    pe.policy_id,\n    pe.customer_id,\n    pe.policy_type,\n    pe.start_date,\n    pe.end_date,\n    pe.premium_amount,\n    pe.coverage_amount,\n    pe.status,\n    pe.agent_id,\n    pe.policy_number,\n    pe.policy_term_days,\n    pe.effective_status,\n    pe.coverage_premium_ratio,\n    pe.agent_name,\n    pe.office_location,\n    pe.agent_specialization,\n    pe.agent_experience,\n    pe.specialization_alignment,\n    -- Customer risk information\n    cr.customer_name,\n    cr.risk_category,\n    cr.risk_score,\n    cr.credit_score,\n    cr.claim_frequency,\n    cr.previous_claims_count,\n    -- Risk-adjusted premium calculation\n    CASE\n        WHEN cr.risk_category = 'HIGH_RISK' THEN pe.premium_amount * 1.25\n        WHEN cr.risk_category = 'MEDIUM_RISK' THEN pe.premium_amount * 1.1\n        WHEN cr.risk_category = 'LOW_RISK' THEN pe.premium_amount * 0.95\n        ELSE pe.premium_amount\n    END AS risk_adjusted_premium,\n    -- Cross project attribution\n    pe._dbt_source_project AS policy_source,\n    cr._dbt_source_project AS risk_source,\n    -- Metadata\n    CURRENT_TIMESTAMP AS dbt_updated_at\nFROM policies_enriched pe\nLEFT JOIN customer_risk_profile cr ON pe.customer_id = cr.customer_id",
      "materialized": "table",
      "schema": "mart",
      "file_path": "models/mart/mart_policy_details.sql",
      "database": "insurance_data",
      "tags": [
        "mart",
        "policies",
        "daily"
      ],
      "ai_description": "The `mart_policy_details` dbt model in the `claims_processing` project creates a detailed, daily-updated table containing policy information. It joins enriched policy data (`int_policies_enriched`) with customer risk profiles from a separate project, `customer_risk`. This model selects and transforms key policy attributes, including policy details, customer information, and risk assessments. The model's output serves as a core mart for policy analysis, providing a comprehensive view of policies for reporting and downstream analytics."
    },
    {
      "id": "c1",
      "name": "stg_risk_factors",
      "project": "customer_risk",
      "description": "The `stg_risk_factors` dbt model in the `customer_risk` project stages risk factor data. It transforms data from the `risk_factors` source, casting `assessment_date` and `last_assessment` to DATE format. This model enriches the raw data by calculating `days_since_last_assessment` and deriving a `credit_rating` based on the `credit_score`. Finally, it adds metadata fields like `dbt_updated_at` and `_dbt_source_project`, preparing the data for downstream analysis and reporting within the risk assessment pipeline.",
      "columns": [
        {
          "name": "risk_id",
          "type": "VARCHAR",
          "description": "`risk_id` is a VARCHAR column that uniquely identifies each risk factor record within the `stg_risk_factors` model. This ID is inherited from the source data and serves as a primary key, enabling the tracking and linking of risk factor information across the risk assessment pipeline.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "`risk_id` is a VARCHAR column that uniquely identifies each risk factor record within the `stg_risk_factors` model. This ID is inherited from the source data and serves as a primary key, enabling the tracking and linking of risk factor information across the risk assessment pipeline."
        },
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for a customer, sourced from the `risk_factors` table.  It's used to link risk factors to specific customers within the `stg_risk_factors` model, enabling analysis of risk profiles at the customer level. The `customer_id` is a VARCHAR data type.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for a customer, sourced from the `risk_factors` table.  It's used to link risk factors to specific customers within the `stg_risk_factors` model, enabling analysis of risk profiles at the customer level. The `customer_id` is a VARCHAR data type."
        },
        {
          "name": "assessment_date",
          "type": "DATE",
          "description": "`assessment_date` stores the date when a risk assessment was performed, formatted as a DATE.  This column is crucial for calculating the `days_since_last_assessment` and understanding the temporal context of risk factors within the `stg_risk_factors` model. It's derived from the `risk_factors` source and used to track the timing of risk evaluations.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`assessment_date` stores the date when a risk assessment was performed, formatted as a DATE.  This column is crucial for calculating the `days_since_last_assessment` and understanding the temporal context of risk factors within the `stg_risk_factors` model. It's derived from the `risk_factors` source and used to track the timing of risk evaluations."
        },
        {
          "name": "credit_score",
          "type": "INTEGER",
          "description": "This column stores the customer's credit score as an integer.  It's a key risk factor used to determine the customer's creditworthiness and is used in the model to derive the `credit_rating`. The credit score is a direct input from the source data and is not calculated within this model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's credit score as an integer.  It's a key risk factor used to determine the customer's creditworthiness and is used in the model to derive the `credit_rating`. The credit score is a direct input from the source data and is not calculated within this model."
        },
        {
          "name": "claim_frequency",
          "type": "VARCHAR",
          "description": "This column, `claim_frequency`, stores a string representation of how often a customer has filed claims.  Within the `stg_risk_factors` model, this data likely contributes to the overall risk assessment, potentially influencing the derived `credit_rating` or other risk-related calculations. The `VARCHAR` data type suggests the values may be categorical or pre-calculated frequencies.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `claim_frequency`, stores a string representation of how often a customer has filed claims.  Within the `stg_risk_factors` model, this data likely contributes to the overall risk assessment, potentially influencing the derived `credit_rating` or other risk-related calculations. The `VARCHAR` data type suggests the values may be categorical or pre-calculated frequencies."
        },
        {
          "name": "risk_score",
          "type": "DOUBLE",
          "description": "The `risk_score` column in the `stg_risk_factors` table stores a numerical value representing the overall risk associated with a customer. This score is likely a calculated metric used to assess customer risk, potentially incorporating factors like credit score and claim frequency, as indicated by the SQL context. This value is crucial for risk assessment and segmentation within the customer risk pipeline.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `risk_score` column in the `stg_risk_factors` table stores a numerical value representing the overall risk associated with a customer. This score is likely a calculated metric used to assess customer risk, potentially incorporating factors like credit score and claim frequency, as indicated by the SQL context. This value is crucial for risk assessment and segmentation within the customer risk pipeline."
        },
        {
          "name": "previous_claims_count",
          "type": "INTEGER",
          "description": "`previous_claims_count` stores the number of claims a customer has filed prior to the current assessment. This integer value is a key risk factor used in the `stg_risk_factors` model to assess customer risk profiles. It likely contributes to the overall risk score and informs the derived `credit_rating`.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`previous_claims_count` stores the number of claims a customer has filed prior to the current assessment. This integer value is a key risk factor used in the `stg_risk_factors` model to assess customer risk profiles. It likely contributes to the overall risk score and informs the derived `credit_rating`."
        },
        {
          "name": "risk_category",
          "type": "VARCHAR",
          "description": "`risk_category` categorizes the level of risk associated with a customer, likely based on factors like `risk_score`. This VARCHAR column provides a qualitative assessment of risk, facilitating segmentation and analysis within the risk assessment pipeline.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`risk_category` categorizes the level of risk associated with a customer, likely based on factors like `risk_score`. This VARCHAR column provides a qualitative assessment of risk, facilitating segmentation and analysis within the risk assessment pipeline."
        },
        {
          "name": "last_assessment",
          "type": "DATE",
          "description": "This column stores the date of the last risk assessment for a customer.  It's used to calculate `days_since_last_assessment`, providing insight into the recency of the risk evaluation. The `last_assessment` date is crucial for understanding the time elapsed since the last risk review.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the date of the last risk assessment for a customer.  It's used to calculate `days_since_last_assessment`, providing insight into the recency of the risk evaluation. The `last_assessment` date is crucial for understanding the time elapsed since the last risk review."
        },
        {
          "name": "assessment_source",
          "type": "VARCHAR",
          "description": "This column, `assessment_source`, stores the origin or source of the risk assessment data, such as a specific system or vendor.  It helps identify where the risk factor information originated within the `stg_risk_factors` model. This is crucial for understanding data lineage and potentially differentiating risk assessments based on their source.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `assessment_source`, stores the origin or source of the risk assessment data, such as a specific system or vendor.  It helps identify where the risk factor information originated within the `stg_risk_factors` model. This is crucial for understanding data lineage and potentially differentiating risk assessments based on their source."
        },
        {
          "name": "days_since_last_assessment",
          "type": "BIGINT",
          "description": "This column stores the number of days elapsed since the last risk assessment, calculated as the difference between the `assessment_date` and `last_assessment` dates.  This value helps to understand the recency of risk factor data, which is crucial for assessing the current risk profile of a customer. The `DATEDIFF` function is used to calculate the difference in days.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the number of days elapsed since the last risk assessment, calculated as the difference between the `assessment_date` and `last_assessment` dates.  This value helps to understand the recency of risk factor data, which is crucial for assessing the current risk profile of a customer. The `DATEDIFF` function is used to calculate the difference in days."
        },
        {
          "name": "credit_rating",
          "type": "VARCHAR",
          "description": "This column, `credit_rating`, stores a customer's creditworthiness as a VARCHAR value. It's derived within the `stg_risk_factors` model based on the `credit_score`, categorizing customers as 'POOR' or 'VERY_POOR'. This rating helps assess customer risk within the risk assessment pipeline.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `credit_rating`, stores a customer's creditworthiness as a VARCHAR value. It's derived within the `stg_risk_factors` model based on the `credit_score`, categorizing customers as 'POOR' or 'VERY_POOR'. This rating helps assess customer risk within the risk assessment pipeline."
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "`dbt_updated_at` records the timestamp when the `stg_risk_factors` model was last refreshed. This timestamp provides a record of when the risk factor data was last updated, enabling data analysts to track data freshness and understand the recency of the information.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`dbt_updated_at` records the timestamp when the `stg_risk_factors` model was last refreshed. This timestamp provides a record of when the risk factor data was last updated, enabling data analysts to track data freshness and understand the recency of the information."
        },
        {
          "name": "_dbt_source_project",
          "type": "VARCHAR",
          "description": "This column, `_dbt_source_project`, stores the name of the dbt project that originally sourced the data, which is 'customer_risk'.  It serves as a metadata field, enabling lineage tracking and identification of the data's origin within the risk assessment pipeline. This helps with data governance and understanding the data's lifecycle.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `_dbt_source_project`, stores the name of the dbt project that originally sourced the data, which is 'customer_risk'.  It serves as a metadata field, enabling lineage tracking and identification of the data's origin within the risk assessment pipeline. This helps with data governance and understanding the data's lifecycle."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'risk', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('risk_factors') }}\n)\n\nSELECT\n    risk_id,\n    customer_id,\n    CAST(assessment_date AS DATE) AS assessment_date,\n    credit_score,\n    claim_frequency,\n    risk_score,\n    previous_claims_count,\n    risk_category,\n    CAST(last_assessment AS DATE) AS last_assessment,\n    assessment_source,\n    -- Derived fields\n    DATEDIFF('day', last_assessment, assessment_date) AS days_since_last_assessment,\n    CASE\n        WHEN credit_score >= 750 THEN 'EXCELLENT'\n        WHEN credit_score >= 700 THEN 'GOOD'\n        WHEN credit_score >= 650 THEN 'FAIR'\n        WHEN credit_score >= 600 THEN 'POOR'\n        ELSE 'VERY_POOR'\n    END AS credit_rating,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'customer_risk' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_risk_factors.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "risk",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.customer_risk.stg_risk_factors",
        "metadata": {
          "type": "VIEW",
          "schema": "customer_risk_staging",
          "name": "stg_risk_factors",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `stg_risk_factors` dbt model in the `customer_risk` project stages risk factor data. It transforms data from the `risk_factors` source, casting `assessment_date` and `last_assessment` to DATE format. This model enriches the raw data by calculating `days_since_last_assessment` and deriving a `credit_rating` based on the `credit_score`. Finally, it adds metadata fields like `dbt_updated_at` and `_dbt_source_project`, preparing the data for downstream analysis and reporting within the risk assessment pipeline."
    },
    {
      "id": "c2",
      "name": "stg_customers",
      "project": "customer_risk",
      "description": "The `stg_customers` dbt model in the `customer_risk` project serves as a staging layer for customer data. It transforms raw customer data from the `customers` source, casting date fields and deriving new columns. This model produces a view containing cleaned and enriched customer information, including calculated fields like `customer_name`, `age`, and `months_as_customer`.  It plays a crucial role in the data pipeline by preparing customer data for downstream analysis and modeling, providing a standardized and easily consumable dataset.",
      "columns": [
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "This column stores a unique identifier for each customer, represented as a variable-length string.  The `customer_id` is inherited from the source `customers` table and serves as the primary key for identifying individual customers within the `stg_customers` staging model.  It's crucial for joining customer data with other related tables and tracking customer-specific information.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores a unique identifier for each customer, represented as a variable-length string.  The `customer_id` is inherited from the source `customers` table and serves as the primary key for identifying individual customers within the `stg_customers` staging model.  It's crucial for joining customer data with other related tables and tracking customer-specific information."
        },
        {
          "name": "first_name",
          "type": "VARCHAR",
          "description": "This column stores the customer's first name as a string.  It's a direct import from the raw customer data and is used in the `customer_name` calculation within the `stg_customers` model. This field is essential for identifying and referencing individual customers.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's first name as a string.  It's a direct import from the raw customer data and is used in the `customer_name` calculation within the `stg_customers` model. This field is essential for identifying and referencing individual customers."
        },
        {
          "name": "last_name",
          "type": "VARCHAR",
          "description": "This column stores the customer's last name as a string. It's used in the `stg_customers` model to construct the `customer_name` field and provides essential information for identifying and categorizing customers. This column is sourced directly from the raw customer data.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's last name as a string. It's used in the `stg_customers` model to construct the `customer_name` field and provides essential information for identifying and categorizing customers. This column is sourced directly from the raw customer data."
        },
        {
          "name": "email",
          "type": "VARCHAR",
          "description": "This column stores the customer's email address as a string.  It's sourced directly from the raw `customers` data and is included in the `stg_customers` model to provide a readily available and cleaned email field for downstream analysis.  This allows for easy identification and communication with customers.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's email address as a string.  It's sourced directly from the raw `customers` data and is included in the `stg_customers` model to provide a readily available and cleaned email field for downstream analysis.  This allows for easy identification and communication with customers."
        },
        {
          "name": "phone",
          "type": "VARCHAR",
          "description": "The `phone` column in the `stg_customers` staging table stores the customer's phone number as a string. This column is directly sourced from the raw customer data and is included to provide contact information for each customer. No calculations or transformations are performed on this field within this model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `phone` column in the `stg_customers` staging table stores the customer's phone number as a string. This column is directly sourced from the raw customer data and is included to provide contact information for each customer. No calculations or transformations are performed on this field within this model."
        },
        {
          "name": "address",
          "type": "VARCHAR",
          "description": "The `address` column in the `stg_customers` table stores the customer's street address as a string. This column is sourced directly from the raw customer data and is included to provide location information for each customer. This data is crucial for understanding customer demographics and potential risk factors.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `address` column in the `stg_customers` table stores the customer's street address as a string. This column is sourced directly from the raw customer data and is included to provide location information for each customer. This data is crucial for understanding customer demographics and potential risk factors."
        },
        {
          "name": "city",
          "type": "VARCHAR",
          "description": "The `city` column in the `stg_customers` staging model stores the customer's city of residence as a string. This column is directly sourced from the raw `customers` data and is used to provide location-based customer information for downstream analysis and reporting. No transformations or calculations are performed on this column within this model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `city` column in the `stg_customers` staging model stores the customer's city of residence as a string. This column is directly sourced from the raw `customers` data and is used to provide location-based customer information for downstream analysis and reporting. No transformations or calculations are performed on this column within this model."
        },
        {
          "name": "state",
          "type": "VARCHAR",
          "description": "The `state` column stores the two-letter state abbreviation for the customer's address. This column is sourced directly from the raw customer data and is used to identify the customer's geographic location within the staging layer. It is a key attribute for segmentation and analysis of customer demographics.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `state` column stores the two-letter state abbreviation for the customer's address. This column is sourced directly from the raw customer data and is used to identify the customer's geographic location within the staging layer. It is a key attribute for segmentation and analysis of customer demographics."
        },
        {
          "name": "zip_code",
          "type": "INTEGER",
          "description": "This column stores the customer's postal code as an integer.  In the `stg_customers` model, this column represents the customer's location and is used for grouping, filtering, and potentially for geographic analysis in downstream processes.  It's directly sourced from the raw `customers` data.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's postal code as an integer.  In the `stg_customers` model, this column represents the customer's location and is used for grouping, filtering, and potentially for geographic analysis in downstream processes.  It's directly sourced from the raw `customers` data."
        },
        {
          "name": "date_of_birth",
          "type": "DATE",
          "description": "This column stores the customer's date of birth.  It's used to calculate the `age` of the customer within the `stg_customers` model. The `date_of_birth` is cast as a DATE data type to ensure accurate age calculations.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's date of birth.  It's used to calculate the `age` of the customer within the `stg_customers` model. The `date_of_birth` is cast as a DATE data type to ensure accurate age calculations."
        },
        {
          "name": "gender",
          "type": "VARCHAR",
          "description": "This column stores the customer's gender as a string value. Within the `stg_customers` model, this column provides a standardized representation of customer gender, facilitating analysis and segmentation based on this demographic attribute. The data is sourced directly from the raw customer data and is not subject to any calculations within this model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's gender as a string value. Within the `stg_customers` model, this column provides a standardized representation of customer gender, facilitating analysis and segmentation based on this demographic attribute. The data is sourced directly from the raw customer data and is not subject to any calculations within this model."
        },
        {
          "name": "joining_date",
          "type": "DATE",
          "description": "The `joining_date` column stores the date when a customer joined the company. This date, extracted from the raw customer data and cast as a DATE, is essential for calculating the `months_as_customer` metric, providing insights into customer tenure and loyalty.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `joining_date` column stores the date when a customer joined the company. This date, extracted from the raw customer data and cast as a DATE, is essential for calculating the `months_as_customer` metric, providing insights into customer tenure and loyalty."
        },
        {
          "name": "customer_name",
          "type": "VARCHAR",
          "description": "`customer_name` stores the full name of the customer, derived by concatenating the `first_name` and `last_name` fields from the source data. This column provides a user-friendly identifier for each customer within the `stg_customers` staging model, facilitating easier data analysis and reporting.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`customer_name` stores the full name of the customer, derived by concatenating the `first_name` and `last_name` fields from the source data. This column provides a user-friendly identifier for each customer within the `stg_customers` staging model, facilitating easier data analysis and reporting."
        },
        {
          "name": "age",
          "type": "BIGINT",
          "description": "The `age` column in the `stg_customers` table stores the customer's age, calculated as the difference in years between their date of birth and the current date. This column provides a readily available age value for each customer, facilitating demographic analysis and risk assessment within the customer data.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `age` column in the `stg_customers` table stores the customer's age, calculated as the difference in years between their date of birth and the current date. This column provides a readily available age value for each customer, facilitating demographic analysis and risk assessment within the customer data."
        },
        {
          "name": "months_as_customer",
          "type": "BIGINT",
          "description": "This column, `months_as_customer`, stores the number of months a customer has been with the company. It's calculated as the difference in months between the customer's `joining_date` and the current date. This field is crucial for understanding customer tenure and can be used in segmentation and risk analysis.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `months_as_customer`, stores the number of months a customer has been with the company. It's calculated as the difference in months between the customer's `joining_date` and the current date. This field is crucial for understanding customer tenure and can be used in segmentation and risk analysis."
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "`dbt_updated_at` stores the timestamp when the `stg_customers` model was last refreshed. This column provides a record of the data's freshness, allowing users to understand when the customer data was last updated and incorporated into the staging layer. It's populated using `CURRENT_TIMESTAMP` during the model's execution.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`dbt_updated_at` stores the timestamp when the `stg_customers` model was last refreshed. This column provides a record of the data's freshness, allowing users to understand when the customer data was last updated and incorporated into the staging layer. It's populated using `CURRENT_TIMESTAMP` during the model's execution."
        },
        {
          "name": "_dbt_source_project",
          "type": "VARCHAR",
          "description": "This column, `_dbt_source_project`, stores the name of the dbt project from which the customer data originates, specifically \"customer_risk\".  It serves as a metadata field, allowing for easy identification of the source project within the `stg_customers` staging model. This is useful for lineage tracking and understanding the data's origin.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `_dbt_source_project`, stores the name of the dbt project from which the customer data originates, specifically \"customer_risk\".  It serves as a metadata field, allowing for easy identification of the source project within the `stg_customers` staging model. This is useful for lineage tracking and understanding the data's origin."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'customers', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('customers') }}\n)\n\nSELECT\n    customer_id,\n    first_name,\n    last_name,\n    email,\n    phone,\n    address,\n    city,\n    state,\n    zip_code,\n    CAST(date_of_birth AS DATE) AS date_of_birth,\n    gender,\n    CAST(joining_date AS DATE) AS joining_date,\n    -- Derived fields\n    CONCAT(first_name, ' ', last_name) AS customer_name,\n    DATEDIFF('year', date_of_birth, CURRENT_DATE()) AS age,\n    DATEDIFF('month', joining_date, CURRENT_DATE()) AS months_as_customer,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'customer_risk' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_customers.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "customers",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.customer_risk.stg_customers",
        "metadata": {
          "type": "VIEW",
          "schema": "customer_risk_staging",
          "name": "stg_customers",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `stg_customers` dbt model in the `customer_risk` project serves as a staging layer for customer data. It transforms raw customer data from the `customers` source, casting date fields and deriving new columns. This model produces a view containing cleaned and enriched customer information, including calculated fields like `customer_name`, `age`, and `months_as_customer`.  It plays a crucial role in the data pipeline by preparing customer data for downstream analysis and modeling, providing a standardized and easily consumable dataset."
    },
    {
      "id": "c3",
      "name": "mart_customer_risk_profile",
      "project": "customer_risk",
      "description": "The `mart_customer_risk_profile` dbt model in the `customer_risk` project generates a customer-level risk profile. It consolidates customer information with risk-related metrics, including age, credit score, and claim history. This model materializes as a table and serves as a central source for customer risk analysis, providing key insights for segmentation and proactive risk management.  Crucially, it enriches data from `int_customer_risk_enriched` and integrates claim data from the `claims_processing` project, calculating aggregated claim statistics like total claims, amounts, and settlement times. The model also includes conditional logic to handle the absence of the `mart_claims_analysis` model, ensuring robustness.",
      "columns": [
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for each customer, represented as a VARCHAR string.  It serves as the primary key for the `mart_customer_risk_profile` table, linking customer information with their associated risk metrics and claim data.  This ID is used to join customer data from various sources, enabling comprehensive customer risk profiling.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for each customer, represented as a VARCHAR string.  It serves as the primary key for the `mart_customer_risk_profile` table, linking customer information with their associated risk metrics and claim data.  This ID is used to join customer data from various sources, enabling comprehensive customer risk profiling."
        },
        {
          "name": "customer_name",
          "type": "VARCHAR",
          "description": "This column stores the customer's full name.  It's used to identify and label individual customer risk profiles within the `mart_customer_risk_profile` table.  This allows for easy identification and reporting on customer risk.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's full name.  It's used to identify and label individual customer risk profiles within the `mart_customer_risk_profile` table.  This allows for easy identification and reporting on customer risk."
        },
        {
          "name": "email",
          "type": "VARCHAR",
          "description": "This column stores the customer's email address. It's used to identify and link customer records within the `mart_customer_risk_profile` model. This allows for customer-level analysis and integration of data from various sources.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's email address. It's used to identify and link customer records within the `mart_customer_risk_profile` model. This allows for customer-level analysis and integration of data from various sources."
        },
        {
          "name": "city",
          "type": "VARCHAR",
          "description": "The `city` column stores the customer's city of residence. This information is used to enrich the customer risk profile, potentially enabling risk segmentation based on geographic location and contributing to a more comprehensive understanding of customer risk factors.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `city` column stores the customer's city of residence. This information is used to enrich the customer risk profile, potentially enabling risk segmentation based on geographic location and contributing to a more comprehensive understanding of customer risk factors."
        },
        {
          "name": "state",
          "type": "VARCHAR",
          "description": "The `state` column stores the customer's state of residence as a two-letter abbreviation (e.g., CA, NY). This column is crucial for customer segmentation and risk analysis, enabling the identification of regional risk patterns. It is inherited from the `int_customer_risk_enriched` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `state` column stores the customer's state of residence as a two-letter abbreviation (e.g., CA, NY). This column is crucial for customer segmentation and risk analysis, enabling the identification of regional risk patterns. It is inherited from the `int_customer_risk_enriched` model."
        },
        {
          "name": "age",
          "type": "BIGINT",
          "description": "The `age` column stores the customer's age as a whole number (BIGINT). This column is a key input for calculating risk profiles within the `mart_customer_risk_profile` model, contributing to risk scoring and segmentation. Age is directly used in the `age_adjusted_risk_score` calculation, influencing the overall risk assessment.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `age` column stores the customer's age as a whole number (BIGINT). This column is a key input for calculating risk profiles within the `mart_customer_risk_profile` model, contributing to risk scoring and segmentation. Age is directly used in the `age_adjusted_risk_score` calculation, influencing the overall risk assessment."
        },
        {
          "name": "months_as_customer",
          "type": "BIGINT",
          "description": "`months_as_customer` represents the number of months a customer has been active. This column, stored as a BIGINT, is crucial for understanding customer tenure and its potential correlation with risk factors within the customer risk profile.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`months_as_customer` represents the number of months a customer has been active. This column, stored as a BIGINT, is crucial for understanding customer tenure and its potential correlation with risk factors within the customer risk profile."
        },
        {
          "name": "credit_score",
          "type": "INTEGER",
          "description": "`credit_score`: This column stores a customer's credit score as an integer. It's a key input for the customer risk profile, used to assess a customer's financial risk.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`credit_score`: This column stores a customer's credit score as an integer. It's a key input for the customer risk profile, used to assess a customer's financial risk."
        },
        {
          "name": "credit_rating",
          "type": "VARCHAR",
          "description": "The `credit_rating` column in the `mart_customer_risk_profile` table stores a customer's credit rating, likely represented as a string (e.g., \"A\", \"B\", \"C\"). This rating is a key component of the customer's risk profile, used for segmentation and risk assessment alongside other metrics like credit score and claim history.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `credit_rating` column in the `mart_customer_risk_profile` table stores a customer's credit rating, likely represented as a string (e.g., \"A\", \"B\", \"C\"). This rating is a key component of the customer's risk profile, used for segmentation and risk assessment alongside other metrics like credit score and claim history."
        },
        {
          "name": "claim_frequency",
          "type": "VARCHAR",
          "description": "`claim_frequency` represents the frequency of claims filed by a customer, likely a calculated metric. This VARCHAR column stores the claim frequency, which is used to assess a customer's risk profile within the `mart_customer_risk_profile` model. This data is crucial for understanding a customer's claim history and contributing to their overall risk assessment.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`claim_frequency` represents the frequency of claims filed by a customer, likely a calculated metric. This VARCHAR column stores the claim frequency, which is used to assess a customer's risk profile within the `mart_customer_risk_profile` model. This data is crucial for understanding a customer's claim history and contributing to their overall risk assessment."
        },
        {
          "name": "risk_score",
          "type": "DOUBLE",
          "description": "The `risk_score` column in the `mart_customer_risk_profile` table stores a numerical representation of a customer's overall risk. This score is a key metric for customer risk profiling, likely derived from a combination of factors like age, credit rating, and claim history, as seen in the SQL context. It's used for customer segmentation and proactive risk management.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `risk_score` column in the `mart_customer_risk_profile` table stores a numerical representation of a customer's overall risk. This score is a key metric for customer risk profiling, likely derived from a combination of factors like age, credit rating, and claim history, as seen in the SQL context. It's used for customer segmentation and proactive risk management."
        },
        {
          "name": "age_adjusted_risk_score",
          "type": "DOUBLE",
          "description": "The `age_adjusted_risk_score` column stores a customer's risk score, adjusted for age. This double-precision value represents the customer's risk profile, likely calculated based on factors like credit score and claim history, and is used for customer segmentation and risk management.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `age_adjusted_risk_score` column stores a customer's risk score, adjusted for age. This double-precision value represents the customer's risk profile, likely calculated based on factors like credit score and claim history, and is used for customer segmentation and risk management."
        },
        {
          "name": "previous_claims_count",
          "type": "INTEGER",
          "description": "`previous_claims_count` stores the total number of claims a customer has filed prior to the current analysis period. This integer value is a key component of the customer risk profile, contributing to the overall risk assessment and potentially influencing customer segmentation. It's derived from the `claims_processing` project and used to understand a customer's claim history.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`previous_claims_count` stores the total number of claims a customer has filed prior to the current analysis period. This integer value is a key component of the customer risk profile, contributing to the overall risk assessment and potentially influencing customer segmentation. It's derived from the `claims_processing` project and used to understand a customer's claim history."
        },
        {
          "name": "risk_category",
          "type": "VARCHAR",
          "description": "`risk_category` categorizes a customer's risk profile, likely based on factors like age-adjusted risk score and previous claims. This column facilitates customer segmentation and risk analysis by providing a simplified, high-level view of each customer's risk level. The specific categories (e.g., \"Low,\" \"Medium,\" \"High\") are not defined, but the column's purpose is to group customers for targeted risk management strategies.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`risk_category` categorizes a customer's risk profile, likely based on factors like age-adjusted risk score and previous claims. This column facilitates customer segmentation and risk analysis by providing a simplified, high-level view of each customer's risk level. The specific categories (e.g., \"Low,\" \"Medium,\" \"High\") are not defined, but the column's purpose is to group customers for targeted risk management strategies."
        },
        {
          "name": "customer_segment",
          "type": "VARCHAR",
          "description": "The `customer_segment` column in the `mart_customer_risk_profile` table categorizes customers based on their risk profile. This VARCHAR column stores the assigned customer segment, facilitating risk-based segmentation and enabling targeted analysis and proactive risk management. The specific segmentation logic is not explicitly defined in the context, but it is derived from the customer's risk profile, likely considering factors like age, credit score, and claim history.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `customer_segment` column in the `mart_customer_risk_profile` table categorizes customers based on their risk profile. This VARCHAR column stores the assigned customer segment, facilitating risk-based segmentation and enabling targeted analysis and proactive risk management. The specific segmentation logic is not explicitly defined in the context, but it is derived from the customer's risk profile, likely considering factors like age, credit score, and claim history."
        },
        {
          "name": "total_claims",
          "type": "INTEGER",
          "description": "`total_claims` stores the total number of claims associated with a customer. This integer value is a key metric within the customer risk profile, used to assess a customer's claim history and inform risk scoring calculations. The value is derived from aggregating claim data from the `claims_processing` project.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`total_claims` stores the total number of claims associated with a customer. This integer value is a key metric within the customer risk profile, used to assess a customer's claim history and inform risk scoring calculations. The value is derived from aggregating claim data from the `claims_processing` project."
        },
        {
          "name": "total_claim_amount",
          "type": "INTEGER",
          "description": "This column, `total_claim_amount`, stores the sum of all claim amounts for a given customer. It represents the total financial exposure related to claims filed by a customer, providing a key metric for assessing their overall risk profile within the `mart_customer_risk_profile` model. This value is aggregated from the `claims_processing` project.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `total_claim_amount`, stores the sum of all claim amounts for a given customer. It represents the total financial exposure related to claims filed by a customer, providing a key metric for assessing their overall risk profile within the `mart_customer_risk_profile` model. This value is aggregated from the `claims_processing` project."
        },
        {
          "name": "total_settlement_amount",
          "type": "INTEGER",
          "description": "`total_settlement_amount` stores the sum of all settlement amounts for a given customer, derived from the `claims_processing` project. This integer value represents the total monetary value paid out to a customer across all settled claims, providing a key metric for assessing customer risk and claim history. The value is zero if no claims data is available.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`total_settlement_amount` stores the sum of all settlement amounts for a given customer, derived from the `claims_processing` project. This integer value represents the total monetary value paid out to a customer across all settled claims, providing a key metric for assessing customer risk and claim history. The value is zero if no claims data is available."
        },
        {
          "name": "avg_days_to_settle",
          "type": "INTEGER",
          "description": "`avg_days_to_settle` stores the average number of days it takes to settle a customer's claims, calculated from the `claims_processing` project. This integer value provides a key metric for understanding customer risk by indicating the typical duration of claim resolution. This is a key metric for the customer risk profile.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`avg_days_to_settle` stores the average number of days it takes to settle a customer's claims, calculated from the `claims_processing` project. This integer value provides a key metric for understanding customer risk by indicating the typical duration of claim resolution. This is a key metric for the customer risk profile."
        },
        {
          "name": "settled_claims_count",
          "type": "INTEGER",
          "description": "`settled_claims_count` represents the total number of claims for a customer that have been successfully settled. This integer column is crucial for understanding a customer's claim history and is used in the `mart_customer_risk_profile` model to assess their risk profile. The value is derived by summing the number of claims with a 'SETTLED' status.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`settled_claims_count` represents the total number of claims for a customer that have been successfully settled. This integer column is crucial for understanding a customer's claim history and is used in the `mart_customer_risk_profile` model to assess their risk profile. The value is derived by summing the number of claims with a 'SETTLED' status."
        },
        {
          "name": "denied_claims_count",
          "type": "INTEGER",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "most_recent_claim_date",
          "type": "DATE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "claims_adjusted_risk_score",
          "type": "DOUBLE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "claim_denial_rate",
          "type": "DOUBLE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "risk_source",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "claims_source",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        }
      ],
      "sql": "{{\n    config(\n        materialized='table',\n        tags=['mart', 'customers', 'risk', 'daily']\n    )\n}}\n\nWITH customer_risk_enriched AS (\n    SELECT * FROM {{ ref('int_customer_risk_enriched') }}\n),\n\n-- Reference to claims data from claims processing project\ncustomer_claims AS (\n    {% if execute %}\n        {% if adapter.get_relation(this.database, 'mart', 'mart_claims_analysis') %}\n            SELECT \n                customer_id,\n                COUNT(*) AS total_claims,\n                SUM(claim_amount) AS total_claim_amount,\n                SUM(settlement_amount_clean) AS total_settlement_amount,\n                AVG(days_to_settle) AS avg_days_to_settle,\n                SUM(CASE WHEN claim_status = 'SETTLED' THEN 1 ELSE 0 END) AS settled_claims_count,\n                SUM(CASE WHEN claim_status = 'DENIED' THEN 1 ELSE 0 END) AS denied_claims_count,\n                MAX(claim_date) AS most_recent_claim_date,\n                'claims_processing' AS _dbt_source_project\n            FROM {{ ref('claims_processing', 'mart_claims_analysis') }}\n            GROUP BY customer_id\n        {% else %}\n            SELECT\n                'CU0000' AS customer_id,\n                0 AS total_claims,\n                0 AS total_claim_amount,\n                0 AS total_settlement_amount,\n                0 AS avg_days_to_settle,\n                0 AS settled_claims_count,\n                0 AS denied_claims_count,\n                CAST('2000-01-01' AS DATE) AS most_recent_claim_date,\n                'claims_processing' AS _dbt_source_project\n            WHERE 1=0\n        {% endif %}\n    {% else %}\n        SELECT\n            'CU0000' AS customer_id,\n            0 AS total_claims,\n            0 AS total_claim_amount,\n            0 AS total_settlement_amount,\n            0 AS avg_days_to_settle,\n            0 AS settled_claims_count,\n            0 AS denied_claims_count,\n            CAST('2000-01-01' AS DATE) AS most_recent_claim_date,\n            'claims_processing' AS _dbt_source_project\n        WHERE 1=0\n    {% endif %}\n)\n\nSELECT\n    cr.customer_id,\n    cr.customer_name,\n    cr.email,\n    cr.city,\n    cr.state,\n    cr.age,\n    cr.months_as_customer,\n    cr.credit_score,\n    cr.credit_rating,\n    cr.claim_frequency,\n    cr.risk_score,\n    cr.age_adjusted_risk_score,\n    cr.previous_claims_count,\n    cr.risk_category,\n    cr.customer_segment,\n    -- Claims information from claims processing\n    cc.total_claims,\n    cc.total_claim_amount,\n    cc.total_settlement_amount,\n    cc.avg_days_to_settle,\n    cc.settled_claims_count,\n    cc.denied_claims_count,\n    cc.most_recent_claim_date,\n    -- Risk scoring with claim data\n    CASE\n        WHEN cc.total_claims > 0 THEN\n            cr.age_adjusted_risk_score * (1 + (cc.total_claims / 10))\n        ELSE\n            cr.age_adjusted_risk_score\n    END AS claims_adjusted_risk_score,\n    -- Denial ratio\n    CASE\n        WHEN cc.total_claims > 0 THEN \n            ROUND(cc.denied_claims_count / cc.total_claims * 100, 2)\n        ELSE 0\n    END AS claim_denial_rate,\n    -- Cross project attribution\n    cr._dbt_source_project AS risk_source,\n    cc._dbt_source_project AS claims_source,\n    -- Metadata\n    CURRENT_TIMESTAMP AS dbt_updated_at\nFROM customer_risk_enriched cr\nLEFT JOIN customer_claims cc ON cr.customer_id = cc.customer_id",
      "materialized": "table",
      "schema": "mart",
      "file_path": "models/mart/mart_customer_risk_profile.sql",
      "database": "insurance_data",
      "tags": [
        "mart",
        "customers",
        "risk",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.customer_risk.mart_customer_risk_profile",
        "metadata": {
          "type": "BASE TABLE",
          "schema": "customer_risk_mart",
          "name": "mart_customer_risk_profile",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `mart_customer_risk_profile` dbt model in the `customer_risk` project generates a customer-level risk profile. It consolidates customer information with risk-related metrics, including age, credit score, and claim history. This model materializes as a table and serves as a central source for customer risk analysis, providing key insights for segmentation and proactive risk management.  Crucially, it enriches data from `int_customer_risk_enriched` and integrates claim data from the `claims_processing` project, calculating aggregated claim statistics like total claims, amounts, and settlement times. The model also includes conditional logic to handle the absence of the `mart_claims_analysis` model, ensuring robustness."
    },
    {
      "id": "c4",
      "name": "int_customer_risk_enriched",
      "project": "customer_risk",
      "description": "The `int_customer_risk_enriched` dbt model enriches customer data with risk assessment information. It joins customer details from `stg_customers` with risk factors from `stg_risk_factors`, linking them by `customer_id`. This model produces a comprehensive view of each customer, including demographic data, risk scores, and derived customer segments. Key transformations include an age-adjusted risk score and customer segmentation based on tenure and risk category, providing valuable insights for customer risk analysis and segmentation. This intermediate model serves as a foundation for downstream analyses and reporting on customer risk profiles.",
      "columns": [
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for each customer, sourced from the `stg_customers` table.  It serves as the primary key for joining customer data with risk assessment information within the `int_customer_risk_enriched` model. This `customer_id` enables the association of customer details with their corresponding risk profiles.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for each customer, sourced from the `stg_customers` table.  It serves as the primary key for joining customer data with risk assessment information within the `int_customer_risk_enriched` model. This `customer_id` enables the association of customer details with their corresponding risk profiles."
        },
        {
          "name": "customer_name",
          "type": "VARCHAR",
          "description": "This column stores the customer's full name, retrieved from the `stg_customers` source. It provides a human-readable identifier for each customer within the enriched risk assessment model. This allows for easy identification and reporting on individual customer risk profiles.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's full name, retrieved from the `stg_customers` source. It provides a human-readable identifier for each customer within the enriched risk assessment model. This allows for easy identification and reporting on individual customer risk profiles."
        },
        {
          "name": "email",
          "type": "VARCHAR",
          "description": "This column stores the customer's email address, sourced from the `stg_customers` table. It's included to provide a means of contacting the customer and is a core customer attribute used for identification and communication within the `int_customer_risk_enriched` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's email address, sourced from the `stg_customers` table. It's included to provide a means of contacting the customer and is a core customer attribute used for identification and communication within the `int_customer_risk_enriched` model."
        },
        {
          "name": "phone",
          "type": "VARCHAR",
          "description": "This column stores the customer's phone number as a string.  It's included to provide contact information within the enriched customer profile.  This allows for direct communication and is a key piece of customer demographic data.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's phone number as a string.  It's included to provide contact information within the enriched customer profile.  This allows for direct communication and is a key piece of customer demographic data."
        },
        {
          "name": "address",
          "type": "VARCHAR",
          "description": "The `address` column stores the customer's street address as a string. This information is pulled from the `stg_customers` source and is used to provide customer demographic data within the enriched customer risk profile. This column is essential for identifying customer location.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `address` column stores the customer's street address as a string. This information is pulled from the `stg_customers` source and is used to provide customer demographic data within the enriched customer risk profile. This column is essential for identifying customer location."
        },
        {
          "name": "city",
          "type": "VARCHAR",
          "description": "This column stores the customer's city of residence, extracted from the `stg_customers` source.  It provides demographic information crucial for understanding customer profiles within the `int_customer_risk_enriched` model. This data is used alongside other customer details to facilitate risk analysis and customer segmentation.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's city of residence, extracted from the `stg_customers` source.  It provides demographic information crucial for understanding customer profiles within the `int_customer_risk_enriched` model. This data is used alongside other customer details to facilitate risk analysis and customer segmentation."
        },
        {
          "name": "state",
          "type": "VARCHAR",
          "description": "The `state` column stores the customer's state of residence as a VARCHAR string. This column is used to provide customer demographic information within the enriched customer risk profile. It is sourced directly from the `stg_customers` table and is essential for location-based analysis.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `state` column stores the customer's state of residence as a VARCHAR string. This column is used to provide customer demographic information within the enriched customer risk profile. It is sourced directly from the `stg_customers` table and is essential for location-based analysis."
        },
        {
          "name": "zip_code",
          "type": "INTEGER",
          "description": "This column stores the customer's zip code as an integer. It's used to provide customer location information within the `int_customer_risk_enriched` model, which is essential for demographic analysis and potentially for risk assessment based on geographic factors.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's zip code as an integer. It's used to provide customer location information within the `int_customer_risk_enriched` model, which is essential for demographic analysis and potentially for risk assessment based on geographic factors."
        },
        {
          "name": "date_of_birth",
          "type": "DATE",
          "description": "This column stores the customer's date of birth. It's used to calculate the customer's age, which is then used in the age-adjusted risk score calculation within the model. This information is crucial for understanding customer demographics and risk profiles.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's date of birth. It's used to calculate the customer's age, which is then used in the age-adjusted risk score calculation within the model. This information is crucial for understanding customer demographics and risk profiles."
        },
        {
          "name": "gender",
          "type": "VARCHAR",
          "description": "This column stores the customer's self-identified gender as a string value. It's included to provide demographic information about the customer within the enriched risk profile. This data is used for customer segmentation and analysis, potentially influencing risk assessments or marketing strategies.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's self-identified gender as a string value. It's included to provide demographic information about the customer within the enriched risk profile. This data is used for customer segmentation and analysis, potentially influencing risk assessments or marketing strategies."
        },
        {
          "name": "joining_date",
          "type": "DATE",
          "description": "`joining_date` stores the date when the customer first joined the company. This date is crucial for calculating customer tenure and segmenting customers based on their relationship length, as used in the `customer_segment` calculation. This column helps in understanding customer lifecycle and behavior.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`joining_date` stores the date when the customer first joined the company. This date is crucial for calculating customer tenure and segmenting customers based on their relationship length, as used in the `customer_segment` calculation. This column helps in understanding customer lifecycle and behavior."
        },
        {
          "name": "age",
          "type": "BIGINT",
          "description": "This column stores the customer's age as a whole number.  It's used in the `age_adjusted_risk_score` calculation, where risk scores are increased for customers under 25 or over 70. This age information is also likely used for customer segmentation.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's age as a whole number.  It's used in the `age_adjusted_risk_score` calculation, where risk scores are increased for customers under 25 or over 70. This age information is also likely used for customer segmentation."
        },
        {
          "name": "months_as_customer",
          "type": "BIGINT",
          "description": "This column, `months_as_customer`, stores the number of months a customer has been associated with the business, represented as a whole number. It's a key input for customer segmentation within the `int_customer_risk_enriched` model, helping to categorize customers based on their tenure. This value is likely calculated based on the difference between the current date and the customer's joining date.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `months_as_customer`, stores the number of months a customer has been associated with the business, represented as a whole number. It's a key input for customer segmentation within the `int_customer_risk_enriched` model, helping to categorize customers based on their tenure. This value is likely calculated based on the difference between the current date and the customer's joining date."
        },
        {
          "name": "risk_id",
          "type": "VARCHAR",
          "description": "The `risk_id` column stores a unique identifier for the risk assessment associated with a customer. This VARCHAR value links customer records to specific risk assessments from the `stg_risk_factors` table, enabling the association of risk scores and other risk-related details with each customer. This ID is crucial for understanding the specific risk profile applied to a customer.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "The `risk_id` column stores a unique identifier for the risk assessment associated with a customer. This VARCHAR value links customer records to specific risk assessments from the `stg_risk_factors` table, enabling the association of risk scores and other risk-related details with each customer. This ID is crucial for understanding the specific risk profile applied to a customer."
        },
        {
          "name": "assessment_date",
          "type": "DATE",
          "description": "`assessment_date` stores the date when the customer's risk assessment was performed. This date is crucial for understanding the recency of risk evaluations and tracking changes in customer risk profiles over time within the `int_customer_risk_enriched` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`assessment_date` stores the date when the customer's risk assessment was performed. This date is crucial for understanding the recency of risk evaluations and tracking changes in customer risk profiles over time within the `int_customer_risk_enriched` model."
        },
        {
          "name": "credit_score",
          "type": "INTEGER",
          "description": "The `credit_score` column stores an integer representing a customer's creditworthiness, likely sourced from a risk assessment. This score is a key component of the customer risk profile, used to evaluate a customer's financial risk. The integer data type suggests a numerical scale, potentially reflecting a higher score indicating lower risk.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `credit_score` column stores an integer representing a customer's creditworthiness, likely sourced from a risk assessment. This score is a key component of the customer risk profile, used to evaluate a customer's financial risk. The integer data type suggests a numerical scale, potentially reflecting a higher score indicating lower risk."
        },
        {
          "name": "credit_rating",
          "type": "VARCHAR",
          "description": "The `credit_rating` column in the `int_customer_risk_enriched` model stores a customer's credit rating, likely sourced from `stg_risk_factors`. This VARCHAR field provides a categorical assessment of a customer's creditworthiness, contributing to the overall customer risk profile and segmentation within the model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `credit_rating` column in the `int_customer_risk_enriched` model stores a customer's credit rating, likely sourced from `stg_risk_factors`. This VARCHAR field provides a categorical assessment of a customer's creditworthiness, contributing to the overall customer risk profile and segmentation within the model."
        },
        {
          "name": "claim_frequency",
          "type": "VARCHAR",
          "description": "`claim_frequency` stores a customer's claim frequency, likely represented as a string value. This column, sourced from `stg_risk_factors`, provides a key input for assessing customer risk within the `int_customer_risk_enriched` model. It contributes to the overall risk profile and potentially influences customer segmentation.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`claim_frequency` stores a customer's claim frequency, likely represented as a string value. This column, sourced from `stg_risk_factors`, provides a key input for assessing customer risk within the `int_customer_risk_enriched` model. It contributes to the overall risk profile and potentially influences customer segmentation."
        },
        {
          "name": "risk_score",
          "type": "DOUBLE",
          "description": "The `risk_score` column in the `int_customer_risk_enriched` model stores a numerical risk assessment for each customer, likely derived from the `stg_risk_factors` table. This score represents the customer's inherent risk profile before any age adjustments are applied. It serves as a key input for calculating the `age_adjusted_risk_score` and customer segmentation.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `risk_score` column in the `int_customer_risk_enriched` model stores a numerical risk assessment for each customer, likely derived from the `stg_risk_factors` table. This score represents the customer's inherent risk profile before any age adjustments are applied. It serves as a key input for calculating the `age_adjusted_risk_score` and customer segmentation."
        },
        {
          "name": "previous_claims_count",
          "type": "INTEGER",
          "description": "`previous_claims_count` stores the number of claims a customer has filed previously. This integer value is a key risk factor used in the customer risk assessment, contributing to the overall risk score and customer segmentation within the `int_customer_risk_enriched` model. This data helps identify customers with a history of claims, indicating potential higher risk.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`previous_claims_count` stores the number of claims a customer has filed previously. This integer value is a key risk factor used in the customer risk assessment, contributing to the overall risk score and customer segmentation within the `int_customer_risk_enriched` model. This data helps identify customers with a history of claims, indicating potential higher risk."
        },
        {
          "name": "risk_category",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "days_since_last_assessment",
          "type": "BIGINT",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "age_adjusted_risk_score",
          "type": "DOUBLE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "customer_segment",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "_dbt_source_project",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['intermediate', 'customers', 'risk', 'daily']\n    )\n}}\n\nWITH customers AS (\n    SELECT * FROM {{ ref('stg_customers') }}\n),\n\nrisk_factors AS (\n    SELECT * FROM {{ ref('stg_risk_factors') }}\n)\n\nSELECT\n    c.customer_id,\n    c.customer_name,\n    c.email,\n    c.phone,\n    c.address,\n    c.city,\n    c.state,\n    c.zip_code,\n    c.date_of_birth,\n    c.gender,\n    c.joining_date,\n    c.age,\n    c.months_as_customer,\n    -- Risk information\n    r.risk_id,\n    r.assessment_date,\n    r.credit_score,\n    r.credit_rating,\n    r.claim_frequency,\n    r.risk_score,\n    r.previous_claims_count,\n    r.risk_category,\n    r.days_since_last_assessment,\n    -- Risk factor adjustments\n    CASE\n        WHEN c.age < 25 OR c.age > 70 THEN r.risk_score * 1.2\n        ELSE r.risk_score\n    END AS age_adjusted_risk_score,\n    -- Customer segments\n    CASE\n        WHEN c.months_as_customer >= 36 AND r.risk_category = 'LOW_RISK' THEN 'PREMIUM'\n        WHEN c.months_as_customer >= 24 AND r.risk_category IN ('LOW_RISK', 'MEDIUM_RISK') THEN 'PREFERRED'\n        WHEN c.months_as_customer >= 12 THEN 'STANDARD'\n        ELSE 'NEW'\n    END AS customer_segment,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    c._dbt_source_project\nFROM customers c\nLEFT JOIN risk_factors r ON c.customer_id = r.customer_id",
      "materialized": "view",
      "schema": "intermediate",
      "file_path": "models/intermediate/int_customer_risk_enriched.sql",
      "database": "insurance_data",
      "tags": [
        "intermediate",
        "customers",
        "risk",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.customer_risk.int_customer_risk_enriched",
        "metadata": {
          "type": "VIEW",
          "schema": "customer_risk_intermediate",
          "name": "int_customer_risk_enriched",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `int_customer_risk_enriched` dbt model enriches customer data with risk assessment information. It joins customer details from `stg_customers` with risk factors from `stg_risk_factors`, linking them by `customer_id`. This model produces a comprehensive view of each customer, including demographic data, risk scores, and derived customer segments. Key transformations include an age-adjusted risk score and customer segmentation based on tenure and risk category, providing valuable insights for customer risk analysis and segmentation. This intermediate model serves as a foundation for downstream analyses and reporting on customer risk profiles."
    },
    {
      "id": "p1",
      "name": "stg_policies",
      "project": "policy_management",
      "description": "The `stg_policies` dbt model in the `policy_management` project serves as a staging layer for policy data. It transforms raw policy information from the `policies` source, casting date fields and adding derived columns. This model produces a standardized view of policy data, including calculated fields like `policy_term_days`, `effective_status`, and `coverage_premium_ratio`.  It plays a crucial role in the data pipeline by cleaning and enriching the raw data, making it ready for downstream analysis and reporting.",
      "columns": [
        {
          "name": "policy_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for each insurance policy, sourced from the `policies` source table.  As a `VARCHAR` field, it represents the policy's identification code within the `stg_policies` staging model, facilitating data linkage and analysis of individual policies.  This `policy_id` is crucial for tracking and reporting on specific policy details.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for each insurance policy, sourced from the `policies` source table.  As a `VARCHAR` field, it represents the policy's identification code within the `stg_policies` staging model, facilitating data linkage and analysis of individual policies.  This `policy_id` is crucial for tracking and reporting on specific policy details."
        },
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "This column, `customer_id`, stores a unique identifier for the customer associated with the policy.  Within the `stg_policies` model, this `customer_id` links each policy to a specific customer, enabling analysis of policy data by customer. This is a critical foreign key for joining with customer tables.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column, `customer_id`, stores a unique identifier for the customer associated with the policy.  Within the `stg_policies` model, this `customer_id` links each policy to a specific customer, enabling analysis of policy data by customer. This is a critical foreign key for joining with customer tables."
        },
        {
          "name": "policy_type",
          "type": "VARCHAR",
          "description": "The `policy_type` column in the `stg_policies` table stores the type of insurance policy (e.g., \"Home\", \"Auto\", \"Life\"). This VARCHAR column categorizes policies, enabling filtering and analysis by policy type within the staged policy data. This is a key attribute for understanding the distribution and performance of different insurance products.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `policy_type` column in the `stg_policies` table stores the type of insurance policy (e.g., \"Home\", \"Auto\", \"Life\"). This VARCHAR column categorizes policies, enabling filtering and analysis by policy type within the staged policy data. This is a key attribute for understanding the distribution and performance of different insurance products."
        },
        {
          "name": "start_date",
          "type": "DATE",
          "description": "This column stores the policy's start date as a DATE. It's used to determine the policy's term and effective status within the `stg_policies` model. This date is crucial for calculating the policy's duration and assessing its current validity.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the policy's start date as a DATE. It's used to determine the policy's term and effective status within the `stg_policies` model. This date is crucial for calculating the policy's duration and assessing its current validity."
        },
        {
          "name": "end_date",
          "type": "DATE",
          "description": "This column stores the end date of the policy, indicating when the policy coverage expires.  The `end_date` is cast as a DATE data type during the staging process. This field is crucial for calculating the `policy_term_days` and determining the `effective_status` of the policy.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the end date of the policy, indicating when the policy coverage expires.  The `end_date` is cast as a DATE data type during the staging process. This field is crucial for calculating the `policy_term_days` and determining the `effective_status` of the policy."
        },
        {
          "name": "premium_amount",
          "type": "DOUBLE",
          "description": "The `premium_amount` column in the `stg_policies` table stores the policy's premium amount as a double-precision number. This value represents the total cost of the policy and is used in calculations like the `coverage_premium_ratio`, which helps assess the relationship between coverage and premium. This column is sourced directly from the raw policy data and is essential for financial analysis related to policy pricing and profitability.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `premium_amount` column in the `stg_policies` table stores the policy's premium amount as a double-precision number. This value represents the total cost of the policy and is used in calculations like the `coverage_premium_ratio`, which helps assess the relationship between coverage and premium. This column is sourced directly from the raw policy data and is essential for financial analysis related to policy pricing and profitability."
        },
        {
          "name": "coverage_amount",
          "type": "INTEGER",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "status",
          "type": "VARCHAR",
          "description": "The `status` column in the `stg_policies` table stores the current status of a policy, as ingested from the source system. This column is used in the `effective_status` calculation, which determines a policy's current state (e.g., 'ACTIVE', 'INACTIVE') based on the policy's start and end dates relative to the current date.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `status` column in the `stg_policies` table stores the current status of a policy, as ingested from the source system. This column is used in the `effective_status` calculation, which determines a policy's current state (e.g., 'ACTIVE', 'INACTIVE') based on the policy's start and end dates relative to the current date."
        },
        {
          "name": "agent_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for the agent associated with the policy.  It's sourced from the raw `policies` data and is essential for linking policies to the responsible agent within the `stg_policies` staging model. This allows for analysis of policy performance and other metrics by agent.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for the agent associated with the policy.  It's sourced from the raw `policies` data and is essential for linking policies to the responsible agent within the `stg_policies` staging model. This allows for analysis of policy performance and other metrics by agent."
        },
        {
          "name": "policy_number",
          "type": "VARCHAR",
          "description": "The `policy_number` column in the `stg_policies` staging model stores the unique identifier assigned to each insurance policy. This VARCHAR field is crucial for linking policy records across different systems and is used to identify individual policies within the transformed and enriched policy data.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `policy_number` column in the `stg_policies` staging model stores the unique identifier assigned to each insurance policy. This VARCHAR field is crucial for linking policy records across different systems and is used to identify individual policies within the transformed and enriched policy data."
        },
        {
          "name": "policy_term_days",
          "type": "BIGINT",
          "description": "This column, `policy_term_days`, stores the duration of each policy in days. It's calculated as the difference between the `end_date` and `start_date` of the policy within the `stg_policies` model. This value represents the length of time the policy was active, providing a key metric for understanding policy lifecycles.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `policy_term_days`, stores the duration of each policy in days. It's calculated as the difference between the `end_date` and `start_date` of the policy within the `stg_policies` model. This value represents the length of time the policy was active, providing a key metric for understanding policy lifecycles."
        },
        {
          "name": "effective_status",
          "type": "VARCHAR",
          "description": "The `effective_status` column in the `stg_policies` table indicates the current status of a policy based on its start date. It's a derived field used to categorize policies as 'FUTURE' if the start date is in the future, otherwise 'UNKNOWN', providing a simple indicator of policy activation. This column helps analysts understand the current state of policies relative to the current date.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `effective_status` column in the `stg_policies` table indicates the current status of a policy based on its start date. It's a derived field used to categorize policies as 'FUTURE' if the start date is in the future, otherwise 'UNKNOWN', providing a simple indicator of policy activation. This column helps analysts understand the current state of policies relative to the current date."
        },
        {
          "name": "coverage_premium_ratio",
          "type": "DOUBLE",
          "description": "The `coverage_premium_ratio` column in the `stg_policies` table stores the ratio of the policy's coverage amount to its premium amount, calculated as coverage amount divided by premium amount, rounded to two decimal places. This ratio provides a measure of the value offered by the policy for each unit of premium paid, useful for analyzing policy profitability and pricing strategies.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `coverage_premium_ratio` column in the `stg_policies` table stores the ratio of the policy's coverage amount to its premium amount, calculated as coverage amount divided by premium amount, rounded to two decimal places. This ratio provides a measure of the value offered by the policy for each unit of premium paid, useful for analyzing policy profitability and pricing strategies."
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "`dbt_updated_at` stores the timestamp when the `stg_policies` model was last refreshed. This column, populated using `CURRENT_TIMESTAMP`, provides a record of when the staged policy data was last updated, aiding in data freshness tracking and debugging.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`dbt_updated_at` stores the timestamp when the `stg_policies` model was last refreshed. This column, populated using `CURRENT_TIMESTAMP`, provides a record of when the staged policy data was last updated, aiding in data freshness tracking and debugging."
        },
        {
          "name": "_dbt_source_project",
          "type": "VARCHAR",
          "description": "This column, `_dbt_source_project`, stores the name of the source project from which the policy data originates, specifically \"policy_management\". This metadata field identifies the project responsible for the raw data used in the `stg_policies` model, aiding in data lineage and understanding the data's origin.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `_dbt_source_project`, stores the name of the source project from which the policy data originates, specifically \"policy_management\". This metadata field identifies the project responsible for the raw data used in the `stg_policies` model, aiding in data lineage and understanding the data's origin."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'policies', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('policies') }}\n)\n\nSELECT\n    policy_id,\n    customer_id,\n    policy_type,\n    CAST(start_date AS DATE) AS start_date,\n    CAST(end_date AS DATE) AS end_date,\n    premium_amount,\n    coverage_amount,\n    status,\n    agent_id,\n    policy_number,\n    -- Derived fields\n    DATEDIFF('day', start_date, end_date) AS policy_term_days,\n    CASE\n        WHEN CURRENT_DATE() > end_date THEN 'EXPIRED'\n        WHEN CURRENT_DATE() BETWEEN start_date AND end_date THEN status\n        WHEN CURRENT_DATE() < start_date THEN 'FUTURE'\n        ELSE 'UNKNOWN'\n    END AS effective_status,\n    ROUND(coverage_amount / premium_amount, 2) AS coverage_premium_ratio,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'policy_management' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_policies.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "policies",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.policy_management.stg_policies",
        "metadata": {
          "type": "VIEW",
          "schema": "policy_management_staging",
          "name": "stg_policies",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `stg_policies` dbt model in the `policy_management` project serves as a staging layer for policy data. It transforms raw policy information from the `policies` source, casting date fields and adding derived columns. This model produces a standardized view of policy data, including calculated fields like `policy_term_days`, `effective_status`, and `coverage_premium_ratio`.  It plays a crucial role in the data pipeline by cleaning and enriching the raw data, making it ready for downstream analysis and reporting."
    },
    {
      "id": "p2",
      "name": "stg_agents",
      "project": "policy_management",
      "description": "The `stg_agents` dbt model in the `policy_management` project stages agent data from the `agents` source. It selects and transforms agent information, including agent ID, name, email, and other relevant details. This model derives the `experience_level` based on `years_experience` and adds metadata like `dbt_updated_at` and `_dbt_source_project`. As a staging model, it prepares the raw agent data for further processing and analysis within the data pipeline.",
      "columns": [
        {
          "name": "agent_id",
          "type": "VARCHAR",
          "description": "The `agent_id` column stores a unique identifier for each agent, sourced from the `agents` table. This VARCHAR field is crucial for uniquely identifying agents within the `stg_agents` model, enabling joins and data analysis related to agent performance and characteristics. It serves as a primary key for the agent data in this staging model.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "The `agent_id` column stores a unique identifier for each agent, sourced from the `agents` table. This VARCHAR field is crucial for uniquely identifying agents within the `stg_agents` model, enabling joins and data analysis related to agent performance and characteristics. It serves as a primary key for the agent data in this staging model."
        },
        {
          "name": "agent_name",
          "type": "VARCHAR",
          "description": "This column stores the agent's full name.  It's a key piece of agent information used for identifying and referencing agents within the `stg_agents` staging model.  The `agent_name` is directly sourced from the `agents` source table.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the agent's full name.  It's a key piece of agent information used for identifying and referencing agents within the `stg_agents` staging model.  The `agent_name` is directly sourced from the `agents` source table."
        },
        {
          "name": "agent_email",
          "type": "VARCHAR",
          "description": "The `agent_email` column stores the email address of the agent, sourced from the `agents` table. This column is used to identify and contact agents within the `stg_agents` model, providing a key piece of agent contact information for downstream analysis and reporting.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `agent_email` column stores the email address of the agent, sourced from the `agents` table. This column is used to identify and contact agents within the `stg_agents` model, providing a key piece of agent contact information for downstream analysis and reporting."
        },
        {
          "name": "office_location",
          "type": "VARCHAR",
          "description": "This column, `office_location`, stores the physical location of the agent's office as a string.  It provides context for where the agent is based and is directly sourced from the `agents` source table. This information is crucial for understanding agent distribution and potentially for regional analysis.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `office_location`, stores the physical location of the agent's office as a string.  It provides context for where the agent is based and is directly sourced from the `agents` source table. This information is crucial for understanding agent distribution and potentially for regional analysis."
        },
        {
          "name": "years_experience",
          "type": "INTEGER",
          "description": "This column stores the number of years of experience for each agent, represented as an integer. It's used to determine the agent's `experience_level` within the `stg_agents` model, categorizing agents as JUNIOR, MID, or SENIOR based on their experience. This information helps in understanding agent skill levels and potentially informs performance analysis.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the number of years of experience for each agent, represented as an integer. It's used to determine the agent's `experience_level` within the `stg_agents` model, categorizing agents as JUNIOR, MID, or SENIOR based on their experience. This information helps in understanding agent skill levels and potentially informs performance analysis."
        },
        {
          "name": "specialization",
          "type": "VARCHAR",
          "description": "The `specialization` column in the `stg_agents` table stores a text value indicating the agent's area of expertise. This column directly reflects the agent's professional focus, providing context for their role within the policy management system. This information is sourced directly from the `agents` source table.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `specialization` column in the `stg_agents` table stores a text value indicating the agent's area of expertise. This column directly reflects the agent's professional focus, providing context for their role within the policy management system. This information is sourced directly from the `agents` source table."
        },
        {
          "name": "active",
          "type": "BOOLEAN",
          "description": "The `active` column indicates whether an agent is currently active, storing a boolean value (TRUE/FALSE). This column directly reflects the agent's status within the system, allowing for filtering and analysis of active versus inactive agents. This is a direct representation of the agent's operational status.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `active` column indicates whether an agent is currently active, storing a boolean value (TRUE/FALSE). This column directly reflects the agent's status within the system, allowing for filtering and analysis of active versus inactive agents. This is a direct representation of the agent's operational status."
        },
        {
          "name": "experience_level",
          "type": "VARCHAR",
          "description": "The `experience_level` column stores the agent's experience level, categorized as 'JUNIOR' or 'MID'. This column is derived from the `years_experience` column, providing a simplified view of agent expertise for analysis and reporting within the `stg_agents` model. Agents with 5 or more years of experience are classified as 'MID', otherwise 'JUNIOR'.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `experience_level` column stores the agent's experience level, categorized as 'JUNIOR' or 'MID'. This column is derived from the `years_experience` column, providing a simplified view of agent expertise for analysis and reporting within the `stg_agents` model. Agents with 5 or more years of experience are classified as 'MID', otherwise 'JUNIOR'."
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "_dbt_source_project",
          "type": "VARCHAR",
          "description": "The `_dbt_source_project` column stores the name of the dbt project from which the data originated, in this case, 'policy_management'. This metadata column identifies the source project for lineage and debugging purposes within the data pipeline. It's a VARCHAR field used for tracking the origin of the data.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `_dbt_source_project` column stores the name of the dbt project from which the data originated, in this case, 'policy_management'. This metadata column identifies the source project for lineage and debugging purposes within the data pipeline. It's a VARCHAR field used for tracking the origin of the data."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'agents', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('agents') }}\n)\n\nSELECT\n    agent_id,\n    agent_name,\n    agent_email,\n    office_location,\n    years_experience,\n    specialization,\n    active,\n    -- Derived fields\n    CASE \n        WHEN years_experience >= 10 THEN 'SENIOR'\n        WHEN years_experience >= 5 THEN 'MID'\n        ELSE 'JUNIOR'\n    END AS experience_level,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'policy_management' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_agents.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "agents",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.policy_management.stg_agents",
        "metadata": {
          "type": "VIEW",
          "schema": "policy_management_staging",
          "name": "stg_agents",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `stg_agents` dbt model in the `policy_management` project stages agent data from the `agents` source. It selects and transforms agent information, including agent ID, name, email, and other relevant details. This model derives the `experience_level` based on `years_experience` and adds metadata like `dbt_updated_at` and `_dbt_source_project`. As a staging model, it prepares the raw agent data for further processing and analysis within the data pipeline."
    },
    {
      "id": "p3",
      "name": "int_policies_enriched",
      "project": "policy_management",
      "description": "The `int_policies_enriched` dbt model in the `policy_management` project enriches policy data by joining it with agent information. It processes data from the `stg_policies` and `stg_agents` staging models, creating a view containing policy details alongside corresponding agent attributes like name and office location. This intermediate model serves as a key building block in the data pipeline, providing a consolidated view of policies with agent context.  Crucially, it calculates a `specialization_alignment` flag to indicate whether an agent's specialization matches the policy type and includes metadata fields for tracking.",
      "columns": [
        {
          "name": "policy_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for an insurance policy, represented as a string. It serves as the primary key for the `int_policies_enriched` model, linking policy details to agent information. This allows for the association of policy data with its corresponding agent.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for an insurance policy, represented as a string. It serves as the primary key for the `int_policies_enriched` model, linking policy details to agent information. This allows for the association of policy data with its corresponding agent."
        },
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for the customer associated with the policy.  The `customer_id` is used to link policies to specific customers within the `int_policies_enriched` model, enabling analysis of customer policy portfolios.  The data type of VARCHAR suggests the ID may contain alphanumeric characters.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for the customer associated with the policy.  The `customer_id` is used to link policies to specific customers within the `int_policies_enriched` model, enabling analysis of customer policy portfolios.  The data type of VARCHAR suggests the ID may contain alphanumeric characters."
        },
        {
          "name": "policy_type",
          "type": "VARCHAR",
          "description": "This column, `policy_type`, stores the type of insurance policy (e.g., \"Home\", \"Auto\", \"Life\") as a string.  It's used to categorize policies and, critically, to determine agent specialization alignment within the `specialization_alignment` calculation. This helps assess whether an agent's expertise matches the policy they're managing.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `policy_type`, stores the type of insurance policy (e.g., \"Home\", \"Auto\", \"Life\") as a string.  It's used to categorize policies and, critically, to determine agent specialization alignment within the `specialization_alignment` calculation. This helps assess whether an agent's expertise matches the policy they're managing."
        },
        {
          "name": "start_date",
          "type": "DATE",
          "description": "The `start_date` column in the `int_policies_enriched` table stores the date when the policy coverage begins. This date is critical for understanding the policy's lifecycle and is used in conjunction with `end_date` to determine the policy's active period. It's directly sourced from the `stg_policies` staging model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `start_date` column in the `int_policies_enriched` table stores the date when the policy coverage begins. This date is critical for understanding the policy's lifecycle and is used in conjunction with `end_date` to determine the policy's active period. It's directly sourced from the `stg_policies` staging model."
        },
        {
          "name": "end_date",
          "type": "DATE",
          "description": "The `end_date` column in the `int_policies_enriched` table stores the date when the policy coverage expires. This date is sourced from the `stg_policies` model and is crucial for understanding the policy's duration and active period. It helps in tracking policy lifecycles and identifying when policies are due for renewal or have lapsed.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `end_date` column in the `int_policies_enriched` table stores the date when the policy coverage expires. This date is sourced from the `stg_policies` model and is crucial for understanding the policy's duration and active period. It helps in tracking policy lifecycles and identifying when policies are due for renewal or have lapsed."
        },
        {
          "name": "premium_amount",
          "type": "DOUBLE",
          "description": "This column, `premium_amount`, stores the monetary value of the policy premium as a double-precision floating-point number. It represents the total amount paid by the customer for the policy, a key financial metric used for calculating coverage ratios and understanding policy value within the `int_policies_enriched` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `premium_amount`, stores the monetary value of the policy premium as a double-precision floating-point number. It represents the total amount paid by the customer for the policy, a key financial metric used for calculating coverage ratios and understanding policy value within the `int_policies_enriched` model."
        },
        {
          "name": "coverage_amount",
          "type": "INTEGER",
          "description": "`coverage_amount`: This column stores the integer value representing the monetary coverage amount associated with the policy. It's a key policy detail used for financial analysis and risk assessment within the `int_policies_enriched` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`coverage_amount`: This column stores the integer value representing the monetary coverage amount associated with the policy. It's a key policy detail used for financial analysis and risk assessment within the `int_policies_enriched` model."
        },
        {
          "name": "status",
          "type": "VARCHAR",
          "description": "The `status` column in the `int_policies_enriched` table stores the current status of the policy (e.g., \"Active\", \"Cancelled\", \"Pending\"). This column is crucial for understanding the lifecycle of a policy and filtering data based on its current state. The values are likely derived from the `stg_policies` source data.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `status` column in the `int_policies_enriched` table stores the current status of the policy (e.g., \"Active\", \"Cancelled\", \"Pending\"). This column is crucial for understanding the lifecycle of a policy and filtering data based on its current state. The values are likely derived from the `stg_policies` source data."
        },
        {
          "name": "agent_id",
          "type": "VARCHAR",
          "description": "The `agent_id` column in the `int_policies_enriched` table stores the unique identifier of the agent associated with a specific policy. This VARCHAR field facilitates the join with the `agents` table, enabling the enrichment of policy data with agent details like name and office location. This is a key field for linking policies to their respective agents within the policy management system.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "The `agent_id` column in the `int_policies_enriched` table stores the unique identifier of the agent associated with a specific policy. This VARCHAR field facilitates the join with the `agents` table, enabling the enrichment of policy data with agent details like name and office location. This is a key field for linking policies to their respective agents within the policy management system."
        },
        {
          "name": "policy_number",
          "type": "VARCHAR",
          "description": "The `policy_number` column stores the unique identifier assigned to an insurance policy. This VARCHAR field is essential for linking policy details to their corresponding records within the `int_policies_enriched` model, enabling analysis of policy attributes alongside agent information.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `policy_number` column stores the unique identifier assigned to an insurance policy. This VARCHAR field is essential for linking policy details to their corresponding records within the `int_policies_enriched` model, enabling analysis of policy attributes alongside agent information."
        },
        {
          "name": "policy_term_days",
          "type": "BIGINT",
          "description": "This column, `policy_term_days`, stores the policy term duration in days as a BIGINT. It represents the length of time the policy is active, a key piece of information for understanding policy lifecycles and calculating metrics like premium earned over time. This value is directly sourced from the `stg_policies` staging model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `policy_term_days`, stores the policy term duration in days as a BIGINT. It represents the length of time the policy is active, a key piece of information for understanding policy lifecycles and calculating metrics like premium earned over time. This value is directly sourced from the `stg_policies` staging model."
        },
        {
          "name": "effective_status",
          "type": "VARCHAR",
          "description": "The `effective_status` column in the `int_policies_enriched` table stores the current status of a policy, such as \"Active\" or \"Cancelled\". This column is crucial for understanding the current state of each policy within the enriched view, allowing for filtering and analysis based on policy validity. This status likely reflects the operational state of the policy, providing insights into policy lifecycle.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `effective_status` column in the `int_policies_enriched` table stores the current status of a policy, such as \"Active\" or \"Cancelled\". This column is crucial for understanding the current state of each policy within the enriched view, allowing for filtering and analysis based on policy validity. This status likely reflects the operational state of the policy, providing insights into policy lifecycle."
        },
        {
          "name": "coverage_premium_ratio",
          "type": "DOUBLE",
          "description": "The `coverage_premium_ratio` column in the `int_policies_enriched` table stores the ratio of coverage to premium for each policy, calculated as a double-precision floating-point number. This ratio provides a key metric for understanding the relationship between the coverage amount and the cost of the policy, potentially used for pricing analysis or risk assessment.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `coverage_premium_ratio` column in the `int_policies_enriched` table stores the ratio of coverage to premium for each policy, calculated as a double-precision floating-point number. This ratio provides a key metric for understanding the relationship between the coverage amount and the cost of the policy, potentially used for pricing analysis or risk assessment."
        },
        {
          "name": "agent_name",
          "type": "VARCHAR",
          "description": "The `agent_name` column stores the name of the agent associated with the policy. This column provides agent identification within the `int_policies_enriched` model, enabling analysis of policy performance and characteristics in relation to specific agents. This is a direct join from the `stg_agents` table.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `agent_name` column stores the name of the agent associated with the policy. This column provides agent identification within the `int_policies_enriched` model, enabling analysis of policy performance and characteristics in relation to specific agents. This is a direct join from the `stg_agents` table."
        },
        {
          "name": "office_location",
          "type": "VARCHAR",
          "description": "The `office_location` column stores the physical location of the agent associated with the policy. This VARCHAR field provides context for the agent's geographic presence, enabling analysis of policy distribution by office. It is directly sourced from the `stg_agents` staging model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `office_location` column stores the physical location of the agent associated with the policy. This VARCHAR field provides context for the agent's geographic presence, enabling analysis of policy distribution by office. It is directly sourced from the `stg_agents` staging model."
        },
        {
          "name": "agent_specialization",
          "type": "VARCHAR",
          "description": "This column, `agent_specialization`, stores the specialization of the agent associated with the policy. It provides context for understanding the agent's area of expertise, which is crucial for analyzing policy-agent alignment and potentially identifying areas for agent training or specialization matching. The data is sourced from the `stg_agents` staging model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `agent_specialization`, stores the specialization of the agent associated with the policy. It provides context for understanding the agent's area of expertise, which is crucial for analyzing policy-agent alignment and potentially identifying areas for agent training or specialization matching. The data is sourced from the `stg_agents` staging model."
        },
        {
          "name": "agent_experience",
          "type": "VARCHAR",
          "description": "`agent_experience` stores the experience level of the agent associated with the policy, likely as a text value (e.g., \"Junior\", \"Senior\"). This column provides context on the agent's expertise, which could be useful for analyzing policy performance or identifying training needs. The data type `VARCHAR` suggests the experience level is represented as a string.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`agent_experience` stores the experience level of the agent associated with the policy, likely as a text value (e.g., \"Junior\", \"Senior\"). This column provides context on the agent's expertise, which could be useful for analyzing policy performance or identifying training needs. The data type `VARCHAR` suggests the experience level is represented as a string."
        },
        {
          "name": "specialization_alignment",
          "type": "VARCHAR",
          "description": "The `specialization_alignment` column indicates whether an agent's specialization aligns with the policy type, storing either 'ALIGNED' or 'MISALIGNED'. This column is crucial for understanding the relationship between agent expertise and policy type, calculated by comparing the agent's specialization to the policy type. This helps assess the alignment of agents with the policies they manage.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `specialization_alignment` column indicates whether an agent's specialization aligns with the policy type, storing either 'ALIGNED' or 'MISALIGNED'. This column is crucial for understanding the relationship between agent expertise and policy type, calculated by comparing the agent's specialization to the policy type. This helps assess the alignment of agents with the policies they manage."
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "`dbt_updated_at` stores the timestamp indicating when the policy record was last updated in the source data. This column, inherited from the `stg_policies` source, is used for tracking data freshness and identifying the latest version of a policy within the `int_policies_enriched` model. It's a metadata field useful for auditing and understanding data lineage.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`dbt_updated_at` stores the timestamp indicating when the policy record was last updated in the source data. This column, inherited from the `stg_policies` source, is used for tracking data freshness and identifying the latest version of a policy within the `int_policies_enriched` model. It's a metadata field useful for auditing and understanding data lineage."
        },
        {
          "name": "_dbt_source_project",
          "type": "VARCHAR",
          "description": "This column, `_dbt_source_project`, stores the name of the dbt project from which the policy data originated. It's a metadata field used for lineage and tracking, indicating the source of the policy information within the data pipeline. This helps in understanding data provenance and troubleshooting potential issues related to the `int_policies_enriched` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `_dbt_source_project`, stores the name of the dbt project from which the policy data originated. It's a metadata field used for lineage and tracking, indicating the source of the policy information within the data pipeline. This helps in understanding data provenance and troubleshooting potential issues related to the `int_policies_enriched` model."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['intermediate', 'policies', 'daily']\n    )\n}}\n\nWITH policies AS (\n    SELECT * FROM {{ ref('stg_policies') }}\n),\n\nagents AS (\n    SELECT * FROM {{ ref('stg_agents') }}\n)\n\nSELECT\n    p.policy_id,\n    p.customer_id,\n    p.policy_type,\n    p.start_date,\n    p.end_date,\n    p.premium_amount,\n    p.coverage_amount,\n    p.status,\n    p.agent_id,\n    p.policy_number,\n    p.policy_term_days,\n    p.effective_status,\n    p.coverage_premium_ratio,\n    -- Agent information\n    a.agent_name,\n    a.office_location,\n    a.specialization AS agent_specialization,\n    a.experience_level AS agent_experience,\n    -- Policy-agent alignment\n    CASE\n        WHEN a.specialization = p.policy_type THEN 'ALIGNED'\n        ELSE 'MISALIGNED'\n    END AS specialization_alignment,\n    -- Metadata fields\n    p.dbt_updated_at,\n    p._dbt_source_project\nFROM policies p\nLEFT JOIN agents a ON p.agent_id = a.agent_id",
      "materialized": "view",
      "schema": "intermediate",
      "file_path": "models/intermediate/int_policies_enriched.sql",
      "database": "insurance_data",
      "tags": [
        "intermediate",
        "policies",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.policy_management.int_policies_enriched",
        "metadata": {
          "type": "VIEW",
          "schema": "policy_management_intermediate",
          "name": "int_policies_enriched",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `int_policies_enriched` dbt model in the `policy_management` project enriches policy data by joining it with agent information. It processes data from the `stg_policies` and `stg_agents` staging models, creating a view containing policy details alongside corresponding agent attributes like name and office location. This intermediate model serves as a key building block in the data pipeline, providing a consolidated view of policies with agent context.  Crucially, it calculates a `specialization_alignment` flag to indicate whether an agent's specialization matches the policy type and includes metadata fields for tracking."
    },
    {
      "id": "p4",
      "name": "mart_policy_details",
      "project": "policy_management",
      "description": "The `mart_policy_details` dbt model within the `policy_management` project serves as a central, pre-aggregated view of policy information. It consolidates enriched policy data from the `int_policies_enriched` model and joins it with customer risk profile data from the `customer_risk` project, if available. This model materializes as a table and includes key policy attributes like policy type, dates, premium, coverage, status, and agent details, along with customer risk metrics. The model calculates the `coverage_premium_ratio` and other derived fields, providing a comprehensive, daily-updated dataset for policy analysis and reporting.",
      "columns": [
        {
          "name": "policy_id",
          "type": "VARCHAR",
          "description": "The `policy_id` column stores a unique identifier for each insurance policy. This VARCHAR field is crucial for joining policy details with customer risk data and tracking individual policies within the `mart_policy_details` model. It serves as a primary key or foreign key, enabling analysis and reporting on specific policies.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "The `policy_id` column stores a unique identifier for each insurance policy. This VARCHAR field is crucial for joining policy details with customer risk data and tracking individual policies within the `mart_policy_details` model. It serves as a primary key or foreign key, enabling analysis and reporting on specific policies."
        },
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "The `customer_id` column stores a unique identifier for each customer, represented as a VARCHAR. This column links policy details in the `mart_policy_details` model to the corresponding customer, enabling analysis of policy characteristics by customer. The SQL context suggests a default value of 'CU0000' is used when customer data is unavailable.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "The `customer_id` column stores a unique identifier for each customer, represented as a VARCHAR. This column links policy details in the `mart_policy_details` model to the corresponding customer, enabling analysis of policy characteristics by customer. The SQL context suggests a default value of 'CU0000' is used when customer data is unavailable."
        },
        {
          "name": "policy_type",
          "type": "VARCHAR",
          "description": "This column, `policy_type`, stores the type of insurance policy (e.g., auto, home, life) as a text string.  It's a key attribute for categorizing and analyzing policies within the `mart_policy_details` model. This allows for segmentation and reporting based on different policy offerings.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `policy_type`, stores the type of insurance policy (e.g., auto, home, life) as a text string.  It's a key attribute for categorizing and analyzing policies within the `mart_policy_details` model. This allows for segmentation and reporting based on different policy offerings."
        },
        {
          "name": "start_date",
          "type": "DATE",
          "description": "The `start_date` column in the `mart_policy_details` table stores the date when the policy coverage period begins. This date is a key attribute for understanding the policy lifecycle and is used in conjunction with the `end_date` to determine the policy's duration. This column is essential for time-series analysis of policy performance.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `start_date` column in the `mart_policy_details` table stores the date when the policy coverage period begins. This date is a key attribute for understanding the policy lifecycle and is used in conjunction with the `end_date` to determine the policy's duration. This column is essential for time-series analysis of policy performance."
        },
        {
          "name": "end_date",
          "type": "DATE",
          "description": "The `end_date` column in the `mart_policy_details` table stores the date when the policy coverage expires. This date is crucial for understanding the policy's active period and is used in conjunction with the `start_date` to determine the policy's duration. This information is essential for analyzing policy lifecycles and calculating metrics like policy renewal rates.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `end_date` column in the `mart_policy_details` table stores the date when the policy coverage expires. This date is crucial for understanding the policy's active period and is used in conjunction with the `start_date` to determine the policy's duration. This information is essential for analyzing policy lifecycles and calculating metrics like policy renewal rates."
        },
        {
          "name": "premium_amount",
          "type": "DOUBLE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "coverage_amount",
          "type": "INTEGER",
          "description": "This column, `coverage_amount`, stores the integer value representing the monetary coverage limit for the policy.  It's a key policy attribute within the `mart_policy_details` model, providing a fundamental piece of information for understanding the financial scope of each policy. This value is essential for calculating ratios and performing analyses related to risk exposure and policy value.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `coverage_amount`, stores the integer value representing the monetary coverage limit for the policy.  It's a key policy attribute within the `mart_policy_details` model, providing a fundamental piece of information for understanding the financial scope of each policy. This value is essential for calculating ratios and performing analyses related to risk exposure and policy value."
        },
        {
          "name": "status",
          "type": "VARCHAR",
          "description": "The `status` column in the `mart_policy_details` table stores the current operational status of a policy, such as \"Active\", \"Cancelled\", or \"Pending\". This column is crucial for filtering and analyzing policies based on their current state. It is sourced from the `int_policies_enriched` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `status` column in the `mart_policy_details` table stores the current operational status of a policy, such as \"Active\", \"Cancelled\", or \"Pending\". This column is crucial for filtering and analyzing policies based on their current state. It is sourced from the `int_policies_enriched` model."
        },
        {
          "name": "agent_id",
          "type": "VARCHAR",
          "description": "The `agent_id` column stores the unique identifier for the insurance agent associated with the policy. This VARCHAR field is crucial for tracking policy assignments and enabling analysis of agent performance within the `mart_policy_details` model. It allows for filtering and aggregation of policy data by agent.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "The `agent_id` column stores the unique identifier for the insurance agent associated with the policy. This VARCHAR field is crucial for tracking policy assignments and enabling analysis of agent performance within the `mart_policy_details` model. It allows for filtering and aggregation of policy data by agent."
        },
        {
          "name": "policy_number",
          "type": "VARCHAR",
          "description": "The `policy_number` column stores the unique identifier assigned to each insurance policy. This VARCHAR field is crucial for joining policy data across different sources and is used to identify individual policies within the `mart_policy_details` model for analysis and reporting.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `policy_number` column stores the unique identifier assigned to each insurance policy. This VARCHAR field is crucial for joining policy data across different sources and is used to identify individual policies within the `mart_policy_details` model for analysis and reporting."
        },
        {
          "name": "policy_term_days",
          "type": "BIGINT",
          "description": "`policy_term_days` stores the duration of the policy in days, represented as a BIGINT. This column indicates the length of time the policy is active, crucial for understanding policy lifecycles and calculating metrics like the coverage_premium_ratio.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`policy_term_days` stores the duration of the policy in days, represented as a BIGINT. This column indicates the length of time the policy is active, crucial for understanding policy lifecycles and calculating metrics like the coverage_premium_ratio."
        },
        {
          "name": "effective_status",
          "type": "VARCHAR",
          "description": "The `effective_status` column in the `mart_policy_details` table indicates the current operational status of a policy, such as \"Active\", \"Cancelled\", or \"Pending\". This VARCHAR column provides a key attribute for understanding the active policies and their lifecycle stages within the policy management system. This status is sourced from the `int_policies_enriched` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `effective_status` column in the `mart_policy_details` table indicates the current operational status of a policy, such as \"Active\", \"Cancelled\", or \"Pending\". This VARCHAR column provides a key attribute for understanding the active policies and their lifecycle stages within the policy management system. This status is sourced from the `int_policies_enriched` model."
        },
        {
          "name": "coverage_premium_ratio",
          "type": "DOUBLE",
          "description": "The `coverage_premium_ratio` column in the `mart_policy_details` table stores the ratio of policy coverage to the premium paid. This ratio, calculated as coverage amount divided by premium, provides a key metric for understanding the relationship between the value of the policy's protection and its cost. This is a key metric for understanding the value of the policy.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `coverage_premium_ratio` column in the `mart_policy_details` table stores the ratio of policy coverage to the premium paid. This ratio, calculated as coverage amount divided by premium, provides a key metric for understanding the relationship between the value of the policy's protection and its cost. This is a key metric for understanding the value of the policy."
        },
        {
          "name": "agent_name",
          "type": "VARCHAR",
          "description": "The `agent_name` column stores the name of the insurance agent associated with the policy. This column is crucial for identifying the agent responsible for a specific policy within the `mart_policy_details` model, enabling analysis of agent performance and policy distribution. The data type is VARCHAR, indicating that the agent's name is stored as a text string.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `agent_name` column stores the name of the insurance agent associated with the policy. This column is crucial for identifying the agent responsible for a specific policy within the `mart_policy_details` model, enabling analysis of agent performance and policy distribution. The data type is VARCHAR, indicating that the agent's name is stored as a text string."
        },
        {
          "name": "office_location",
          "type": "VARCHAR",
          "description": "The `office_location` column in the `mart_policy_details` table stores the physical location of the agent associated with the policy. This VARCHAR field provides context for policy distribution and agent performance analysis, allowing for regional breakdowns of policy data.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `office_location` column in the `mart_policy_details` table stores the physical location of the agent associated with the policy. This VARCHAR field provides context for policy distribution and agent performance analysis, allowing for regional breakdowns of policy data."
        },
        {
          "name": "agent_specialization",
          "type": "VARCHAR",
          "description": "This column, `agent_specialization`, stores the specific area of insurance expertise for the agent associated with the policy.  It helps categorize policies based on the agent's specialization, enabling analysis of policy performance by agent skill set. This information is sourced from the `int_policies_enriched` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `agent_specialization`, stores the specific area of insurance expertise for the agent associated with the policy.  It helps categorize policies based on the agent's specialization, enabling analysis of policy performance by agent skill set. This information is sourced from the `int_policies_enriched` model."
        },
        {
          "name": "agent_experience",
          "type": "VARCHAR",
          "description": "`agent_experience` stores the agent's experience level, likely as a text string. This column provides information about the agent assigned to the policy, which can be used to analyze the relationship between agent experience and policy performance. This data is sourced from the `int_policies_enriched` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`agent_experience` stores the agent's experience level, likely as a text string. This column provides information about the agent assigned to the policy, which can be used to analyze the relationship between agent experience and policy performance. This data is sourced from the `int_policies_enriched` model."
        },
        {
          "name": "specialization_alignment",
          "type": "VARCHAR",
          "description": "`specialization_alignment` stores the alignment of the agent's specialization, likely indicating how well the agent's expertise matches the policy. This VARCHAR column helps in understanding the relationship between agent specialization and policy characteristics within the `mart_policy_details` model, potentially aiding in performance analysis or identifying areas for agent training.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`specialization_alignment` stores the alignment of the agent's specialization, likely indicating how well the agent's expertise matches the policy. This VARCHAR column helps in understanding the relationship between agent specialization and policy characteristics within the `mart_policy_details` model, potentially aiding in performance analysis or identifying areas for agent training."
        },
        {
          "name": "customer_name",
          "type": "VARCHAR",
          "description": "The `customer_name` column in the `mart_policy_details` table stores the name of the customer associated with the policy. This column is populated from the `customer_risk` project and is used to link policy details with customer-specific information for analysis and reporting. The value is a VARCHAR and is used to identify the customer.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `customer_name` column in the `mart_policy_details` table stores the name of the customer associated with the policy. This column is populated from the `customer_risk` project and is used to link policy details with customer-specific information for analysis and reporting. The value is a VARCHAR and is used to identify the customer."
        },
        {
          "name": "risk_category",
          "type": "VARCHAR",
          "description": "The `risk_category` column in the `mart_policy_details` table stores a customer's risk classification, such as 'HIGH_RISK', 'MEDIUM_RISK', or 'LOW_RISK'. This categorization, sourced from the `customer_risk` project, is used to understand the customer's risk profile and is applied in the calculation of the `risk_adjusted_premium`.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `risk_category` column in the `mart_policy_details` table stores a customer's risk classification, such as 'HIGH_RISK', 'MEDIUM_RISK', or 'LOW_RISK'. This categorization, sourced from the `customer_risk` project, is used to understand the customer's risk profile and is applied in the calculation of the `risk_adjusted_premium`."
        },
        {
          "name": "risk_score",
          "type": "INTEGER",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "credit_score",
          "type": "INTEGER",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "claim_frequency",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "previous_claims_count",
          "type": "INTEGER",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "risk_adjusted_premium",
          "type": "DOUBLE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "policy_source",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "risk_source",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        }
      ],
      "sql": "{{\n    config(\n        materialized='table',\n        tags=['mart', 'policies', 'daily']\n    )\n}}\n\nWITH policies_enriched AS (\n    SELECT * FROM {{ ref('int_policies_enriched') }}\n),\n\n-- Reference to the customer risk project\ncustomer_risk_profile AS (\n    {% if execute %}\n        {% if adapter.get_relation(this.database, 'mart', 'mart_customer_risk_profile') %}\n            SELECT * FROM {{ ref('customer_risk', 'mart_customer_risk_profile') }}\n        {% else %}\n            SELECT\n                'CU0000' AS customer_id,\n                0 AS credit_score,\n                'UNKNOWN' AS claim_frequency,\n                0 AS risk_score,\n                0 AS previous_claims_count,\n                'UNKNOWN' AS risk_category,\n                'UNKNOWN' AS customer_name,\n                'customer_risk' AS _dbt_source_project\n            WHERE 1=0\n        {% endif %}\n    {% else %}\n        SELECT\n            'CU0000' AS customer_id,\n            0 AS credit_score,\n            'UNKNOWN' AS claim_frequency,\n            0 AS risk_score,\n            0 AS previous_claims_count,\n            'UNKNOWN' AS risk_category,\n            'UNKNOWN' AS customer_name,\n            'customer_risk' AS _dbt_source_project\n        WHERE 1=0\n    {% endif %}\n)\n\nSELECT\n    pe.policy_id,\n    pe.customer_id,\n    pe.policy_type,\n    pe.start_date,\n    pe.end_date,\n    pe.premium_amount,\n    pe.coverage_amount,\n    pe.status,\n    pe.agent_id,\n    pe.policy_number,\n    pe.policy_term_days,\n    pe.effective_status,\n    pe.coverage_premium_ratio,\n    pe.agent_name,\n    pe.office_location,\n    pe.agent_specialization,\n    pe.agent_experience,\n    pe.specialization_alignment,\n    -- Customer risk information\n    cr.customer_name,\n    cr.risk_category,\n    cr.risk_score,\n    cr.credit_score,\n    cr.claim_frequency,\n    cr.previous_claims_count,\n    -- Risk-adjusted premium calculation\n    CASE\n        WHEN cr.risk_category = 'HIGH_RISK' THEN pe.premium_amount * 1.25\n        WHEN cr.risk_category = 'MEDIUM_RISK' THEN pe.premium_amount * 1.1\n        WHEN cr.risk_category = 'LOW_RISK' THEN pe.premium_amount * 0.95\n        ELSE pe.premium_amount\n    END AS risk_adjusted_premium,\n    -- Cross project attribution\n    pe._dbt_source_project AS policy_source,\n    cr._dbt_source_project AS risk_source,\n    -- Metadata\n    CURRENT_TIMESTAMP AS dbt_updated_at\nFROM policies_enriched pe\nLEFT JOIN customer_risk_profile cr ON pe.customer_id = cr.customer_id",
      "materialized": "table",
      "schema": "mart",
      "file_path": "models/mart/mart_policy_details.sql",
      "database": "insurance_data",
      "tags": [
        "mart",
        "policies",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.policy_management.mart_policy_details",
        "metadata": {
          "type": "BASE TABLE",
          "schema": "policy_management_mart",
          "name": "mart_policy_details",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `mart_policy_details` dbt model within the `policy_management` project serves as a central, pre-aggregated view of policy information. It consolidates enriched policy data from the `int_policies_enriched` model and joins it with customer risk profile data from the `customer_risk` project, if available. This model materializes as a table and includes key policy attributes like policy type, dates, premium, coverage, status, and agent details, along with customer risk metrics. The model calculates the `coverage_premium_ratio` and other derived fields, providing a comprehensive, daily-updated dataset for policy analysis and reporting."
    },
    {
      "id": "p5",
      "name": "stg_customers",
      "project": "policy_management",
      "description": "The `stg_customers` dbt model in the `policy_management` project serves as a staging layer for customer data. It selects all columns from the `customers` source table, casts `date_of_birth` and `joining_date` to the DATE data type, and derives new fields. This model produces a view containing customer information, including derived fields like `customer_name`, `age`, and `months_as_customer`. It plays a crucial role in the data pipeline by providing a standardized and enriched customer dataset for downstream models, with transformations like date casting and the calculation of customer lifetime metrics.",
      "columns": [
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "This column stores the unique identifier for each customer, sourced from the `customers` table.  In the `stg_customers` model, this `customer_id` is preserved to uniquely identify each customer record within the staging layer.  It's a VARCHAR data type, ensuring flexibility in handling various ID formats.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique identifier for each customer, sourced from the `customers` table.  In the `stg_customers` model, this `customer_id` is preserved to uniquely identify each customer record within the staging layer.  It's a VARCHAR data type, ensuring flexibility in handling various ID formats."
        },
        {
          "name": "first_name",
          "type": "VARCHAR",
          "description": "This column stores the customer's first name as a string.  In the `stg_customers` model, this column is directly selected from the source table and used in the `customer_name` derived field.  It provides a fundamental piece of customer identification information.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's first name as a string.  In the `stg_customers` model, this column is directly selected from the source table and used in the `customer_name` derived field.  It provides a fundamental piece of customer identification information."
        },
        {
          "name": "last_name",
          "type": "VARCHAR",
          "description": "This column stores the customer's last name as a string.  It's used to identify and differentiate customers within the `stg_customers` staging model.  The `last_name` is concatenated with the `first_name` to create the `customer_name` field.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's last name as a string.  It's used to identify and differentiate customers within the `stg_customers` staging model.  The `last_name` is concatenated with the `first_name` to create the `customer_name` field."
        },
        {
          "name": "email",
          "type": "VARCHAR",
          "description": "This column stores the customer's email address as a string. It's sourced directly from the `customers` table and is included in the staging layer for customer data. This field is essential for customer identification and communication within the policy management system.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's email address as a string. It's sourced directly from the `customers` table and is included in the staging layer for customer data. This field is essential for customer identification and communication within the policy management system."
        },
        {
          "name": "phone",
          "type": "VARCHAR",
          "description": "This column stores the customer's phone number as a variable-length string.  It's included in the `stg_customers` staging model to provide customer contact information directly from the source `customers` table.  This data is essential for customer identification and communication within the policy management system.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's phone number as a variable-length string.  It's included in the `stg_customers` staging model to provide customer contact information directly from the source `customers` table.  This data is essential for customer identification and communication within the policy management system."
        },
        {
          "name": "address",
          "type": "VARCHAR",
          "description": "The `address` column in the `stg_customers` staging model stores the customer's street address. This VARCHAR column directly reflects the address information from the source `customers` table, providing a key piece of customer location data for analysis and reporting. It is used in conjunction with other location-related columns like `city`, `state`, and `zip_code`.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `address` column in the `stg_customers` staging model stores the customer's street address. This VARCHAR column directly reflects the address information from the source `customers` table, providing a key piece of customer location data for analysis and reporting. It is used in conjunction with other location-related columns like `city`, `state`, and `zip_code`."
        },
        {
          "name": "city",
          "type": "VARCHAR",
          "description": "The `city` column in the `stg_customers` staging model stores the city of the customer's address, sourced directly from the `customers` table. This VARCHAR column provides customer location information, essential for segmentation and analysis within the customer dataset. No business logic is applied to this column.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `city` column in the `stg_customers` staging model stores the city of the customer's address, sourced directly from the `customers` table. This VARCHAR column provides customer location information, essential for segmentation and analysis within the customer dataset. No business logic is applied to this column."
        },
        {
          "name": "state",
          "type": "VARCHAR",
          "description": "The `state` column in the `stg_customers` staging table stores the customer's state of residence as a VARCHAR string. This column, sourced directly from the `customers` table, is used to provide customer location information within the standardized customer dataset. It is a key attribute for customer segmentation and analysis.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `state` column in the `stg_customers` staging table stores the customer's state of residence as a VARCHAR string. This column, sourced directly from the `customers` table, is used to provide customer location information within the standardized customer dataset. It is a key attribute for customer segmentation and analysis."
        },
        {
          "name": "zip_code",
          "type": "INTEGER",
          "description": "This column stores the customer's postal code as an integer.  It represents the customer's geographic location and is sourced directly from the `customers` table.  This information is essential for customer segmentation and potentially for risk assessment within the `policy_management` project.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's postal code as an integer.  It represents the customer's geographic location and is sourced directly from the `customers` table.  This information is essential for customer segmentation and potentially for risk assessment within the `policy_management` project."
        },
        {
          "name": "date_of_birth",
          "type": "DATE",
          "description": "This column stores the customer's date of birth.  It's used to calculate the customer's age within the `stg_customers` model.  The `date_of_birth` is cast to the DATE data type for consistent date handling and age calculation.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's date of birth.  It's used to calculate the customer's age within the `stg_customers` model.  The `date_of_birth` is cast to the DATE data type for consistent date handling and age calculation."
        },
        {
          "name": "gender",
          "type": "VARCHAR",
          "description": "This column stores the customer's gender as a string value. It's included in the `stg_customers` staging model to provide customer demographic information for downstream analysis. The `gender` column is directly sourced from the `customers` table, ensuring the availability of this key customer attribute.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's gender as a string value. It's included in the `stg_customers` staging model to provide customer demographic information for downstream analysis. The `gender` column is directly sourced from the `customers` table, ensuring the availability of this key customer attribute."
        },
        {
          "name": "joining_date",
          "type": "DATE",
          "description": "This column stores the date when a customer joined the company.  It's used in the `stg_customers` model to calculate the `months_as_customer` metric, providing insights into customer tenure. The `joining_date` is cast to the DATE data type for consistent date-based calculations.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the date when a customer joined the company.  It's used in the `stg_customers` model to calculate the `months_as_customer` metric, providing insights into customer tenure. The `joining_date` is cast to the DATE data type for consistent date-based calculations."
        },
        {
          "name": "customer_name",
          "type": "VARCHAR",
          "description": "This column, `customer_name`, stores the full name of the customer. It's derived by concatenating the `first_name` and `last_name` fields from the source data within the `stg_customers` model. This provides a readily available, combined customer identifier for analysis and reporting.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `customer_name`, stores the full name of the customer. It's derived by concatenating the `first_name` and `last_name` fields from the source data within the `stg_customers` model. This provides a readily available, combined customer identifier for analysis and reporting."
        },
        {
          "name": "age",
          "type": "BIGINT",
          "description": "The `age` column in the `stg_customers` table stores the customer's age as a whole number. This column is derived from the `date_of_birth` field using the `DATEDIFF` function, representing the customer's age in years as of the current date. This field is essential for customer segmentation and analysis within the `policy_management` project.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `age` column in the `stg_customers` table stores the customer's age as a whole number. This column is derived from the `date_of_birth` field using the `DATEDIFF` function, representing the customer's age in years as of the current date. This field is essential for customer segmentation and analysis within the `policy_management` project."
        },
        {
          "name": "months_as_customer",
          "type": "BIGINT",
          "description": "This column, `months_as_customer`, stores the number of months a customer has been with the company. It's calculated by subtracting the `joining_date` from the current date. This metric provides a measure of customer tenure and is useful for understanding customer lifetime value and segmentation.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `months_as_customer`, stores the number of months a customer has been with the company. It's calculated by subtracting the `joining_date` from the current date. This metric provides a measure of customer tenure and is useful for understanding customer lifetime value and segmentation."
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "`dbt_updated_at` stores the timestamp indicating when the `stg_customers` view was last refreshed. This column provides a record of the data's freshness, allowing data analysts to track the currency of the customer information within the staging layer. It is populated using `CURRENT_TIMESTAMP` during the model's execution.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`dbt_updated_at` stores the timestamp indicating when the `stg_customers` view was last refreshed. This column provides a record of the data's freshness, allowing data analysts to track the currency of the customer information within the staging layer. It is populated using `CURRENT_TIMESTAMP` during the model's execution."
        },
        {
          "name": "_dbt_source_project",
          "type": "VARCHAR",
          "description": "This column, `_dbt_source_project`, stores a string literal identifying the source project of the customer data.  In the `stg_customers` model, this column is populated with the value 'customer_risk', likely used for metadata tracking and lineage purposes, indicating the origin of the data within the broader data pipeline. This helps with data governance and understanding the source of the customer information.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `_dbt_source_project`, stores a string literal identifying the source project of the customer data.  In the `stg_customers` model, this column is populated with the value 'customer_risk', likely used for metadata tracking and lineage purposes, indicating the origin of the data within the broader data pipeline. This helps with data governance and understanding the source of the customer information."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'customers', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('customers') }}\n)\n\nSELECT\n    customer_id,\n    first_name,\n    last_name,\n    email,\n    phone,\n    address,\n    city,\n    state,\n    zip_code,\n    CAST(date_of_birth AS DATE) AS date_of_birth,\n    gender,\n    CAST(joining_date AS DATE) AS joining_date,\n    -- Derived fields\n    CONCAT(first_name, ' ', last_name) AS customer_name,\n    DATEDIFF('year', date_of_birth, CURRENT_DATE()) AS age,\n    DATEDIFF('month', joining_date, CURRENT_DATE()) AS months_as_customer,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'customer_risk' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_customers.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "customers",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.customer_risk.stg_customers",
        "metadata": {
          "type": "VIEW",
          "schema": "policy_management_staging",
          "name": "stg_customers",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `stg_customers` dbt model in the `policy_management` project serves as a staging layer for customer data. It selects all columns from the `customers` source table, casts `date_of_birth` and `joining_date` to the DATE data type, and derives new fields. This model produces a view containing customer information, including derived fields like `customer_name`, `age`, and `months_as_customer`. It plays a crucial role in the data pipeline by providing a standardized and enriched customer dataset for downstream models, with transformations like date casting and the calculation of customer lifetime metrics."
    },
    {
      "id": "p6",
      "name": "stg_risk_factors",
      "project": "policy_management",
      "description": "",
      "columns": [
        {
          "name": "risk_id",
          "type": "VARCHAR",
          "description": "This column, `risk_id`, stores a unique identifier for each risk factor record within the `stg_risk_factors` staging table.  It is a VARCHAR field, likely used to link risk factors to other related data, such as customer profiles or assessment results. This ID facilitates tracking and analysis of individual risk assessments over time.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column, `risk_id`, stores a unique identifier for each risk factor record within the `stg_risk_factors` staging table.  It is a VARCHAR field, likely used to link risk factors to other related data, such as customer profiles or assessment results. This ID facilitates tracking and analysis of individual risk assessments over time."
        },
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": true,
          "isForeignKey": true
        },
        {
          "name": "assessment_date",
          "type": "DATE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "credit_score",
          "type": "INTEGER",
          "description": "The `credit_score` column in the `stg_risk_factors` table stores a customer's credit score as an integer. This score is a key risk factor used to assess a customer's financial health and is used in conjunction with other factors to derive a credit rating. The provided SQL also suggests that the credit score is used to categorize customers into credit rating tiers (Excellent, Good, Fair, Poor, Very Poor).",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `credit_score` column in the `stg_risk_factors` table stores a customer's credit score as an integer. This score is a key risk factor used to assess a customer's financial health and is used in conjunction with other factors to derive a credit rating. The provided SQL also suggests that the credit score is used to categorize customers into credit rating tiers (Excellent, Good, Fair, Poor, Very Poor)."
        },
        {
          "name": "claim_frequency",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "risk_score",
          "type": "DOUBLE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "previous_claims_count",
          "type": "INTEGER",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "risk_category",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "last_assessment",
          "type": "DATE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "assessment_source",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "days_since_last_assessment",
          "type": "BIGINT",
          "description": "This column, `days_since_last_assessment`, stores the number of days elapsed since the last risk assessment. It's calculated using the `DATEDIFF` function, providing a measure of time between the `last_assessment` and `assessment_date` within the `stg_risk_factors` table. This data is crucial for understanding the recency of risk evaluations and potentially influencing other risk-related calculations or categorizations.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `days_since_last_assessment`, stores the number of days elapsed since the last risk assessment. It's calculated using the `DATEDIFF` function, providing a measure of time between the `last_assessment` and `assessment_date` within the `stg_risk_factors` table. This data is crucial for understanding the recency of risk evaluations and potentially influencing other risk-related calculations or categorizations."
        },
        {
          "name": "credit_rating",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "This column, `dbt_updated_at`, stores the timestamp of when the `stg_risk_factors` model was last updated. It serves as a metadata field, indicating the freshness of the data within the table. The value is automatically generated using `CURRENT_TIMESTAMP` during the model's execution.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `dbt_updated_at`, stores the timestamp of when the `stg_risk_factors` model was last updated. It serves as a metadata field, indicating the freshness of the data within the table. The value is automatically generated using `CURRENT_TIMESTAMP` during the model's execution."
        },
        {
          "name": "_dbt_source_project",
          "type": "VARCHAR",
          "description": "This column, `_dbt_source_project`, stores the name of the source project from which the data originated, specifically \"customer_risk\" in this case.  It serves as a metadata field to track the data's origin within the data pipeline. This allows for lineage tracking and helps identify the source of the risk factor data.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `_dbt_source_project`, stores the name of the source project from which the data originated, specifically \"customer_risk\" in this case.  It serves as a metadata field to track the data's origin within the data pipeline. This allows for lineage tracking and helps identify the source of the risk factor data."
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['staging', 'risk', 'daily']\n    )\n}}\n\nWITH source AS (\n    SELECT * FROM {{ ref('risk_factors') }}\n)\n\nSELECT\n    risk_id,\n    customer_id,\n    CAST(assessment_date AS DATE) AS assessment_date,\n    credit_score,\n    claim_frequency,\n    risk_score,\n    previous_claims_count,\n    risk_category,\n    CAST(last_assessment AS DATE) AS last_assessment,\n    assessment_source,\n    -- Derived fields\n    DATEDIFF('day', last_assessment, assessment_date) AS days_since_last_assessment,\n    CASE\n        WHEN credit_score >= 750 THEN 'EXCELLENT'\n        WHEN credit_score >= 700 THEN 'GOOD'\n        WHEN credit_score >= 650 THEN 'FAIR'\n        WHEN credit_score >= 600 THEN 'POOR'\n        ELSE 'VERY_POOR'\n    END AS credit_rating,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    'customer_risk' AS _dbt_source_project\nFROM source",
      "materialized": "view",
      "schema": "staging",
      "file_path": "models/staging/stg_risk_factors.sql",
      "database": "insurance_data",
      "tags": [
        "staging",
        "risk",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.customer_risk.stg_risk_factors",
        "metadata": {
          "type": "VIEW",
          "schema": "policy_management_staging",
          "name": "stg_risk_factors",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      }
    },
    {
      "id": "p7",
      "name": "int_customer_risk_enriched",
      "project": "policy_management",
      "description": "The `int_customer_risk_enriched` dbt model in the `policy_management` project enriches customer data with risk assessment information. It joins customer data from `stg_customers` with risk factors from `stg_risk_factors`. This intermediate model produces a comprehensive view of each customer, including demographic details, risk scores, and derived customer segments. Key transformations include adjusting risk scores based on age and segmenting customers based on tenure and risk category, providing valuable insights for policy management. This model serves as a crucial building block for downstream analyses and reporting related to customer risk and segmentation.",
      "columns": [
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "This column stores the unique customer identifier, represented as a string.  It serves as the primary key for identifying customers within the `int_customer_risk_enriched` model, enabling joins with other tables like `stg_risk_factors` to enrich customer profiles.  This `customer_id` is crucial for linking customer data with risk assessments and derived customer segments.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores the unique customer identifier, represented as a string.  It serves as the primary key for identifying customers within the `int_customer_risk_enriched` model, enabling joins with other tables like `stg_risk_factors` to enrich customer profiles.  This `customer_id` is crucial for linking customer data with risk assessments and derived customer segments."
        },
        {
          "name": "customer_name",
          "type": "VARCHAR",
          "description": "This column stores the customer's full name as a string.  It's sourced from the `stg_customers` table and is used to identify individual customers within the enriched risk assessment model.  This allows for easy identification of customers alongside their risk profiles and segmentation.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's full name as a string.  It's sourced from the `stg_customers` table and is used to identify individual customers within the enriched risk assessment model.  This allows for easy identification of customers alongside their risk profiles and segmentation."
        },
        {
          "name": "email",
          "type": "VARCHAR",
          "description": "This column stores the customer's email address.  It's included to provide a means of contacting the customer and is sourced directly from the `stg_customers` table. This information is essential for customer identification and communication within the policy management context.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's email address.  It's included to provide a means of contacting the customer and is sourced directly from the `stg_customers` table. This information is essential for customer identification and communication within the policy management context."
        },
        {
          "name": "phone",
          "type": "VARCHAR",
          "description": "This column stores the customer's phone number as a string.  It's included in the `int_customer_risk_enriched` model to provide customer contact information alongside risk assessment details. This allows for a comprehensive customer profile for policy management and analysis.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's phone number as a string.  It's included in the `int_customer_risk_enriched` model to provide customer contact information alongside risk assessment details. This allows for a comprehensive customer profile for policy management and analysis."
        },
        {
          "name": "address",
          "type": "VARCHAR",
          "description": "The `address` column stores the customer's street address as a string. This column provides the customer's physical location, which is used for demographic profiling and potentially for risk assessment based on geographic factors. This information is sourced directly from the `stg_customers` table.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `address` column stores the customer's street address as a string. This column provides the customer's physical location, which is used for demographic profiling and potentially for risk assessment based on geographic factors. This information is sourced directly from the `stg_customers` table."
        },
        {
          "name": "city",
          "type": "VARCHAR",
          "description": "This column stores the customer's city of residence. It's used to provide demographic information about the customer within the `int_customer_risk_enriched` model. This data is essential for understanding customer location and can be used for segmentation and analysis.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's city of residence. It's used to provide demographic information about the customer within the `int_customer_risk_enriched` model. This data is essential for understanding customer location and can be used for segmentation and analysis."
        },
        {
          "name": "state",
          "type": "VARCHAR",
          "description": "The `state` column stores the customer's state of residence as a VARCHAR. This column, sourced from the `stg_customers` table, provides customer location information used for demographic analysis and potential regional risk assessments within the `int_customer_risk_enriched` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `state` column stores the customer's state of residence as a VARCHAR. This column, sourced from the `stg_customers` table, provides customer location information used for demographic analysis and potential regional risk assessments within the `int_customer_risk_enriched` model."
        },
        {
          "name": "zip_code",
          "type": "INTEGER",
          "description": "This column stores the customer's zip code as an integer. It's used to provide customer location information within the `int_customer_risk_enriched` model, which is helpful for demographic analysis and potentially for risk assessment based on geographic factors.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's zip code as an integer. It's used to provide customer location information within the `int_customer_risk_enriched` model, which is helpful for demographic analysis and potentially for risk assessment based on geographic factors."
        },
        {
          "name": "date_of_birth",
          "type": "DATE",
          "description": "This column stores the customer's date of birth as a DATE data type. It's used to calculate the customer's age, which is then used in risk score adjustments within the model. This information is crucial for understanding customer demographics and their potential impact on risk assessment.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's date of birth as a DATE data type. It's used to calculate the customer's age, which is then used in risk score adjustments within the model. This information is crucial for understanding customer demographics and their potential impact on risk assessment."
        },
        {
          "name": "gender",
          "type": "VARCHAR",
          "description": "This column stores the customer's gender as a string value. It provides demographic information used in customer profiling and segmentation within the `int_customer_risk_enriched` model. This data is a fundamental attribute for understanding customer characteristics and potentially influencing risk assessments.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's gender as a string value. It provides demographic information used in customer profiling and segmentation within the `int_customer_risk_enriched` model. This data is a fundamental attribute for understanding customer characteristics and potentially influencing risk assessments."
        },
        {
          "name": "joining_date",
          "type": "DATE",
          "description": "This column stores the date when the customer initially joined the company.  It's sourced from the `stg_customers` table and is used to calculate the customer's tenure (`months_as_customer`) within the `int_customer_risk_enriched` model. This information is crucial for customer segmentation logic.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the date when the customer initially joined the company.  It's sourced from the `stg_customers` table and is used to calculate the customer's tenure (`months_as_customer`) within the `int_customer_risk_enriched` model. This information is crucial for customer segmentation logic."
        },
        {
          "name": "age",
          "type": "BIGINT",
          "description": "This column stores the customer's age as a whole number (BIGINT).  It's used in the `int_customer_risk_enriched` model to adjust the `risk_score`; specifically, risk scores are increased by 20% for customers under 25 or over 70 years old. This age information is also used for customer segmentation.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's age as a whole number (BIGINT).  It's used in the `int_customer_risk_enriched` model to adjust the `risk_score`; specifically, risk scores are increased by 20% for customers under 25 or over 70 years old. This age information is also used for customer segmentation."
        },
        {
          "name": "months_as_customer",
          "type": "BIGINT",
          "description": "`months_as_customer` stores the number of months a customer has been with the company, calculated from their joining date. This column is crucial for customer segmentation within the `int_customer_risk_enriched` model, helping to categorize customers into segments like \"PREMIUM\", \"PREFERRED\", \"STANDARD\", and \"NEW\" based on their tenure and risk profile. The `BIGINT` data type indicates the column stores whole numbers representing the duration of the customer relationship.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`months_as_customer` stores the number of months a customer has been with the company, calculated from their joining date. This column is crucial for customer segmentation within the `int_customer_risk_enriched` model, helping to categorize customers into segments like \"PREMIUM\", \"PREFERRED\", \"STANDARD\", and \"NEW\" based on their tenure and risk profile. The `BIGINT` data type indicates the column stores whole numbers representing the duration of the customer relationship."
        },
        {
          "name": "risk_id",
          "type": "VARCHAR",
          "description": "The `risk_id` column stores a unique identifier for the customer's risk assessment. This VARCHAR value links the customer to a specific risk profile within the `stg_risk_factors` table, enabling the model to associate risk details like credit score with each customer. This ID is crucial for understanding and analyzing the customer's risk profile.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "The `risk_id` column stores a unique identifier for the customer's risk assessment. This VARCHAR value links the customer to a specific risk profile within the `stg_risk_factors` table, enabling the model to associate risk details like credit score with each customer. This ID is crucial for understanding and analyzing the customer's risk profile."
        },
        {
          "name": "assessment_date",
          "type": "DATE",
          "description": "`assessment_date` stores the date when the customer's risk assessment was performed. This date is crucial for understanding the recency of the risk evaluation and tracking changes in customer risk profiles over time within the `int_customer_risk_enriched` model. It allows for analysis of risk trends and the impact of time on customer risk.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`assessment_date` stores the date when the customer's risk assessment was performed. This date is crucial for understanding the recency of the risk evaluation and tracking changes in customer risk profiles over time within the `int_customer_risk_enriched` model. It allows for analysis of risk trends and the impact of time on customer risk."
        },
        {
          "name": "credit_score",
          "type": "INTEGER",
          "description": "This column, `credit_score`, stores an integer representing a customer's credit score. It's sourced from the `stg_risk_factors` data and is used within the `int_customer_risk_enriched` model to provide a key indicator of a customer's financial risk profile. This score contributes to the overall risk assessment and customer segmentation within the policy management context.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `credit_score`, stores an integer representing a customer's credit score. It's sourced from the `stg_risk_factors` data and is used within the `int_customer_risk_enriched` model to provide a key indicator of a customer's financial risk profile. This score contributes to the overall risk assessment and customer segmentation within the policy management context."
        },
        {
          "name": "credit_rating",
          "type": "VARCHAR",
          "description": "The `credit_rating` column stores a customer's credit rating, likely obtained from an external credit bureau. This rating provides a standardized assessment of the customer's creditworthiness, which is used in conjunction with other risk factors to determine the overall risk profile within the `int_customer_risk_enriched` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `credit_rating` column stores a customer's credit rating, likely obtained from an external credit bureau. This rating provides a standardized assessment of the customer's creditworthiness, which is used in conjunction with other risk factors to determine the overall risk profile within the `int_customer_risk_enriched` model."
        },
        {
          "name": "claim_frequency",
          "type": "VARCHAR",
          "description": "`claim_frequency` stores a string representation of the customer's claim frequency. This column likely indicates how often a customer has filed claims, which is a key risk factor used in assessing customer risk within the `int_customer_risk_enriched` model. This data is used to enrich customer profiles and inform policy management decisions.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`claim_frequency` stores a string representation of the customer's claim frequency. This column likely indicates how often a customer has filed claims, which is a key risk factor used in assessing customer risk within the `int_customer_risk_enriched` model. This data is used to enrich customer profiles and inform policy management decisions."
        },
        {
          "name": "risk_score",
          "type": "DOUBLE",
          "description": "The `risk_score` column in the `int_customer_risk_enriched` table stores a numerical representation of a customer's overall risk. This score, sourced from `stg_risk_factors`, is a key component for assessing customer risk profiles and is used in downstream calculations, including age-based adjustments. This score is a DOUBLE data type.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `risk_score` column in the `int_customer_risk_enriched` table stores a numerical representation of a customer's overall risk. This score, sourced from `stg_risk_factors`, is a key component for assessing customer risk profiles and is used in downstream calculations, including age-based adjustments. This score is a DOUBLE data type."
        },
        {
          "name": "previous_claims_count",
          "type": "INTEGER",
          "description": "`previous_claims_count` stores the total number of claims a customer has filed prior to the current assessment. This integer value is a key risk indicator within the `int_customer_risk_enriched` model, contributing to the overall risk score and customer segmentation used for policy management.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`previous_claims_count` stores the total number of claims a customer has filed prior to the current assessment. This integer value is a key risk indicator within the `int_customer_risk_enriched` model, contributing to the overall risk score and customer segmentation used for policy management."
        },
        {
          "name": "risk_category",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "days_since_last_assessment",
          "type": "BIGINT",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "age_adjusted_risk_score",
          "type": "DOUBLE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "customer_segment",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "_dbt_source_project",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        }
      ],
      "sql": "{{\n    config(\n        materialized='view',\n        tags=['intermediate', 'customers', 'risk', 'daily']\n    )\n}}\n\nWITH customers AS (\n    SELECT * FROM {{ ref('stg_customers') }}\n),\n\nrisk_factors AS (\n    SELECT * FROM {{ ref('stg_risk_factors') }}\n)\n\nSELECT\n    c.customer_id,\n    c.customer_name,\n    c.email,\n    c.phone,\n    c.address,\n    c.city,\n    c.state,\n    c.zip_code,\n    c.date_of_birth,\n    c.gender,\n    c.joining_date,\n    c.age,\n    c.months_as_customer,\n    -- Risk information\n    r.risk_id,\n    r.assessment_date,\n    r.credit_score,\n    r.credit_rating,\n    r.claim_frequency,\n    r.risk_score,\n    r.previous_claims_count,\n    r.risk_category,\n    r.days_since_last_assessment,\n    -- Risk factor adjustments\n    CASE\n        WHEN c.age < 25 OR c.age > 70 THEN r.risk_score * 1.2\n        ELSE r.risk_score\n    END AS age_adjusted_risk_score,\n    -- Customer segments\n    CASE\n        WHEN c.months_as_customer >= 36 AND r.risk_category = 'LOW_RISK' THEN 'PREMIUM'\n        WHEN c.months_as_customer >= 24 AND r.risk_category IN ('LOW_RISK', 'MEDIUM_RISK') THEN 'PREFERRED'\n        WHEN c.months_as_customer >= 12 THEN 'STANDARD'\n        ELSE 'NEW'\n    END AS customer_segment,\n    -- Metadata fields\n    CURRENT_TIMESTAMP AS dbt_updated_at,\n    c._dbt_source_project\nFROM customers c\nLEFT JOIN risk_factors r ON c.customer_id = r.customer_id",
      "materialized": "view",
      "schema": "intermediate",
      "file_path": "models/intermediate/int_customer_risk_enriched.sql",
      "database": "insurance_data",
      "tags": [
        "intermediate",
        "customers",
        "risk",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.customer_risk.int_customer_risk_enriched",
        "metadata": {
          "type": "VIEW",
          "schema": "policy_management_intermediate",
          "name": "int_customer_risk_enriched",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `int_customer_risk_enriched` dbt model in the `policy_management` project enriches customer data with risk assessment information. It joins customer data from `stg_customers` with risk factors from `stg_risk_factors`. This intermediate model produces a comprehensive view of each customer, including demographic details, risk scores, and derived customer segments. Key transformations include adjusting risk scores based on age and segmenting customers based on tenure and risk category, providing valuable insights for policy management. This model serves as a crucial building block for downstream analyses and reporting related to customer risk and segmentation."
    },
    {
      "id": "p8",
      "name": "mart_customer_risk_profile",
      "project": "policy_management",
      "description": "The `mart_customer_risk_profile` dbt model in the `policy_management` project creates a customer-level risk profile. It consolidates customer information with risk assessments and claim history to generate a comprehensive view of each customer's risk. This model materializes as a table and is tagged for daily updates, serving as a key component in the customer risk analysis mart.  Crucially, it joins enriched customer data with claim data, including counts, amounts, and settlement details, from a separate claims processing project, handling potential missing data gracefully. The model calculates derived risk metrics like `age_adjusted_risk_score` and categorizes customers based on their risk profile, providing valuable insights for policy management.",
      "columns": [
        {
          "name": "customer_id",
          "type": "VARCHAR",
          "description": "This column stores a unique identifier for each customer, represented as a string.  It serves as the primary key for joining customer data with claim information within the `mart_customer_risk_profile` model.  This `customer_id` is crucial for aggregating claim history and calculating customer-level risk metrics.",
          "isPrimaryKey": true,
          "isForeignKey": true,
          "ai_description": "This column stores a unique identifier for each customer, represented as a string.  It serves as the primary key for joining customer data with claim information within the `mart_customer_risk_profile` model.  This `customer_id` is crucial for aggregating claim history and calculating customer-level risk metrics."
        },
        {
          "name": "customer_name",
          "type": "VARCHAR",
          "description": "This column, `customer_name`, stores the customer's full name as a string. It's used to identify and label individual customers within the `mart_customer_risk_profile` table, providing a human-readable identifier alongside the `customer_id`. This allows for easier analysis and reporting on customer risk profiles.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `customer_name`, stores the customer's full name as a string. It's used to identify and label individual customers within the `mart_customer_risk_profile` table, providing a human-readable identifier alongside the `customer_id`. This allows for easier analysis and reporting on customer risk profiles."
        },
        {
          "name": "email",
          "type": "VARCHAR",
          "description": "This column stores the customer's email address.  It is used to identify and link customer records within the `mart_customer_risk_profile` table, enabling a comprehensive view of each customer's risk profile by connecting customer data with risk assessments and claim history.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column stores the customer's email address.  It is used to identify and link customer records within the `mart_customer_risk_profile` table, enabling a comprehensive view of each customer's risk profile by connecting customer data with risk assessments and claim history."
        },
        {
          "name": "city",
          "type": "VARCHAR",
          "description": "The `city` column stores the customer's city of residence. This information is used to enrich the customer risk profile, potentially contributing to risk assessments based on geographic factors. This column is a VARCHAR, suggesting it holds text-based city names.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `city` column stores the customer's city of residence. This information is used to enrich the customer risk profile, potentially contributing to risk assessments based on geographic factors. This column is a VARCHAR, suggesting it holds text-based city names."
        },
        {
          "name": "state",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "age",
          "type": "BIGINT",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "months_as_customer",
          "type": "BIGINT",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "credit_score",
          "type": "INTEGER",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "credit_rating",
          "type": "VARCHAR",
          "description": "The `credit_rating` column in the `mart_customer_risk_profile` table stores a customer's credit rating, likely sourced from a credit bureau. This rating provides a direct measure of a customer's creditworthiness and is used in conjunction with other factors to assess their overall risk profile for policy management.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `credit_rating` column in the `mart_customer_risk_profile` table stores a customer's credit rating, likely sourced from a credit bureau. This rating provides a direct measure of a customer's creditworthiness and is used in conjunction with other factors to assess their overall risk profile for policy management."
        },
        {
          "name": "claim_frequency",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "risk_score",
          "type": "DOUBLE",
          "description": "The `risk_score` column in the `mart_customer_risk_profile` table stores a numerical representation of a customer's overall risk profile, likely derived from a combination of factors like credit rating, claim frequency, and age-adjusted risk. This score is a key input for the model's risk assessment, used in conjunction with other metrics to categorize customers and inform policy management decisions. The data type is DOUBLE, suggesting a continuous scale for the risk assessment.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `risk_score` column in the `mart_customer_risk_profile` table stores a numerical representation of a customer's overall risk profile, likely derived from a combination of factors like credit rating, claim frequency, and age-adjusted risk. This score is a key input for the model's risk assessment, used in conjunction with other metrics to categorize customers and inform policy management decisions. The data type is DOUBLE, suggesting a continuous scale for the risk assessment."
        },
        {
          "name": "age_adjusted_risk_score",
          "type": "DOUBLE",
          "description": "The `age_adjusted_risk_score` column in the `mart_customer_risk_profile` table stores a customer's risk score, adjusted for their age. This double-precision value represents the customer's risk profile, likely calculated based on a combination of factors including claim history and potentially other customer attributes, and is used to categorize customers for policy management.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `age_adjusted_risk_score` column in the `mart_customer_risk_profile` table stores a customer's risk score, adjusted for their age. This double-precision value represents the customer's risk profile, likely calculated based on a combination of factors including claim history and potentially other customer attributes, and is used to categorize customers for policy management."
        },
        {
          "name": "previous_claims_count",
          "type": "INTEGER",
          "description": "`previous_claims_count` stores the total number of claims filed by a customer prior to the current assessment. This integer value is a key input for calculating the customer's risk profile within the `mart_customer_risk_profile` model, contributing to the overall risk assessment and customer segmentation. The count is derived from the claims processing project and is used alongside other factors to determine a customer's risk category.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`previous_claims_count` stores the total number of claims filed by a customer prior to the current assessment. This integer value is a key input for calculating the customer's risk profile within the `mart_customer_risk_profile` model, contributing to the overall risk assessment and customer segmentation. The count is derived from the claims processing project and is used alongside other factors to determine a customer's risk category."
        },
        {
          "name": "risk_category",
          "type": "VARCHAR",
          "description": "The `risk_category` column in the `mart_customer_risk_profile` table stores a customer's risk classification (e.g., Low, Medium, High) based on their `age_adjusted_risk_score` and potentially other factors. This categorization provides a simplified view of customer risk profiles, aiding in policy management and risk analysis. This column is crucial for segmenting customers based on their overall risk level.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "The `risk_category` column in the `mart_customer_risk_profile` table stores a customer's risk classification (e.g., Low, Medium, High) based on their `age_adjusted_risk_score` and potentially other factors. This categorization provides a simplified view of customer risk profiles, aiding in policy management and risk analysis. This column is crucial for segmenting customers based on their overall risk level."
        },
        {
          "name": "customer_segment",
          "type": "VARCHAR",
          "description": "`customer_segment` categorizes customers within the `mart_customer_risk_profile` table based on their risk profile, likely derived from a combination of factors including claims history and calculated risk metrics. This VARCHAR column provides a high-level segmentation of customers, enabling targeted analysis and policy management strategies.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`customer_segment` categorizes customers within the `mart_customer_risk_profile` table based on their risk profile, likely derived from a combination of factors including claims history and calculated risk metrics. This VARCHAR column provides a high-level segmentation of customers, enabling targeted analysis and policy management strategies."
        },
        {
          "name": "total_claims",
          "type": "INTEGER",
          "description": "`total_claims` stores the total number of claims associated with a customer. This integer value is a key component of the customer risk profile, used in risk scoring calculations and analysis of claim history. It is derived from a count of claims in the claims processing project.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`total_claims` stores the total number of claims associated with a customer. This integer value is a key component of the customer risk profile, used in risk scoring calculations and analysis of claim history. It is derived from a count of claims in the claims processing project."
        },
        {
          "name": "total_claim_amount",
          "type": "INTEGER",
          "description": "This column, `total_claim_amount`, stores the sum of all claim amounts for a given customer.  It represents the total monetary value of claims filed by a customer, providing a key indicator of their claim history and potential risk. This data is crucial for calculating customer risk profiles within the `mart_customer_risk_profile` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `total_claim_amount`, stores the sum of all claim amounts for a given customer.  It represents the total monetary value of claims filed by a customer, providing a key indicator of their claim history and potential risk. This data is crucial for calculating customer risk profiles within the `mart_customer_risk_profile` model."
        },
        {
          "name": "total_settlement_amount",
          "type": "INTEGER",
          "description": "`total_settlement_amount` stores the sum of all settlement amounts for a customer across all settled claims. This integer value represents the total financial outlay for settled claims, providing a key metric for understanding a customer's claim history and potential risk exposure within the `mart_customer_risk_profile` model.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`total_settlement_amount` stores the sum of all settlement amounts for a customer across all settled claims. This integer value represents the total financial outlay for settled claims, providing a key metric for understanding a customer's claim history and potential risk exposure within the `mart_customer_risk_profile` model."
        },
        {
          "name": "avg_days_to_settle",
          "type": "INTEGER",
          "description": "This column, `avg_days_to_settle`, stores the average number of days it takes to settle a customer's claims. It's calculated by averaging the `days_to_settle` values from the claims data joined to the customer risk profile. This metric helps assess a customer's claim history and potentially indicates risk related to claim resolution speed.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "This column, `avg_days_to_settle`, stores the average number of days it takes to settle a customer's claims. It's calculated by averaging the `days_to_settle` values from the claims data joined to the customer risk profile. This metric helps assess a customer's claim history and potentially indicates risk related to claim resolution speed."
        },
        {
          "name": "settled_claims_count",
          "type": "INTEGER",
          "description": "`settled_claims_count` stores the total number of claims for a customer that have been successfully settled. This integer value is a key component of the `mart_customer_risk_profile` model, contributing to the customer's overall risk assessment by quantifying their claim history. The column is calculated by summing the number of claims with a 'SETTLED' status.",
          "isPrimaryKey": false,
          "isForeignKey": false,
          "ai_description": "`settled_claims_count` stores the total number of claims for a customer that have been successfully settled. This integer value is a key component of the `mart_customer_risk_profile` model, contributing to the customer's overall risk assessment by quantifying their claim history. The column is calculated by summing the number of claims with a 'SETTLED' status."
        },
        {
          "name": "denied_claims_count",
          "type": "INTEGER",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "most_recent_claim_date",
          "type": "DATE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "claims_adjusted_risk_score",
          "type": "DOUBLE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "claim_denial_rate",
          "type": "DOUBLE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "risk_source",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "claims_source",
          "type": "VARCHAR",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        },
        {
          "name": "dbt_updated_at",
          "type": "TIMESTAMP WITH TIME ZONE",
          "description": "",
          "isPrimaryKey": false,
          "isForeignKey": false
        }
      ],
      "sql": "{{\n    config(\n        materialized='table',\n        tags=['mart', 'customers', 'risk', 'daily']\n    )\n}}\n\nWITH customer_risk_enriched AS (\n    SELECT * FROM {{ ref('int_customer_risk_enriched') }}\n),\n\n-- Reference to claims data from claims processing project\ncustomer_claims AS (\n    {% if execute %}\n        {% if adapter.get_relation(this.database, 'mart', 'mart_claims_analysis') %}\n            SELECT \n                customer_id,\n                COUNT(*) AS total_claims,\n                SUM(claim_amount) AS total_claim_amount,\n                SUM(settlement_amount_clean) AS total_settlement_amount,\n                AVG(days_to_settle) AS avg_days_to_settle,\n                SUM(CASE WHEN claim_status = 'SETTLED' THEN 1 ELSE 0 END) AS settled_claims_count,\n                SUM(CASE WHEN claim_status = 'DENIED' THEN 1 ELSE 0 END) AS denied_claims_count,\n                MAX(claim_date) AS most_recent_claim_date,\n                'claims_processing' AS _dbt_source_project\n            FROM {{ ref('claims_processing', 'mart_claims_analysis') }}\n            GROUP BY customer_id\n        {% else %}\n            SELECT\n                'CU0000' AS customer_id,\n                0 AS total_claims,\n                0 AS total_claim_amount,\n                0 AS total_settlement_amount,\n                0 AS avg_days_to_settle,\n                0 AS settled_claims_count,\n                0 AS denied_claims_count,\n                CAST('2000-01-01' AS DATE) AS most_recent_claim_date,\n                'claims_processing' AS _dbt_source_project\n            WHERE 1=0\n        {% endif %}\n    {% else %}\n        SELECT\n            'CU0000' AS customer_id,\n            0 AS total_claims,\n            0 AS total_claim_amount,\n            0 AS total_settlement_amount,\n            0 AS avg_days_to_settle,\n            0 AS settled_claims_count,\n            0 AS denied_claims_count,\n            CAST('2000-01-01' AS DATE) AS most_recent_claim_date,\n            'claims_processing' AS _dbt_source_project\n        WHERE 1=0\n    {% endif %}\n)\n\nSELECT\n    cr.customer_id,\n    cr.customer_name,\n    cr.email,\n    cr.city,\n    cr.state,\n    cr.age,\n    cr.months_as_customer,\n    cr.credit_score,\n    cr.credit_rating,\n    cr.claim_frequency,\n    cr.risk_score,\n    cr.age_adjusted_risk_score,\n    cr.previous_claims_count,\n    cr.risk_category,\n    cr.customer_segment,\n    -- Claims information from claims processing\n    cc.total_claims,\n    cc.total_claim_amount,\n    cc.total_settlement_amount,\n    cc.avg_days_to_settle,\n    cc.settled_claims_count,\n    cc.denied_claims_count,\n    cc.most_recent_claim_date,\n    -- Risk scoring with claim data\n    CASE\n        WHEN cc.total_claims > 0 THEN\n            cr.age_adjusted_risk_score * (1 + (cc.total_claims / 10))\n        ELSE\n            cr.age_adjusted_risk_score\n    END AS claims_adjusted_risk_score,\n    -- Denial ratio\n    CASE\n        WHEN cc.total_claims > 0 THEN \n            ROUND(cc.denied_claims_count / cc.total_claims * 100, 2)\n        ELSE 0\n    END AS claim_denial_rate,\n    -- Cross project attribution\n    cr._dbt_source_project AS risk_source,\n    cc._dbt_source_project AS claims_source,\n    -- Metadata\n    CURRENT_TIMESTAMP AS dbt_updated_at\nFROM customer_risk_enriched cr\nLEFT JOIN customer_claims cc ON cr.customer_id = cc.customer_id",
      "materialized": "table",
      "schema": "mart",
      "file_path": "models/mart/mart_customer_risk_profile.sql",
      "database": "insurance_data",
      "tags": [
        "mart",
        "customers",
        "risk",
        "daily"
      ],
      "catalog_metadata": {
        "unique_id": "model.customer_risk.mart_customer_risk_profile",
        "metadata": {
          "type": "BASE TABLE",
          "schema": "policy_management_mart",
          "name": "mart_customer_risk_profile",
          "database": "insurance_data",
          "comment": null,
          "owner": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "ai_description": "The `mart_customer_risk_profile` dbt model in the `policy_management` project creates a customer-level risk profile. It consolidates customer information with risk assessments and claim history to generate a comprehensive view of each customer's risk. This model materializes as a table and is tagged for daily updates, serving as a key component in the customer risk analysis mart.  Crucially, it joins enriched customer data with claim data, including counts, amounts, and settlement details, from a separate claims processing project, handling potential missing data gracefully. The model calculates derived risk metrics like `age_adjusted_risk_score` and categorizes customers based on their risk profile, providing valuable insights for policy management."
    }
  ],
  "lineage": [
    {
      "source": "c5",
      "target": "c7"
    },
    {
      "source": "c6",
      "target": "c7"
    },
    {
      "source": "c7",
      "target": "c8"
    },
    {
      "source": "c9",
      "target": "c11"
    },
    {
      "source": "c10",
      "target": "c11"
    },
    {
      "source": "c11",
      "target": "c12"
    },
    {
      "source": "c4",
      "target": "c3"
    },
    {
      "source": "c2",
      "target": "c4"
    },
    {
      "source": "c1",
      "target": "c4"
    },
    {
      "source": "p1",
      "target": "p3"
    },
    {
      "source": "p2",
      "target": "p3"
    },
    {
      "source": "p3",
      "target": "p4"
    },
    {
      "source": "p5",
      "target": "p7"
    },
    {
      "source": "p6",
      "target": "p7"
    },
    {
      "source": "p7",
      "target": "p8"
    }
  ]
}